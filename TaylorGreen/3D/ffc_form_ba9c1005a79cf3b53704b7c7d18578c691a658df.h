// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_BA9C1005A79CF3B53704B7C7D18578C691A658DF_H
#define __FFC_FORM_BA9C1005A79CF3B53704B7C7D18578C691A658DF_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 5, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 56;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923505, 0.00609788120679253, 0.00352061335622801, 0.00248944957812478, 0.00705946233325035, 0.00546823600997146, 0.0044647960058476, 0.0031570875323494, 0.00257775117585286, 0.00182274533665715, -0.00298267418725715, -0.00252081977982932, -0.00218309396769448, -0.00195261860521384, -0.00169101731601733, -0.00138070985681772, -0.0011273448773449, -0.00097630930260694, -0.000797153207506489, -0.000563672438672444, 0.00278687112460006, 0.00245778931055954, 0.00219831358911339, 0.00207721109304566, 0.00185791408306669, 0.00160900079398463, 0.00160900079398464, 0.00143913406048031, 0.00124632665582739, 0.00101762145320215, 0.000928957041533368, 0.000830884437218251, 0.000719567030240159, 0.000587524019939407, 0.000415442218609133, -0.00705593524717798, -0.00638233357089079, -0.00582624677716565, -0.00562868913761196, -0.00513826668309062, -0.00459580543596521, -0.00475711057319694, -0.00434262794914382, -0.00388416451811044, -0.00336378514516178, -0.00368484200521178, -0.00336378514516176, -0.00300866089851429, -0.00260557676948629, -0.00212744452363027, -0.00212744452363026, -0.00194208225905519, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923493, -0.00609788120679249, 0.00352061335622803, 0.00248944957812476, 0.0070594623332504, -0.00546823600997144, -0.00446479600584757, 0.00315708753234942, 0.00257775117585287, 0.00182274533665715, 0.00298267418725716, -0.00252081977982929, -0.00218309396769448, 0.00195261860521383, 0.00169101731601732, 0.00138070985681771, -0.00112734487734489, -0.000976309302606925, -0.000797153207506475, -0.000563672438672438, 0.00278687112460003, -0.00245778931055953, -0.0021983135891134, 0.00207721109304565, 0.00185791408306669, 0.00160900079398462, -0.00160900079398462, -0.0014391340604803, -0.0012463266558274, -0.00101762145320215, 0.000928957041533351, 0.000830884437218258, 0.000719567030240152, 0.000587524019939402, 0.000415442218609129, 0.00705593524717798, -0.00638233357089081, -0.00582624677716566, 0.00562868913761197, 0.00513826668309062, 0.0045958054359652, -0.00475711057319694, -0.00434262794914383, -0.00388416451811044, -0.00336378514516178, 0.00368484200521179, 0.00336378514516178, 0.0030086608985143, 0.0026055767694863, 0.00212744452363027, -0.00212744452363027, -0.00194208225905521, -0.00173705117965753, -0.00150433044925715, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923494, 0.0, -0.00704122671245613, 0.00248944957812474, 0.0, 0.0, 0.0, 0.0094712625970483, -0.00515550235170573, 0.00182274533665714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0045093795093795, -0.00292892790782074, 0.00159430641501297, -0.000563672438672427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00464478520766671, -0.00332353774887303, 0.00215870109072045, -0.0011750480398788, 0.000415442218609134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, -0.0097104112952761, 0.00694820471863011, -0.00451299134777143, 0.00245656133680785, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923491, 0.0, 0.0, -0.00746834873437434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0109364720199429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00563672438672436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00623163327913695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0, 0.03747187483114, -0.0289614183593723, 0.0, 0.0, 0.0, 0.0284137877911448, 0.00515550235170568, -0.00619733414463431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0315656565656565, -0.0113902751970807, 0.0026571773583549, -0.000187890812890804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0232239260383337, -0.00166176887443655, -0.00647610327216137, 0.00646276421933346, -0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0213629048496074, -0.0277928188745204, 0.0243701532779658, -0.0157219925555703, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.0, -0.0287574853355261, 0.05360943398437, 0.0, 0.0, 0.0, -0.0189425251940965, 0.0154665070551172, 0.0153110608279201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00450937950937951, 0.0370997534990628, -0.0281660799985623, 0.0108976671476671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.00431740218144093, -0.0123380044187275, 0.00872428659079177, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338356, -0.0487403065559316, 0.041270230458372, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0, 0.0409576306293853, -0.0449826285156207, 0.0, 0.0, 0.0, 0.0189425251940965, -0.0051555023517058, -0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00455611007883225, 0.0356061766019561, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302218152700864, 0.00411266813957586, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0379091273212801, -0.0550269739444961, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0, -0.0148144621425436, 0.0449826285156208, 0.0, 0.0, 0.0, 0.0, 0.0206220094068229, 0.021143845905223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0106287094334197, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020563340697879, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03439185871531, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0187359374155699, -0.0289614183593723, 0.0211783869997511, -0.0164047080299144, 0.00446479600584752, 0.00947126259704829, -0.00257775117585286, -0.00619733414463432, 0.0208787193108001, -0.0176457384588052, -0.00848980987436738, 0.0136683302364968, 0.00657617845117846, 0.00230118309469618, -0.00789141414141413, -0.0037967583990269, -0.00132858867917748, -0.0001878908128908, 0.0139343556230002, -0.0122889465527977, -0.00109915679455667, 0.0103860554652283, 0.000928957041533345, -0.00482700238195389, -0.00804500396992315, -0.000719567030240148, 0.0037389799674822, 0.00559691799261188, 0.00464478520766673, 0.000415442218609139, -0.00215870109072047, -0.0032313821096667, -0.00290809553026391, 0.0, 0.0, 0.0128177429097644, 0.0, -0.0113041867027994, -0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, -0.00740032731935591, -0.0120346435940572, -0.014070114555226, -0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863013, 0.00812338442598859, 0.00786099627778514, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734316, -0.0249047128495238, 0.014378742667763, 0.0536094339843698, -0.0141189246665007, 0.0109364720199429, 0.0133943880175427, -0.00631417506469885, -0.00773325352755854, 0.0153110608279201, -0.00298267418725716, 0.00252081977982933, 0.0276525235907967, -0.00195261860521385, -0.0214195526695527, -0.0243925408037797, 0.00112734487734488, 0.0123665844996876, 0.0140830399992812, 0.0108976671476671, 0.0, 0.0, 0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796927, 0.0, 0.0129522065443227, 0.00249265331165477, -0.0106850252586226, 0.0, -0.00747795993496439, -0.00143913406048031, 0.00616900220936372, 0.00872428659079175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, 0.0135389740433143, 0.0281402291104519, 0.0357410679969885, 0.0, 0.0, -0.00781673030845889, -0.0162467688519772, -0.020635115229186, -0.018239037386404};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0204788153146928, -0.0449826285156207, 0.0141189246665008, -0.0109364720199429, -0.00446479600584748, 0.00631417506469886, 0.00257775117585284, -0.021143845905223, 0.0, 0.0, 0.00339592394974695, 0.0, -0.00263047138047139, 0.0308358534689291, 0.0, 0.00151870335961076, -0.017803088300978, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, -0.0174485731815836, 0.00356167508620753, 0.0, 0.0, 0.0100739384233621, -0.00205633406978791, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, -0.0218868448636848, -0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.00740723107127185, 0.0449826285156207, 0.0, 0.0, 0.0178591840233903, 0.0, -0.0103110047034114, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00920473237878477, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489396, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0297842233308238, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0335503995581136, -0.00801060507812418, 0.0211783869997512, 0.00109364720199429, -0.0169662248222207, -0.00568275755822894, 0.00567105258687627, 0.00838462854862288, 0.0208787193108001, -0.0109235523792603, -0.0162519217595033, 0.00499002532443536, 0.00958243145743147, 0.0108922666482287, -0.00187890812890812, -0.00466458889023306, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, -0.00245778931055953, -0.0120907247401236, -0.00415442218609133, 0.00464478520766674, 0.00965400476390776, 0.00643600317593851, -0.000719567030240141, -0.00498530662330958, -0.006614539445814, -0.00464478520766674, -0.000415442218609131, 0.00215870109072044, 0.00323138210966672, 0.00290809553026393, 0.0, 0.0127646671417816, -0.00116524935543313, -0.0202632808954031, -0.00719357335632686, 0.00183832217438609, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, -0.020635115229186, -0.01143686949355, -0.00481385743762287, -0.000521115353897263, 0.00170195561890421, 0.0127646671417816, 0.00737991258440982, 0.00347410235931507, 0.00090259826955429, -0.000491312267361578, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, -0.0249047128495238, 0.0553363732971482, -0.00431340273437461, -0.0141189246665008, 0.0153110608279201, 0.00803663281052558, 0.00883984509057838, -0.0159820572902877, 0.000729098134662845, -0.00298267418725716, 0.0277290175781224, -0.00145539597846296, -0.0301571095694136, -0.0116492303992304, 0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917747, -0.00263047138047138, 0.0, 0.0196623144844763, -0.00219831358911338, -0.00727023882565981, -0.0148633126645336, 0.00402250198496157, -0.00724050357293084, 0.0129522065443227, 0.00685479660705067, -0.00457929653940971, 0.00928957041533346, -0.00664707549774609, -0.0057565362419212, -0.00029376200996971, 0.00290809553026395, 0.0, 0.0, 0.0, 0.0202632808954031, -0.00411061334647249, 0.000459580543596519, -0.0399597288148543, -0.00303983956440069, 0.00427258096992149, -0.00100913554354853, 0.0464290092656685, 0.00908221989193678, -0.00270779480866285, -0.00234501909253766, 0.00127646671417817, -0.031911667854454, -0.00776832903622087, 0.000868525589828756, 0.00180519653910858, 0.000245656133680792, -0.000868525589828773};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0492363006502187, -0.00431340273437462, 0.0141189246665007, -0.00656188321196576, -0.00982255121286465, -0.016416855168217, 0.0149509568199466, 0.00072909813466287, 0.0, 0.0033610930397724, -0.00048513199282101, 0.0282044909641998, -0.0124007936507936, 0.00291483191994851, -0.0353234728234728, 0.00889526253486301, 0.00239145962251945, -0.00263047138047138, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920009, 0.00080450039699231, -0.00402250198496154, -0.014391340604803, 0.00934744991870548, -0.00254405363300537, -0.0092895704153335, 0.0141250354327105, -0.00287826812096064, -0.00381890612960613, 0.00290809553026391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516179, -0.0515877880729651, 0.00840946286290446, 0.00300866089851429, -0.00286613444643492, 0.000850977809452107, 0.0425488904726053, -0.00388416451811045, -0.00347410235931507, 0.00120346435940572, 0.000982624534723146, -0.000868525589828758};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.0448791059024117, -0.00801060507812427, 0.0, 0.0174983552319086, -0.00357183680467801, 0.0132597676358676, -0.0175287079957995, 0.00838462854862288, 0.0, 0.0, 0.0, 0.00867830491206147, -0.00300625300625301, 0.000613648825252317, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0160900079398463, -0.00719567030240153, 0.0024926533116548, -0.000508810726601086, 0.00464478520766675, -0.0108014976838374, 0.0107935054536023, -0.00734405024924252, 0.00290809553026394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0257938940364826, -0.0134551405806471, 0.00601732179702859, -0.00208446141558904, 0.000425488904726059, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554292, 0.0017195929357655, -0.000868525589828772};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734313, -0.0324515955311979, -0.0187359374155699, -0.0289614183593722, 0.0211783869997511, 0.0164047080299144, -0.00446479600584756, 0.00947126259704828, -0.00257775117585285, -0.00619733414463429, -0.0208787193108001, -0.0176457384588052, -0.00848980987436741, -0.0136683302364968, -0.00657617845117842, -0.00230118309469618, -0.00789141414141414, -0.00379675839902689, -0.00132858867917748, -0.000187890812890818, 0.0139343556230002, 0.0122889465527977, 0.00109915679455668, 0.0103860554652283, 0.000928957041533349, -0.0048270023819539, 0.00804500396992312, 0.00071956703024016, -0.0037389799674822, -0.00559691799261187, 0.00464478520766674, 0.000415442218609132, -0.00215870109072046, -0.00323138210966673, -0.00290809553026393, 0.0, 0.0, 0.0128177429097644, 0.0, 0.0113041867027994, 0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, 0.00740032731935588, 0.0120346435940572, 0.014070114555226, 0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863012, 0.00812338442598859, 0.00786099627778515, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.024904712849524, 0.014378742667763, 0.0536094339843699, -0.0141189246665008, -0.0109364720199429, -0.0133943880175426, -0.00631417506469884, -0.00773325352755861, 0.0153110608279199, 0.00298267418725715, 0.0025208197798293, 0.0276525235907967, 0.00195261860521382, 0.0214195526695527, 0.0243925408037797, 0.00112734487734485, 0.0123665844996876, 0.0140830399992811, 0.0108976671476671, 0.0, 0.0, -0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796923, 0.0, -0.0129522065443228, -0.00249265331165476, 0.0106850252586226, 0.0, -0.00747795993496438, -0.0014391340604803, 0.00616900220936375, 0.00872428659079182, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, -0.0135389740433143, -0.0281402291104519, -0.0357410679969884, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734313, -0.0354703486038674, -0.0204788153146928, -0.0449826285156206, 0.0141189246665007, 0.0109364720199429, 0.00446479600584753, 0.00631417506469885, 0.00257775117585285, -0.0211438459052229, 0.0, 0.0, 0.00339592394974695, 0.0, 0.00263047138047134, -0.0308358534689291, 0.0, 0.00151870335961077, -0.0178030883009781, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, 0.0174485731815835, -0.00356167508620756, 0.0, 0.0, 0.0100739384233621, -0.00205633406978792, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, 0.0218868448636848, 0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0128297005588457, 0.00740723107127183, 0.0449826285156208, 0.0, 0.0, -0.0178591840233903, 0.0, -0.0103110047034115, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00920473237878482, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489395, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0297842233308237, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734305, -0.0324515955311978, -0.0335503995581136, -0.00801060507812423, 0.0211783869997512, -0.00109364720199431, 0.0169662248222208, -0.00568275755822893, 0.00567105258687627, 0.00838462854862291, -0.0208787193108001, -0.0109235523792603, -0.0162519217595033, -0.00499002532443534, -0.00958243145743147, -0.0108922666482287, -0.00187890812890815, -0.00466458889023305, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, 0.00245778931055952, 0.0120907247401236, -0.00415442218609134, 0.00464478520766673, 0.00965400476390777, -0.00643600317593851, 0.000719567030240148, 0.00498530662330958, 0.00661453944581401, -0.00464478520766677, -0.000415442218609124, 0.00215870109072045, 0.00323138210966672, 0.00290809553026392, 0.0, 0.0127646671417816, -0.00116524935543312, 0.0202632808954031, 0.00719357335632687, -0.00183832217438607, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, 0.020635115229186, 0.0114368694935501, 0.00481385743762287, 0.000521115353897252, -0.00170195561890421, 0.0127646671417816, 0.00737991258440981, 0.00347410235931507, 0.000902598269554277, -0.000491312267361576, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734306, 0.0249047128495239, 0.0553363732971483, -0.00431340273437459, -0.0141189246665007, -0.0153110608279201, -0.00803663281052554, 0.00883984509057833, -0.0159820572902877, 0.000729098134662816, 0.00298267418725714, 0.0277290175781224, -0.00145539597846298, 0.0301571095694136, 0.0116492303992305, -0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917748, -0.00263047138047135, 0.0, -0.0196623144844763, 0.00219831358911337, -0.00727023882565974, -0.0148633126645335, 0.00402250198496158, 0.00724050357293086, -0.0129522065443227, -0.00685479660705068, 0.0045792965394097, 0.00928957041533352, -0.0066470754977461, -0.00575653624192119, -0.000293762009969713, 0.00290809553026392, 0.0, 0.0, 0.0, -0.0202632808954031, 0.00411061334647248, -0.00045958054359652, -0.0399597288148542, -0.00303983956440067, 0.00427258096992148, -0.00100913554354853, -0.0464290092656685, -0.00908221989193682, 0.00270779480866286, 0.00234501909253766, -0.00127646671417816, -0.031911667854454, -0.00776832903622085, 0.000868525589828734, 0.00180519653910859, 0.000245656133680784, -0.000868525589828764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734315, -0.0354703486038674, -0.0492363006502185, -0.00431340273437457, 0.0141189246665008, 0.00656188321196575, 0.00982255121286466, -0.016416855168217, 0.0149509568199466, 0.000729098134662867, 0.0, 0.00336109303977241, -0.000485131992820998, -0.0282044909641998, 0.0124007936507937, -0.00291483191994851, -0.0353234728234728, 0.008895262534863, 0.00239145962251945, -0.0026304713804714, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920008, 0.000804500396992312, 0.00402250198496156, 0.0143913406048031, -0.00934744991870546, 0.00254405363300538, -0.00928957041533351, 0.0141250354327105, -0.00287826812096063, -0.00381890612960613, 0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516176, 0.0515877880729651, -0.00840946286290444, -0.00300866089851428, 0.00286613444643492, -0.000850977809452105, 0.0425488904726053, -0.00388416451811045, -0.00347410235931505, 0.00120346435940571, 0.000982624534723157, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0128297005588457, 0.0448791059024117, -0.00801060507812429, 0.0, -0.0174983552319087, 0.00357183680467806, 0.0132597676358676, -0.0175287079957995, 0.00838462854862292, 0.0, 0.0, 0.0, -0.00867830491206146, 0.00300625300625302, -0.000613648825252329, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0160900079398463, 0.00719567030240154, -0.00249265331165478, 0.000508810726601091, 0.00464478520766676, -0.0108014976838374, 0.0107935054536023, -0.00734405024924251, 0.00290809553026393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0257938940364825, 0.0134551405806471, -0.00601732179702859, 0.00208446141558904, -0.000425488904726056, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554288, 0.00171959293576549, -0.000868525589828771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0452812960900435, -0.0113287063442981, -0.00801060507812424, -0.00141189246665005, 0.0164047080299144, 0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862293, -0.00894802256177147, -0.0142846454190327, -0.0123708658169354, -0.014536160727703, -0.0125886844636845, -0.0102786178229764, -0.00939454064454065, -0.00813591085505764, -0.00664294339588734, -0.00469727032227033, -0.00836061337380014, 0.00245778931055955, 0.00219831358911339, 0.00830884437218263, 0.00743165633226679, 0.0064360031759385, 0.00965400476390778, 0.00863480436288184, 0.00747795993496438, 0.00610572871921294, 0.00650269929073342, 0.00581619106052785, 0.00503696921168106, 0.00411266813957582, 0.00290809553026391, 0.0352796762358899, 0.0191470007126724, 0.0174787403314969, 0.00788016479265675, 0.00719357335632689, 0.00643412761035129, 0.000951422114639382, 0.000868525589828755, 0.000776832903622076, 0.000672757029032345, -0.00221090520312707, -0.00201827108709705, -0.00180519653910857, -0.00156334606169177, -0.00127646671417816, -0.00212744452363026, -0.00194208225905521, -0.00173705117965752, -0.00150433044925715, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0603750614533913, -0.00610007264692978, -0.00431340273437464, -0.00564756986660042, -0.0218729440398858, -0.0178591840233902, 0.00126283501293976, 0.00103110047034114, 0.000729098134662865, 0.0417574386216002, 0.016805465198862, 0.0145539597846298, -0.000867830491206139, -0.000751563251563246, -0.00061364882525229, -0.00526094276094275, -0.00455611007883229, -0.00372004830169691, -0.00263047138047138, 0.00557374224920013, -0.0196623144844763, -0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992314, 0.00321800158796925, 0.00287826812096061, 0.00249265331165479, 0.00203524290640428, 0.00650269929073342, 0.00581619106052785, 0.00503696921168108, 0.00411266813957583, 0.00290809553026394, -0.0705593524717798, -0.0127646671417816, -0.0116524935543313, 0.00450295131008955, 0.00411061334647247, 0.00367664434877213, 0.00380568845855755, 0.00347410235931508, 0.00310733161448836, 0.00269102811612943, -0.000736968401042361, -0.000672757029032367, -0.000601732179702866, -0.000521115353897261, -0.000425488904726046, -0.00212744452363026, -0.00194208225905521, -0.00173705117965753, -0.00150433044925714, -0.00122828066840394, -0.000868525589828775};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, -0.0603750614533913, -0.00610007264692978, -0.00431340273437461, -0.00564756986660028, 0.0218729440398858, 0.0178591840233902, 0.00126283501293978, 0.00103110047034114, 0.00072909813466285, -0.0417574386216002, 0.016805465198862, 0.0145539597846299, 0.00086783049120613, 0.000751563251563235, 0.000613648825252307, -0.00526094276094275, -0.00455611007883227, -0.0037200483016969, -0.00263047138047138, 0.00557374224920005, 0.0196623144844763, 0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992316, -0.00321800158796927, -0.00287826812096063, -0.0024926533116548, -0.00203524290640429, 0.00650269929073343, 0.00581619106052785, 0.00503696921168108, 0.00411266813957581, 0.00290809553026392, 0.0705593524717798, -0.0127646671417816, -0.0116524935543313, -0.00450295131008957, -0.00411061334647248, -0.00367664434877215, 0.00380568845855754, 0.00347410235931504, 0.00310733161448834, 0.00269102811612942, 0.000736968401042368, 0.000672757029032363, 0.000601732179702872, 0.000521115353897267, 0.000425488904726048, -0.00212744452363027, -0.00194208225905522, -0.00173705117965754, -0.00150433044925714, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0452812960900436, -0.0113287063442981, -0.00801060507812426, -0.00141189246665009, -0.0164047080299144, -0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862292, 0.00894802256177149, -0.0142846454190328, -0.0123708658169354, 0.014536160727703, 0.0125886844636845, 0.0102786178229763, -0.00939454064454066, -0.00813591085505763, -0.00664294339588734, -0.00469727032227034, -0.0083606133738001, -0.00245778931055954, -0.0021983135891134, 0.00830884437218264, 0.00743165633226679, 0.00643600317593851, -0.00965400476390776, -0.00863480436288183, -0.00747795993496437, -0.00610572871921293, 0.00650269929073342, 0.00581619106052784, 0.00503696921168106, 0.00411266813957582, 0.00290809553026394, -0.0352796762358899, 0.0191470007126724, 0.017478740331497, -0.00788016479265674, -0.00719357335632688, -0.00643412761035128, 0.000951422114639399, 0.000868525589828759, 0.000776832903622089, 0.000672757029032358, 0.00221090520312706, 0.00201827108709707, 0.00180519653910857, 0.00156334606169177, 0.00127646671417816, -0.00212744452363025, -0.00194208225905521, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0679219441350651, -0.00435719474780696, -0.00308100195312468, 0.0705946233325039, -0.0328094160598287, -0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.0072909813466286, 0.0298267418725716, 0.0151249186789758, 0.0130985638061668, -0.0325436434202305, -0.0229226791726792, -0.024852777422719, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797018, 0.0, 0.0245778931055954, 0.0219831358911338, -0.0363511941282991, -0.0074316563322668, -0.0345935170706696, 0.0362025178646541, 0.0, 0.0130864298861876, 0.0335815079556711, -0.0232239260383337, 0.00166176887443654, -0.00359783515120076, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0226083734055987, -0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193682, 0.0, 0.0333014729371016, 0.0270779480866286, 0.00703505727761299, -0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0037734413408369, 0.00217859737390355, -0.0215670136718729, 0.0, 0.0984282481794862, -0.0312535720409329, -0.0852413633734344, -0.0180442582309701, 0.0309866707231717, 0.0, 0.0453747560369276, -0.0116431678277039, 0.0, 0.0236742424242424, -0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506555, 0.00394570707070709, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293083, -0.0603375297744236, 0.0, -0.039259289658563, 0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, -0.0555024548951693, 0.0, 0.0164151336477636, -0.00680782247561685, 0.0, 0.0427258096992147, 0.00694820471863017, -0.0108311792346515, -0.00393049813889261, 0.00607967912880133};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0301875307266957, 0.0610007264692972, -0.00308100195312469, 0.0, 0.0218729440398859, 0.0178591840233903, 0.0757701007763862, -0.0412440188136457, -0.00729098134662862, 0.0, 0.0, 0.0, 0.0520698294723689, -0.0127765752765753, 0.00184094647575698, -0.00901875901875902, 0.0286384062098028, -0.0297603864135752, 0.0142797017797017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0402250198496157, 0.014391340604803, -0.0137095932141014, 0.00407048581280861, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0370016365967795, -0.030086608985143, 0.014070114555226, -0.00340391123780845, 0.0, -0.0427258096992148, 0.0243187165152054, 0.0, -0.00982624534723142, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.021478804657352, 0.00377344134083693, -0.0196073763651314, 0.00924300585937423, 0.0, -0.0109364720199429, 0.102690308134494, 0.00947126259704826, -0.0695992817480272, -0.060150596109686, 0.0, -0.0050416395596586, 0.0465726713108155, 0.00650872868404612, 0.0214195526695527, -0.00782402252196702, -0.00450937950937954, -0.0289638426440052, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, -0.0431740218144091, -0.00249265331165473, -0.0605484764655282, 0.0, 0.0299118397398575, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, -0.0451299134777144, -0.0281402291104519, 0.023827378664659, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0150937653633478, 0.0130715842434209, 0.00924300585937413, 0.0, -0.0109364720199429, -0.0089295920116951, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, -0.00650872868404607, 0.0574945887445887, -0.0266937238984759, 0.00676406926406925, 0.0126920209338899, 0.00637722566005186, 0.000563672438672445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0431740218144092, 0.0199412264932383, -0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0451299134777144, -0.0375203054806026, 0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0301875307266956, 0.0174287789912279, 0.0585390371093694, 0.0, 0.0218729440398859, 0.0178591840233903, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, 0.00526094276094279, 0.0533874477969518, 0.0, -0.0045561100788323, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034897146363167, 0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0437736897273697, -0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0679219441350652, -0.00435719474780696, -0.00308100195312475, 0.0705946233325039, 0.0328094160598288, 0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.00729098134662861, -0.0298267418725716, 0.0151249186789759, 0.0130985638061669, 0.0325436434202305, 0.0229226791726792, 0.0248527774227189, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797017, 0.0, -0.0245778931055953, -0.0219831358911338, -0.036351194128299, -0.00743165633226676, -0.0345935170706695, -0.0362025178646541, 0.0, -0.0130864298861876, -0.0335815079556711, -0.0232239260383336, 0.00166176887443654, -0.00359783515120077, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, -0.0226083734055987, 0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193681, 0.0, -0.0333014729371016, -0.0270779480866286, -0.00703505727761297, 0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598856, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, -0.0037734413408369, 0.00217859737390357, -0.0215670136718729, 0.0, -0.0984282481794861, 0.0312535720409329, -0.0852413633734345, -0.0180442582309701, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0116431678277039, 0.0, -0.0236742424242424, 0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506539, 0.0039457070707071, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293081, 0.0603375297744236, 0.0, 0.0392592896585629, -0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, 0.0555024548951693, 0.0, -0.0164151336477637, 0.00680782247561685, 0.0, 0.0427258096992147, 0.0069482047186302, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, -0.0301875307266958, 0.0610007264692973, -0.00308100195312478, 0.0, -0.0218729440398858, -0.0178591840233903, 0.0757701007763862, -0.0412440188136456, -0.0072909813466286, 0.0, 0.0, 0.0, -0.0520698294723688, 0.0127765752765753, -0.00184094647575691, -0.00901875901875897, 0.0286384062098028, -0.0297603864135751, 0.0142797017797018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0402250198496157, -0.0143913406048031, 0.0137095932141013, -0.00407048581280864, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0370016365967796, 0.0300866089851429, -0.014070114555226, 0.00340391123780843, 0.0, -0.0427258096992147, 0.0243187165152053, 0.0, -0.00982624534723143, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573526, -0.00377344134083707, -0.0196073763651313, 0.00924300585937411, 0.0, 0.0109364720199428, -0.102690308134494, 0.00947126259704835, -0.0695992817480271, -0.0601505961096859, 0.0, -0.00504163955965866, 0.0465726713108155, -0.00650872868404609, -0.0214195526695527, 0.00782402252196703, -0.00450937950937956, -0.0289638426440051, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, 0.0431740218144092, 0.00249265331165475, 0.0605484764655282, 0.0, 0.0299118397398574, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, 0.0451299134777144, 0.0281402291104519, -0.0238273786646589, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573518, 0.0150937653633479, 0.013071584243421, 0.00924300585937412, 0.0, 0.0109364720199429, 0.00892959201169515, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, 0.0065087286840461, -0.0574945887445887, 0.0266937238984759, 0.00676406926406924, 0.0126920209338899, 0.0063772256600518, 0.000563672438672482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0431740218144092, -0.0199412264932383, 0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0451299134777144, 0.0375203054806026, -0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0301875307266957, 0.0174287789912278, 0.0585390371093694, 0.0, -0.0218729440398858, -0.0178591840233902, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, -0.00526094276094276, -0.0533874477969517, 0.0, -0.00455611007883227, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0348971463631671, -0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437736897273697, 0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0566435317214905, -0.00308100195312481, 0.0423567739995023, 0.0546823600997146, 0.0446479600584756, 0.0378850503881931, 0.0051555023517058, -0.00729098134662859, 0.0417574386216002, -0.00504163955965863, 0.0295930515620807, -0.0247331689993752, 0.0101461038961039, 0.0266937238984759, -0.0202922077922078, 0.00216957622801539, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, -0.0245778931055954, -0.00219831358911336, -0.00519302773261414, -0.0130053985814669, -0.0168945083368385, 0.00402250198496158, -0.0158304746652834, -0.026796023100289, -0.0295110221428625, 0.00464478520766674, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, -0.0226083734055987, -0.0367664434877216, 0.0, -0.0047768907440582, -0.00776832903622084, -0.00908221989193678, 0.0, 0.00370016365967797, 0.00601732179702859, 0.00703505727761299, 0.00680782247561684, 0.0, 0.00427258096992148, 0.0069482047186301, 0.00812338442598856, 0.00786099627778516, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0, -0.00435719474780698, -0.0215670136718729, -0.127070321998507, 0.0, 0.0, 0.0284137877911449, 0.03608851646194, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0422064833754265, 0.0, 0.0, 0.0, -0.0202922077922078, -0.00618329224984381, 0.00159430641501296, 0.00394570707070708, 0.0836061337380012, 0.0, 0.0, -0.0103860554652283, 0.024152883079867, 0.0434430214375849, 0.0, 0.0, 0.0, 0.0, 0.00464478520766673, -0.0108014976838374, -0.0194283098164842, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, 0.0769064574585865, 0.0, 0.0, 0.0, 0.0, -0.00955378148811642, -0.0155366580724417, -0.0181644397838736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00427258096992146, 0.00694820471863015, 0.00812338442598858, 0.00786099627778516, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 42:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083696, -0.0566435317214904, -0.00308100195312474, 0.0423567739995022, -0.0546823600997145, -0.0446479600584756, 0.037885050388193, 0.00515550235170577, -0.00729098134662853, -0.0417574386216002, -0.00504163955965862, 0.0295930515620806, 0.0247331689993752, -0.0101461038961039, -0.0266937238984759, -0.0202922077922078, 0.00216957622801538, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, 0.0245778931055953, 0.00219831358911338, -0.00519302773261413, -0.0130053985814669, -0.0168945083368386, -0.00402250198496156, 0.0158304746652834, 0.026796023100289, 0.0295110221428625, 0.00464478520766678, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, 0.0226083734055987, 0.0367664434877216, 0.0, -0.00477689074405818, -0.00776832903622087, -0.0090822198919368, 0.0, -0.00370016365967795, -0.00601732179702859, -0.00703505727761298, -0.00680782247561684, 0.0, 0.00427258096992151, 0.00694820471863008, 0.00812338442598856, 0.00786099627778518, 0.00607967912880136};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 43:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, -0.0188672067041848, 0.00653579212171038, 0.0092430058593742, 0.0141189246665007, 0.0, -0.111619900146189, -0.0031570875323494, -0.0541327746929101, -0.060150596109686, -0.00894802256177143, -0.0025208197798293, -0.0276525235907967, 0.000650872868404634, 0.0360750360750361, -0.0188697013765088, 0.00112734487734487, 0.0374251899332651, 0.0199288301876619, 0.000563672438672437, 0.0, 0.0, 0.0593544669060615, 0.0, 0.0167212267476002, 0.0032180015879692, 0.0, -0.0043174021814409, 0.0224338798048931, 0.0463017761206981, 0.0, -0.00747795993496438, 0.018708742786244, 0.043183015465546, 0.0461140862656136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0620433733855302, 0.0, 0.0, 0.0174787403314969, 0.0363288795677471, 0.0, 0.0, -0.00451299134777145, -0.00938007637015062, -0.0119136893323295, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 44:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573519, 0.0188672067041847, 0.00653579212171046, 0.00924300585937428, 0.0141189246665008, 0.0, 0.111619900146189, -0.00315708753234942, -0.0541327746929101, -0.0601505961096861, 0.00894802256177154, -0.00252081977982933, -0.0276525235907967, -0.000650872868404596, -0.0360750360750361, 0.0188697013765088, 0.00112734487734489, 0.0374251899332651, 0.019928830187662, 0.000563672438672452, 0.0, 0.0, -0.0593544669060614, 0.0, 0.0167212267476002, 0.00321800158796926, 0.0, 0.00431740218144093, -0.0224338798048931, -0.0463017761206981, 0.0, -0.00747795993496437, 0.018708742786244, 0.0431830154655461, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0620433733855302, 0.0, 0.0, 0.017478740331497, 0.0363288795677472, 0.0, 0.0, 0.00451299134777144, 0.00938007637015066, 0.0119136893323295, 0.0, 0.0, -0.00781673030845888, -0.0162467688519772, -0.0206351152291861, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 45:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, 0.0, -0.0348575579824556, 0.0585390371093695, -0.0282378493330015, 0.0, 0.0, 0.00631417506469884, -0.0206220094068228, 0.083846285486229, 0.0, 0.0, -0.00679184789949389, 0.0, 0.0, 0.0, 0.0, 0.00151870335961078, -0.0616465147138344, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0450520222315696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0100739384233621, -0.0329013451166065, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0565115904387178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 46:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0217859737390348, -0.0523770332031201, 0.0423567739995024, 0.0546823600997146, 0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, 0.0417574386216002, 0.0285692908380655, -0.00921750786359888, 0.0273366604729936, -0.00789141414141414, -0.0248527774227189, 0.0187890812890813, -0.00347132196482459, -0.0143487577351167, -0.015031265031265, -0.0557374224920008, -0.00491557862111906, -0.0241814494802473, -0.0197335053839337, -0.00928957041533348, -0.00241350119097693, -0.0394205194526234, -0.0158304746652834, -0.000623163327913708, 0.00712335017241507, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957583, 0.00540074884191869, 0.0, -0.0510586685671264, 0.00466099742173249, -0.0405265617908061, -0.0143871467126537, 0.00367664434877214, -0.0114170653756726, -0.00564541633388697, -0.00155366580724415, 0.00100913554354854, 0.010317557614593, 0.00571843474677502, 0.00240692871881142, 0.000260557676948618, -0.000850977809452114, 0.0127646671417816, 0.00737991258440983, 0.00347410235931509, 0.000902598269554292, -0.00049131226736157, -0.000868525589828748};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 47:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, 0.0, -0.0217859737390347, 0.00308100195312484, -0.127070321998507, 0.0, 0.0, 0.0473563129852413, 0.0257775117585285, 0.0127592173566001, 0.0, -0.0352914769176103, 0.0509388592462045, 0.0, 0.0, 0.0, 0.00225468975468975, -0.00943765659186684, -0.0143487577351166, -0.0129644660894661, 0.0836061337380012, 0.0, 0.0, 0.0477758551400501, 0.00928957041533348, -0.0144810071458617, 0.0, 0.0, 0.0, 0.0, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957584, 0.00540074884191876, 0.0, 0.0765880028506896, -0.00699149613259875, 0.0, 0.0, 0.0, -0.0228341307513453, -0.011290832667774, -0.00310733161448838, 0.00201827108709704, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, 0.00737991258440981, 0.00347410235931506, 0.000902598269554269, -0.000491312267361589, -0.000868525589828803};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 48:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083695, -0.0217859737390348, -0.0523770332031201, 0.0423567739995023, -0.0546823600997146, -0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, -0.0417574386216002, 0.0285692908380655, -0.00921750786359893, -0.0273366604729936, 0.00789141414141414, 0.0248527774227189, 0.0187890812890813, -0.00347132196482458, -0.0143487577351166, -0.015031265031265, -0.0557374224920008, 0.00491557862111907, 0.0241814494802472, -0.0197335053839337, -0.00928957041533349, -0.00241350119097694, 0.0394205194526234, 0.0158304746652834, 0.000623163327913706, -0.00712335017241508, -0.0325134964536671, -0.0141250354327105, -0.00215870109072045, 0.00411266813957581, 0.00540074884191868, 0.0, -0.0510586685671264, 0.0046609974217325, 0.0405265617908061, 0.0143871467126537, -0.00367664434877216, -0.0114170653756727, -0.00564541633388695, -0.00155366580724416, 0.00100913554354855, -0.010317557614593, -0.00571843474677502, -0.00240692871881143, -0.000260557676948629, 0.000850977809452107, 0.0127646671417816, 0.00737991258440984, 0.00347410235931506, 0.000902598269554289, -0.000491312267361559, -0.000868525589828739};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 49:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0188672067041847, 0.0108929868695175, 0.00308100195312472, 0.0141189246665008, -0.109364720199429, 0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, -0.00894802256177148, -0.0277290175781224, 0.00145539597846298, -0.00585785581564149, 0.0383297258297258, -0.0124263887113595, 0.0191648629148628, 0.0348216984596467, 0.00717437886755836, -0.0129644660894661, 0.0, 0.0589869434534289, -0.00659494076734012, 0.00727023882565974, 0.0148633126645335, -0.0040225019849616, 0.0506835250105158, -0.00431740218144091, -0.00810112326287806, 0.00356167508620759, 0.0650269929073342, -0.00166176887443651, -0.0115130724838425, -0.00205633406978793, 0.00540074884191875, 0.0, 0.0, 0.0, 0.0607898426862092, -0.0123318400394175, 0.0013787416307896, 0.0399597288148543, 0.00303983956440066, -0.00427258096992151, 0.00100913554354852, -0.0154763364218895, -0.00302740663064561, 0.000902598269554317, 0.000781673030845898, -0.000425488904726052, -0.031911667854454, -0.00776832903622089, 0.000868525589828735, 0.00180519653910857, 0.000245656133680779, -0.000868525589828785};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 50:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, 0.0188672067041847, 0.0108929868695173, 0.00308100195312461, 0.0141189246665007, 0.109364720199429, -0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, 0.00894802256177146, -0.0277290175781224, 0.00145539597846298, 0.00585785581564147, -0.0383297258297259, 0.0124263887113595, 0.0191648629148629, 0.0348216984596467, 0.00717437886755832, -0.0129644660894661, 0.0, -0.0589869434534289, 0.00659494076734013, 0.00727023882565983, 0.0148633126645336, -0.00402250198496153, -0.0506835250105158, 0.00431740218144093, 0.00810112326287806, -0.00356167508620756, 0.0650269929073343, -0.00166176887443652, -0.0115130724838424, -0.00205633406978791, 0.00540074884191871, 0.0, 0.0, 0.0, -0.0607898426862092, 0.0123318400394175, -0.00137874163078959, 0.0399597288148543, 0.00303983956440068, -0.00427258096992146, 0.00100913554354852, 0.0154763364218896, 0.00302740663064561, -0.000902598269554309, -0.000781673030845882, 0.000425488904726061, -0.031911667854454, -0.00776832903622087, 0.000868525589828761, 0.00180519653910858, 0.000245656133680792, -0.000868525589828766};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 51:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.078755617076958, 0.0, 0.0435719474780694, -0.0523770332031201, -0.0282378493330015, 0.0, 0.0, 0.0631417506469885, -0.0515550235170571, 0.0291639253865144, 0.0, -0.00672218607954477, 0.000970263985642002, 0.0, 0.0, 0.0, -0.0601250601250601, -0.0125835421224891, 0.0286975154702333, -0.015031265031265, 0.0, 0.0, 0.0, -0.0436214329539588, 0.0111474844984002, -0.00160900079398465, 0.0, 0.0, 0.0, 0.0, -0.0650269929073343, 0.031573608614294, -0.00287826812096059, -0.00822533627915167, 0.00540074884191872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0532796384198057, 0.018239037386404, -0.00466099742173253, 0.000672757029032364, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425488904726053, -0.00388416451811041, -0.00347410235931508, 0.00120346435940574, 0.000982624534723167, -0.000868525589828753};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 52:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, -0.188672067041848, -0.108929868695174, -0.0770250488281178, -0.0705946233325038, -0.0546823600997147, -0.0446479600584758, -0.0315708753234942, -0.0257775117585285, -0.0182274533665715, 0.0894802256177148, -0.0151249186789758, -0.0130985638061669, 0.0585785581564149, -0.028183621933622, 0.0690354928408859, 0.0744047619047619, 0.00976309302606916, 0.039857660375324, 0.0597492784992785, 0.0, 0.0737336793167861, 0.0659494076734016, 0.036351194128299, 0.00743165633226677, 0.0345935170706695, -0.0120675059548847, 0.0431740218144092, 0.0155790831978424, -0.0254405363300539, -0.0232239260383337, 0.0465295284842228, 0.0251848460584054, -0.0146881004984851, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, 0.0678251202167962, -0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.00908221989193679, 0.0, -0.0111004909790339, -0.00902598269554285, -0.00234501909253765, 0.0034039112378084, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 53:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.188672067041848, -0.108929868695174, -0.0770250488281179, -0.0705946233325039, 0.0546823600997147, 0.0446479600584757, -0.0315708753234942, -0.0257775117585286, -0.0182274533665715, -0.0894802256177148, -0.0151249186789759, -0.0130985638061668, -0.0585785581564149, 0.028183621933622, -0.0690354928408859, 0.0744047619047619, 0.00976309302606915, 0.039857660375324, 0.0597492784992785, 0.0, -0.0737336793167861, -0.0659494076734016, 0.036351194128299, 0.00743165633226679, 0.0345935170706696, 0.0120675059548846, -0.0431740218144092, -0.0155790831978425, 0.0254405363300538, -0.0232239260383337, 0.0465295284842228, 0.0251848460584053, -0.014688100498485, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, -0.0678251202167962, 0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.0090822198919368, 0.0, 0.0111004909790338, 0.00902598269554286, 0.00234501909253764, -0.00340391123780842, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598857, 0.00196524906944628, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 54:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.217859737390348, -0.0770250488281177, 0.0, 0.0, 0.0, -0.0947126259704828, 0.0515550235170571, -0.0182274533665715, 0.0, -0.0907495120738552, 0.0232863356554078, 0.0, 0.0, 0.0, -0.0946969696969697, -0.0227805503941613, -0.079715320750648, 0.0597492784992784, 0.0, 0.0, 0.0, -0.0727023882565981, -0.0483057661597341, 0.0144810071458617, 0.0, 0.0, 0.0, 0.0, 0.0464478520766673, -0.0781031370985168, 0.0431740218144092, 0.0293762009969702, -0.0328199352701214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0668764704168148, 0.0310733161448835, -0.00605481326129118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0427258096992147, 0.00694820471863014, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 55:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.0, 0.231075146484353, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109364720199429, 0.0, 0.0100832791193172, -0.093145342621631, 0.0, 0.0, 0.0, -0.00450937950937958, -0.104139658944738, 0.0, -0.0924422799422799, 0.0, 0.0, 0.0, 0.0, -0.066884906990401, -0.0579240285834466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.0647610327216138, 0.0, 0.0835038859404355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0699149613259878, 0.0242192530451648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338355, 0.0270779480866287, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 56; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 56; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[243];
    for (unsigned int r = 0; r < 243; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 56; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 28:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 29:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 30:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 31:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 32:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 33:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 34:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 35:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 36:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 37:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 38:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 39:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 40:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 41:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 42:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 43:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 44:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 45:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 46:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 47:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 48:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 49:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 50:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 51:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 52:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 53:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 54:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 55:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
    y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[28] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[29] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[30] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[31] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[32] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[33] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[34] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[35] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[36] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[37] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[38] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[39] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[40] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[41] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[42] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[43] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[44] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[45] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[46] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[47] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[48] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[49] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[50] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[51] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[52] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[53] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[54] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[55] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 5, 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 168;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923505, 0.00609788120679253, 0.00352061335622801, 0.00248944957812478, 0.00705946233325035, 0.00546823600997146, 0.0044647960058476, 0.0031570875323494, 0.00257775117585286, 0.00182274533665715, -0.00298267418725715, -0.00252081977982932, -0.00218309396769448, -0.00195261860521384, -0.00169101731601733, -0.00138070985681772, -0.0011273448773449, -0.00097630930260694, -0.000797153207506489, -0.000563672438672444, 0.00278687112460006, 0.00245778931055954, 0.00219831358911339, 0.00207721109304566, 0.00185791408306669, 0.00160900079398463, 0.00160900079398464, 0.00143913406048031, 0.00124632665582739, 0.00101762145320215, 0.000928957041533368, 0.000830884437218251, 0.000719567030240159, 0.000587524019939407, 0.000415442218609133, -0.00705593524717798, -0.00638233357089079, -0.00582624677716565, -0.00562868913761196, -0.00513826668309062, -0.00459580543596521, -0.00475711057319694, -0.00434262794914382, -0.00388416451811044, -0.00336378514516178, -0.00368484200521178, -0.00336378514516176, -0.00300866089851429, -0.00260557676948629, -0.00212744452363027, -0.00212744452363026, -0.00194208225905519, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923493, -0.00609788120679249, 0.00352061335622803, 0.00248944957812476, 0.0070594623332504, -0.00546823600997144, -0.00446479600584757, 0.00315708753234942, 0.00257775117585287, 0.00182274533665715, 0.00298267418725716, -0.00252081977982929, -0.00218309396769448, 0.00195261860521383, 0.00169101731601732, 0.00138070985681771, -0.00112734487734489, -0.000976309302606925, -0.000797153207506475, -0.000563672438672438, 0.00278687112460003, -0.00245778931055953, -0.0021983135891134, 0.00207721109304565, 0.00185791408306669, 0.00160900079398462, -0.00160900079398462, -0.0014391340604803, -0.0012463266558274, -0.00101762145320215, 0.000928957041533351, 0.000830884437218258, 0.000719567030240152, 0.000587524019939402, 0.000415442218609129, 0.00705593524717798, -0.00638233357089081, -0.00582624677716566, 0.00562868913761197, 0.00513826668309062, 0.0045958054359652, -0.00475711057319694, -0.00434262794914383, -0.00388416451811044, -0.00336378514516178, 0.00368484200521179, 0.00336378514516178, 0.0030086608985143, 0.0026055767694863, 0.00212744452363027, -0.00212744452363027, -0.00194208225905521, -0.00173705117965753, -0.00150433044925715, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923494, 0.0, -0.00704122671245613, 0.00248944957812474, 0.0, 0.0, 0.0, 0.0094712625970483, -0.00515550235170573, 0.00182274533665714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0045093795093795, -0.00292892790782074, 0.00159430641501297, -0.000563672438672427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00464478520766671, -0.00332353774887303, 0.00215870109072045, -0.0011750480398788, 0.000415442218609134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, -0.0097104112952761, 0.00694820471863011, -0.00451299134777143, 0.00245656133680785, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923491, 0.0, 0.0, -0.00746834873437434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0109364720199429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00563672438672436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00623163327913695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0, 0.03747187483114, -0.0289614183593723, 0.0, 0.0, 0.0, 0.0284137877911448, 0.00515550235170568, -0.00619733414463431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0315656565656565, -0.0113902751970807, 0.0026571773583549, -0.000187890812890804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0232239260383337, -0.00166176887443655, -0.00647610327216137, 0.00646276421933346, -0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0213629048496074, -0.0277928188745204, 0.0243701532779658, -0.0157219925555703, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.0, -0.0287574853355261, 0.05360943398437, 0.0, 0.0, 0.0, -0.0189425251940965, 0.0154665070551172, 0.0153110608279201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00450937950937951, 0.0370997534990628, -0.0281660799985623, 0.0108976671476671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.00431740218144093, -0.0123380044187275, 0.00872428659079177, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338356, -0.0487403065559316, 0.041270230458372, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0, 0.0409576306293853, -0.0449826285156207, 0.0, 0.0, 0.0, 0.0189425251940965, -0.0051555023517058, -0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00455611007883225, 0.0356061766019561, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302218152700864, 0.00411266813957586, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0379091273212801, -0.0550269739444961, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0, -0.0148144621425436, 0.0449826285156208, 0.0, 0.0, 0.0, 0.0, 0.0206220094068229, 0.021143845905223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0106287094334197, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020563340697879, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03439185871531, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0187359374155699, -0.0289614183593723, 0.0211783869997511, -0.0164047080299144, 0.00446479600584752, 0.00947126259704829, -0.00257775117585286, -0.00619733414463432, 0.0208787193108001, -0.0176457384588052, -0.00848980987436738, 0.0136683302364968, 0.00657617845117846, 0.00230118309469618, -0.00789141414141413, -0.0037967583990269, -0.00132858867917748, -0.0001878908128908, 0.0139343556230002, -0.0122889465527977, -0.00109915679455667, 0.0103860554652283, 0.000928957041533345, -0.00482700238195389, -0.00804500396992315, -0.000719567030240148, 0.0037389799674822, 0.00559691799261188, 0.00464478520766673, 0.000415442218609139, -0.00215870109072047, -0.0032313821096667, -0.00290809553026391, 0.0, 0.0, 0.0128177429097644, 0.0, -0.0113041867027994, -0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, -0.00740032731935591, -0.0120346435940572, -0.014070114555226, -0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863013, 0.00812338442598859, 0.00786099627778514, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734316, -0.0249047128495238, 0.014378742667763, 0.0536094339843698, -0.0141189246665007, 0.0109364720199429, 0.0133943880175427, -0.00631417506469885, -0.00773325352755854, 0.0153110608279201, -0.00298267418725716, 0.00252081977982933, 0.0276525235907967, -0.00195261860521385, -0.0214195526695527, -0.0243925408037797, 0.00112734487734488, 0.0123665844996876, 0.0140830399992812, 0.0108976671476671, 0.0, 0.0, 0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796927, 0.0, 0.0129522065443227, 0.00249265331165477, -0.0106850252586226, 0.0, -0.00747795993496439, -0.00143913406048031, 0.00616900220936372, 0.00872428659079175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, 0.0135389740433143, 0.0281402291104519, 0.0357410679969885, 0.0, 0.0, -0.00781673030845889, -0.0162467688519772, -0.020635115229186, -0.018239037386404};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0204788153146928, -0.0449826285156207, 0.0141189246665008, -0.0109364720199429, -0.00446479600584748, 0.00631417506469886, 0.00257775117585284, -0.021143845905223, 0.0, 0.0, 0.00339592394974695, 0.0, -0.00263047138047139, 0.0308358534689291, 0.0, 0.00151870335961076, -0.017803088300978, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, -0.0174485731815836, 0.00356167508620753, 0.0, 0.0, 0.0100739384233621, -0.00205633406978791, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, -0.0218868448636848, -0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.00740723107127185, 0.0449826285156207, 0.0, 0.0, 0.0178591840233903, 0.0, -0.0103110047034114, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00920473237878477, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489396, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0297842233308238, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0335503995581136, -0.00801060507812418, 0.0211783869997512, 0.00109364720199429, -0.0169662248222207, -0.00568275755822894, 0.00567105258687627, 0.00838462854862288, 0.0208787193108001, -0.0109235523792603, -0.0162519217595033, 0.00499002532443536, 0.00958243145743147, 0.0108922666482287, -0.00187890812890812, -0.00466458889023306, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, -0.00245778931055953, -0.0120907247401236, -0.00415442218609133, 0.00464478520766674, 0.00965400476390776, 0.00643600317593851, -0.000719567030240141, -0.00498530662330958, -0.006614539445814, -0.00464478520766674, -0.000415442218609131, 0.00215870109072044, 0.00323138210966672, 0.00290809553026393, 0.0, 0.0127646671417816, -0.00116524935543313, -0.0202632808954031, -0.00719357335632686, 0.00183832217438609, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, -0.020635115229186, -0.01143686949355, -0.00481385743762287, -0.000521115353897263, 0.00170195561890421, 0.0127646671417816, 0.00737991258440982, 0.00347410235931507, 0.00090259826955429, -0.000491312267361578, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, -0.0249047128495238, 0.0553363732971482, -0.00431340273437461, -0.0141189246665008, 0.0153110608279201, 0.00803663281052558, 0.00883984509057838, -0.0159820572902877, 0.000729098134662845, -0.00298267418725716, 0.0277290175781224, -0.00145539597846296, -0.0301571095694136, -0.0116492303992304, 0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917747, -0.00263047138047138, 0.0, 0.0196623144844763, -0.00219831358911338, -0.00727023882565981, -0.0148633126645336, 0.00402250198496157, -0.00724050357293084, 0.0129522065443227, 0.00685479660705067, -0.00457929653940971, 0.00928957041533346, -0.00664707549774609, -0.0057565362419212, -0.00029376200996971, 0.00290809553026395, 0.0, 0.0, 0.0, 0.0202632808954031, -0.00411061334647249, 0.000459580543596519, -0.0399597288148543, -0.00303983956440069, 0.00427258096992149, -0.00100913554354853, 0.0464290092656685, 0.00908221989193678, -0.00270779480866285, -0.00234501909253766, 0.00127646671417817, -0.031911667854454, -0.00776832903622087, 0.000868525589828756, 0.00180519653910858, 0.000245656133680792, -0.000868525589828773};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0492363006502187, -0.00431340273437462, 0.0141189246665007, -0.00656188321196576, -0.00982255121286465, -0.016416855168217, 0.0149509568199466, 0.00072909813466287, 0.0, 0.0033610930397724, -0.00048513199282101, 0.0282044909641998, -0.0124007936507936, 0.00291483191994851, -0.0353234728234728, 0.00889526253486301, 0.00239145962251945, -0.00263047138047138, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920009, 0.00080450039699231, -0.00402250198496154, -0.014391340604803, 0.00934744991870548, -0.00254405363300537, -0.0092895704153335, 0.0141250354327105, -0.00287826812096064, -0.00381890612960613, 0.00290809553026391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516179, -0.0515877880729651, 0.00840946286290446, 0.00300866089851429, -0.00286613444643492, 0.000850977809452107, 0.0425488904726053, -0.00388416451811045, -0.00347410235931507, 0.00120346435940572, 0.000982624534723146, -0.000868525589828758};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.0448791059024117, -0.00801060507812427, 0.0, 0.0174983552319086, -0.00357183680467801, 0.0132597676358676, -0.0175287079957995, 0.00838462854862288, 0.0, 0.0, 0.0, 0.00867830491206147, -0.00300625300625301, 0.000613648825252317, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0160900079398463, -0.00719567030240153, 0.0024926533116548, -0.000508810726601086, 0.00464478520766675, -0.0108014976838374, 0.0107935054536023, -0.00734405024924252, 0.00290809553026394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0257938940364826, -0.0134551405806471, 0.00601732179702859, -0.00208446141558904, 0.000425488904726059, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554292, 0.0017195929357655, -0.000868525589828772};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734313, -0.0324515955311979, -0.0187359374155699, -0.0289614183593722, 0.0211783869997511, 0.0164047080299144, -0.00446479600584756, 0.00947126259704828, -0.00257775117585285, -0.00619733414463429, -0.0208787193108001, -0.0176457384588052, -0.00848980987436741, -0.0136683302364968, -0.00657617845117842, -0.00230118309469618, -0.00789141414141414, -0.00379675839902689, -0.00132858867917748, -0.000187890812890818, 0.0139343556230002, 0.0122889465527977, 0.00109915679455668, 0.0103860554652283, 0.000928957041533349, -0.0048270023819539, 0.00804500396992312, 0.00071956703024016, -0.0037389799674822, -0.00559691799261187, 0.00464478520766674, 0.000415442218609132, -0.00215870109072046, -0.00323138210966673, -0.00290809553026393, 0.0, 0.0, 0.0128177429097644, 0.0, 0.0113041867027994, 0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, 0.00740032731935588, 0.0120346435940572, 0.014070114555226, 0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863012, 0.00812338442598859, 0.00786099627778515, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.024904712849524, 0.014378742667763, 0.0536094339843699, -0.0141189246665008, -0.0109364720199429, -0.0133943880175426, -0.00631417506469884, -0.00773325352755861, 0.0153110608279199, 0.00298267418725715, 0.0025208197798293, 0.0276525235907967, 0.00195261860521382, 0.0214195526695527, 0.0243925408037797, 0.00112734487734485, 0.0123665844996876, 0.0140830399992811, 0.0108976671476671, 0.0, 0.0, -0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796923, 0.0, -0.0129522065443228, -0.00249265331165476, 0.0106850252586226, 0.0, -0.00747795993496438, -0.0014391340604803, 0.00616900220936375, 0.00872428659079182, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, -0.0135389740433143, -0.0281402291104519, -0.0357410679969884, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734313, -0.0354703486038674, -0.0204788153146928, -0.0449826285156206, 0.0141189246665007, 0.0109364720199429, 0.00446479600584753, 0.00631417506469885, 0.00257775117585285, -0.0211438459052229, 0.0, 0.0, 0.00339592394974695, 0.0, 0.00263047138047134, -0.0308358534689291, 0.0, 0.00151870335961077, -0.0178030883009781, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, 0.0174485731815835, -0.00356167508620756, 0.0, 0.0, 0.0100739384233621, -0.00205633406978792, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, 0.0218868448636848, 0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0128297005588457, 0.00740723107127183, 0.0449826285156208, 0.0, 0.0, -0.0178591840233903, 0.0, -0.0103110047034115, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00920473237878482, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489395, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0297842233308237, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734305, -0.0324515955311978, -0.0335503995581136, -0.00801060507812423, 0.0211783869997512, -0.00109364720199431, 0.0169662248222208, -0.00568275755822893, 0.00567105258687627, 0.00838462854862291, -0.0208787193108001, -0.0109235523792603, -0.0162519217595033, -0.00499002532443534, -0.00958243145743147, -0.0108922666482287, -0.00187890812890815, -0.00466458889023305, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, 0.00245778931055952, 0.0120907247401236, -0.00415442218609134, 0.00464478520766673, 0.00965400476390777, -0.00643600317593851, 0.000719567030240148, 0.00498530662330958, 0.00661453944581401, -0.00464478520766677, -0.000415442218609124, 0.00215870109072045, 0.00323138210966672, 0.00290809553026392, 0.0, 0.0127646671417816, -0.00116524935543312, 0.0202632808954031, 0.00719357335632687, -0.00183832217438607, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, 0.020635115229186, 0.0114368694935501, 0.00481385743762287, 0.000521115353897252, -0.00170195561890421, 0.0127646671417816, 0.00737991258440981, 0.00347410235931507, 0.000902598269554277, -0.000491312267361576, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734306, 0.0249047128495239, 0.0553363732971483, -0.00431340273437459, -0.0141189246665007, -0.0153110608279201, -0.00803663281052554, 0.00883984509057833, -0.0159820572902877, 0.000729098134662816, 0.00298267418725714, 0.0277290175781224, -0.00145539597846298, 0.0301571095694136, 0.0116492303992305, -0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917748, -0.00263047138047135, 0.0, -0.0196623144844763, 0.00219831358911337, -0.00727023882565974, -0.0148633126645335, 0.00402250198496158, 0.00724050357293086, -0.0129522065443227, -0.00685479660705068, 0.0045792965394097, 0.00928957041533352, -0.0066470754977461, -0.00575653624192119, -0.000293762009969713, 0.00290809553026392, 0.0, 0.0, 0.0, -0.0202632808954031, 0.00411061334647248, -0.00045958054359652, -0.0399597288148542, -0.00303983956440067, 0.00427258096992148, -0.00100913554354853, -0.0464290092656685, -0.00908221989193682, 0.00270779480866286, 0.00234501909253766, -0.00127646671417816, -0.031911667854454, -0.00776832903622085, 0.000868525589828734, 0.00180519653910859, 0.000245656133680784, -0.000868525589828764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734315, -0.0354703486038674, -0.0492363006502185, -0.00431340273437457, 0.0141189246665008, 0.00656188321196575, 0.00982255121286466, -0.016416855168217, 0.0149509568199466, 0.000729098134662867, 0.0, 0.00336109303977241, -0.000485131992820998, -0.0282044909641998, 0.0124007936507937, -0.00291483191994851, -0.0353234728234728, 0.008895262534863, 0.00239145962251945, -0.0026304713804714, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920008, 0.000804500396992312, 0.00402250198496156, 0.0143913406048031, -0.00934744991870546, 0.00254405363300538, -0.00928957041533351, 0.0141250354327105, -0.00287826812096063, -0.00381890612960613, 0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516176, 0.0515877880729651, -0.00840946286290444, -0.00300866089851428, 0.00286613444643492, -0.000850977809452105, 0.0425488904726053, -0.00388416451811045, -0.00347410235931505, 0.00120346435940571, 0.000982624534723157, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0128297005588457, 0.0448791059024117, -0.00801060507812429, 0.0, -0.0174983552319087, 0.00357183680467806, 0.0132597676358676, -0.0175287079957995, 0.00838462854862292, 0.0, 0.0, 0.0, -0.00867830491206146, 0.00300625300625302, -0.000613648825252329, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0160900079398463, 0.00719567030240154, -0.00249265331165478, 0.000508810726601091, 0.00464478520766676, -0.0108014976838374, 0.0107935054536023, -0.00734405024924251, 0.00290809553026393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0257938940364825, 0.0134551405806471, -0.00601732179702859, 0.00208446141558904, -0.000425488904726056, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554288, 0.00171959293576549, -0.000868525589828771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0452812960900435, -0.0113287063442981, -0.00801060507812424, -0.00141189246665005, 0.0164047080299144, 0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862293, -0.00894802256177147, -0.0142846454190327, -0.0123708658169354, -0.014536160727703, -0.0125886844636845, -0.0102786178229764, -0.00939454064454065, -0.00813591085505764, -0.00664294339588734, -0.00469727032227033, -0.00836061337380014, 0.00245778931055955, 0.00219831358911339, 0.00830884437218263, 0.00743165633226679, 0.0064360031759385, 0.00965400476390778, 0.00863480436288184, 0.00747795993496438, 0.00610572871921294, 0.00650269929073342, 0.00581619106052785, 0.00503696921168106, 0.00411266813957582, 0.00290809553026391, 0.0352796762358899, 0.0191470007126724, 0.0174787403314969, 0.00788016479265675, 0.00719357335632689, 0.00643412761035129, 0.000951422114639382, 0.000868525589828755, 0.000776832903622076, 0.000672757029032345, -0.00221090520312707, -0.00201827108709705, -0.00180519653910857, -0.00156334606169177, -0.00127646671417816, -0.00212744452363026, -0.00194208225905521, -0.00173705117965752, -0.00150433044925715, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0603750614533913, -0.00610007264692978, -0.00431340273437464, -0.00564756986660042, -0.0218729440398858, -0.0178591840233902, 0.00126283501293976, 0.00103110047034114, 0.000729098134662865, 0.0417574386216002, 0.016805465198862, 0.0145539597846298, -0.000867830491206139, -0.000751563251563246, -0.00061364882525229, -0.00526094276094275, -0.00455611007883229, -0.00372004830169691, -0.00263047138047138, 0.00557374224920013, -0.0196623144844763, -0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992314, 0.00321800158796925, 0.00287826812096061, 0.00249265331165479, 0.00203524290640428, 0.00650269929073342, 0.00581619106052785, 0.00503696921168108, 0.00411266813957583, 0.00290809553026394, -0.0705593524717798, -0.0127646671417816, -0.0116524935543313, 0.00450295131008955, 0.00411061334647247, 0.00367664434877213, 0.00380568845855755, 0.00347410235931508, 0.00310733161448836, 0.00269102811612943, -0.000736968401042361, -0.000672757029032367, -0.000601732179702866, -0.000521115353897261, -0.000425488904726046, -0.00212744452363026, -0.00194208225905521, -0.00173705117965753, -0.00150433044925714, -0.00122828066840394, -0.000868525589828775};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, -0.0603750614533913, -0.00610007264692978, -0.00431340273437461, -0.00564756986660028, 0.0218729440398858, 0.0178591840233902, 0.00126283501293978, 0.00103110047034114, 0.00072909813466285, -0.0417574386216002, 0.016805465198862, 0.0145539597846299, 0.00086783049120613, 0.000751563251563235, 0.000613648825252307, -0.00526094276094275, -0.00455611007883227, -0.0037200483016969, -0.00263047138047138, 0.00557374224920005, 0.0196623144844763, 0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992316, -0.00321800158796927, -0.00287826812096063, -0.0024926533116548, -0.00203524290640429, 0.00650269929073343, 0.00581619106052785, 0.00503696921168108, 0.00411266813957581, 0.00290809553026392, 0.0705593524717798, -0.0127646671417816, -0.0116524935543313, -0.00450295131008957, -0.00411061334647248, -0.00367664434877215, 0.00380568845855754, 0.00347410235931504, 0.00310733161448834, 0.00269102811612942, 0.000736968401042368, 0.000672757029032363, 0.000601732179702872, 0.000521115353897267, 0.000425488904726048, -0.00212744452363027, -0.00194208225905522, -0.00173705117965754, -0.00150433044925714, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0452812960900436, -0.0113287063442981, -0.00801060507812426, -0.00141189246665009, -0.0164047080299144, -0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862292, 0.00894802256177149, -0.0142846454190328, -0.0123708658169354, 0.014536160727703, 0.0125886844636845, 0.0102786178229763, -0.00939454064454066, -0.00813591085505763, -0.00664294339588734, -0.00469727032227034, -0.0083606133738001, -0.00245778931055954, -0.0021983135891134, 0.00830884437218264, 0.00743165633226679, 0.00643600317593851, -0.00965400476390776, -0.00863480436288183, -0.00747795993496437, -0.00610572871921293, 0.00650269929073342, 0.00581619106052784, 0.00503696921168106, 0.00411266813957582, 0.00290809553026394, -0.0352796762358899, 0.0191470007126724, 0.017478740331497, -0.00788016479265674, -0.00719357335632688, -0.00643412761035128, 0.000951422114639399, 0.000868525589828759, 0.000776832903622089, 0.000672757029032358, 0.00221090520312706, 0.00201827108709707, 0.00180519653910857, 0.00156334606169177, 0.00127646671417816, -0.00212744452363025, -0.00194208225905521, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0679219441350651, -0.00435719474780696, -0.00308100195312468, 0.0705946233325039, -0.0328094160598287, -0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.0072909813466286, 0.0298267418725716, 0.0151249186789758, 0.0130985638061668, -0.0325436434202305, -0.0229226791726792, -0.024852777422719, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797018, 0.0, 0.0245778931055954, 0.0219831358911338, -0.0363511941282991, -0.0074316563322668, -0.0345935170706696, 0.0362025178646541, 0.0, 0.0130864298861876, 0.0335815079556711, -0.0232239260383337, 0.00166176887443654, -0.00359783515120076, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0226083734055987, -0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193682, 0.0, 0.0333014729371016, 0.0270779480866286, 0.00703505727761299, -0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0037734413408369, 0.00217859737390355, -0.0215670136718729, 0.0, 0.0984282481794862, -0.0312535720409329, -0.0852413633734344, -0.0180442582309701, 0.0309866707231717, 0.0, 0.0453747560369276, -0.0116431678277039, 0.0, 0.0236742424242424, -0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506555, 0.00394570707070709, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293083, -0.0603375297744236, 0.0, -0.039259289658563, 0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, -0.0555024548951693, 0.0, 0.0164151336477636, -0.00680782247561685, 0.0, 0.0427258096992147, 0.00694820471863017, -0.0108311792346515, -0.00393049813889261, 0.00607967912880133};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0301875307266957, 0.0610007264692972, -0.00308100195312469, 0.0, 0.0218729440398859, 0.0178591840233903, 0.0757701007763862, -0.0412440188136457, -0.00729098134662862, 0.0, 0.0, 0.0, 0.0520698294723689, -0.0127765752765753, 0.00184094647575698, -0.00901875901875902, 0.0286384062098028, -0.0297603864135752, 0.0142797017797017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0402250198496157, 0.014391340604803, -0.0137095932141014, 0.00407048581280861, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0370016365967795, -0.030086608985143, 0.014070114555226, -0.00340391123780845, 0.0, -0.0427258096992148, 0.0243187165152054, 0.0, -0.00982624534723142, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.021478804657352, 0.00377344134083693, -0.0196073763651314, 0.00924300585937423, 0.0, -0.0109364720199429, 0.102690308134494, 0.00947126259704826, -0.0695992817480272, -0.060150596109686, 0.0, -0.0050416395596586, 0.0465726713108155, 0.00650872868404612, 0.0214195526695527, -0.00782402252196702, -0.00450937950937954, -0.0289638426440052, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, -0.0431740218144091, -0.00249265331165473, -0.0605484764655282, 0.0, 0.0299118397398575, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, -0.0451299134777144, -0.0281402291104519, 0.023827378664659, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0150937653633478, 0.0130715842434209, 0.00924300585937413, 0.0, -0.0109364720199429, -0.0089295920116951, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, -0.00650872868404607, 0.0574945887445887, -0.0266937238984759, 0.00676406926406925, 0.0126920209338899, 0.00637722566005186, 0.000563672438672445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0431740218144092, 0.0199412264932383, -0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0451299134777144, -0.0375203054806026, 0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0301875307266956, 0.0174287789912279, 0.0585390371093694, 0.0, 0.0218729440398859, 0.0178591840233903, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, 0.00526094276094279, 0.0533874477969518, 0.0, -0.0045561100788323, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034897146363167, 0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0437736897273697, -0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0679219441350652, -0.00435719474780696, -0.00308100195312475, 0.0705946233325039, 0.0328094160598288, 0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.00729098134662861, -0.0298267418725716, 0.0151249186789759, 0.0130985638061669, 0.0325436434202305, 0.0229226791726792, 0.0248527774227189, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797017, 0.0, -0.0245778931055953, -0.0219831358911338, -0.036351194128299, -0.00743165633226676, -0.0345935170706695, -0.0362025178646541, 0.0, -0.0130864298861876, -0.0335815079556711, -0.0232239260383336, 0.00166176887443654, -0.00359783515120077, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, -0.0226083734055987, 0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193681, 0.0, -0.0333014729371016, -0.0270779480866286, -0.00703505727761297, 0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598856, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, -0.0037734413408369, 0.00217859737390357, -0.0215670136718729, 0.0, -0.0984282481794861, 0.0312535720409329, -0.0852413633734345, -0.0180442582309701, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0116431678277039, 0.0, -0.0236742424242424, 0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506539, 0.0039457070707071, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293081, 0.0603375297744236, 0.0, 0.0392592896585629, -0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, 0.0555024548951693, 0.0, -0.0164151336477637, 0.00680782247561685, 0.0, 0.0427258096992147, 0.0069482047186302, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, -0.0301875307266958, 0.0610007264692973, -0.00308100195312478, 0.0, -0.0218729440398858, -0.0178591840233903, 0.0757701007763862, -0.0412440188136456, -0.0072909813466286, 0.0, 0.0, 0.0, -0.0520698294723688, 0.0127765752765753, -0.00184094647575691, -0.00901875901875897, 0.0286384062098028, -0.0297603864135751, 0.0142797017797018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0402250198496157, -0.0143913406048031, 0.0137095932141013, -0.00407048581280864, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0370016365967796, 0.0300866089851429, -0.014070114555226, 0.00340391123780843, 0.0, -0.0427258096992147, 0.0243187165152053, 0.0, -0.00982624534723143, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573526, -0.00377344134083707, -0.0196073763651313, 0.00924300585937411, 0.0, 0.0109364720199428, -0.102690308134494, 0.00947126259704835, -0.0695992817480271, -0.0601505961096859, 0.0, -0.00504163955965866, 0.0465726713108155, -0.00650872868404609, -0.0214195526695527, 0.00782402252196703, -0.00450937950937956, -0.0289638426440051, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, 0.0431740218144092, 0.00249265331165475, 0.0605484764655282, 0.0, 0.0299118397398574, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, 0.0451299134777144, 0.0281402291104519, -0.0238273786646589, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573518, 0.0150937653633479, 0.013071584243421, 0.00924300585937412, 0.0, 0.0109364720199429, 0.00892959201169515, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, 0.0065087286840461, -0.0574945887445887, 0.0266937238984759, 0.00676406926406924, 0.0126920209338899, 0.0063772256600518, 0.000563672438672482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0431740218144092, -0.0199412264932383, 0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0451299134777144, 0.0375203054806026, -0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0301875307266957, 0.0174287789912278, 0.0585390371093694, 0.0, -0.0218729440398858, -0.0178591840233902, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, -0.00526094276094276, -0.0533874477969517, 0.0, -0.00455611007883227, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0348971463631671, -0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437736897273697, 0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0566435317214905, -0.00308100195312481, 0.0423567739995023, 0.0546823600997146, 0.0446479600584756, 0.0378850503881931, 0.0051555023517058, -0.00729098134662859, 0.0417574386216002, -0.00504163955965863, 0.0295930515620807, -0.0247331689993752, 0.0101461038961039, 0.0266937238984759, -0.0202922077922078, 0.00216957622801539, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, -0.0245778931055954, -0.00219831358911336, -0.00519302773261414, -0.0130053985814669, -0.0168945083368385, 0.00402250198496158, -0.0158304746652834, -0.026796023100289, -0.0295110221428625, 0.00464478520766674, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, -0.0226083734055987, -0.0367664434877216, 0.0, -0.0047768907440582, -0.00776832903622084, -0.00908221989193678, 0.0, 0.00370016365967797, 0.00601732179702859, 0.00703505727761299, 0.00680782247561684, 0.0, 0.00427258096992148, 0.0069482047186301, 0.00812338442598856, 0.00786099627778516, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0, -0.00435719474780698, -0.0215670136718729, -0.127070321998507, 0.0, 0.0, 0.0284137877911449, 0.03608851646194, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0422064833754265, 0.0, 0.0, 0.0, -0.0202922077922078, -0.00618329224984381, 0.00159430641501296, 0.00394570707070708, 0.0836061337380012, 0.0, 0.0, -0.0103860554652283, 0.024152883079867, 0.0434430214375849, 0.0, 0.0, 0.0, 0.0, 0.00464478520766673, -0.0108014976838374, -0.0194283098164842, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, 0.0769064574585865, 0.0, 0.0, 0.0, 0.0, -0.00955378148811642, -0.0155366580724417, -0.0181644397838736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00427258096992146, 0.00694820471863015, 0.00812338442598858, 0.00786099627778516, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 42:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083696, -0.0566435317214904, -0.00308100195312474, 0.0423567739995022, -0.0546823600997145, -0.0446479600584756, 0.037885050388193, 0.00515550235170577, -0.00729098134662853, -0.0417574386216002, -0.00504163955965862, 0.0295930515620806, 0.0247331689993752, -0.0101461038961039, -0.0266937238984759, -0.0202922077922078, 0.00216957622801538, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, 0.0245778931055953, 0.00219831358911338, -0.00519302773261413, -0.0130053985814669, -0.0168945083368386, -0.00402250198496156, 0.0158304746652834, 0.026796023100289, 0.0295110221428625, 0.00464478520766678, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, 0.0226083734055987, 0.0367664434877216, 0.0, -0.00477689074405818, -0.00776832903622087, -0.0090822198919368, 0.0, -0.00370016365967795, -0.00601732179702859, -0.00703505727761298, -0.00680782247561684, 0.0, 0.00427258096992151, 0.00694820471863008, 0.00812338442598856, 0.00786099627778518, 0.00607967912880136};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 43:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, -0.0188672067041848, 0.00653579212171038, 0.0092430058593742, 0.0141189246665007, 0.0, -0.111619900146189, -0.0031570875323494, -0.0541327746929101, -0.060150596109686, -0.00894802256177143, -0.0025208197798293, -0.0276525235907967, 0.000650872868404634, 0.0360750360750361, -0.0188697013765088, 0.00112734487734487, 0.0374251899332651, 0.0199288301876619, 0.000563672438672437, 0.0, 0.0, 0.0593544669060615, 0.0, 0.0167212267476002, 0.0032180015879692, 0.0, -0.0043174021814409, 0.0224338798048931, 0.0463017761206981, 0.0, -0.00747795993496438, 0.018708742786244, 0.043183015465546, 0.0461140862656136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0620433733855302, 0.0, 0.0, 0.0174787403314969, 0.0363288795677471, 0.0, 0.0, -0.00451299134777145, -0.00938007637015062, -0.0119136893323295, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 44:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573519, 0.0188672067041847, 0.00653579212171046, 0.00924300585937428, 0.0141189246665008, 0.0, 0.111619900146189, -0.00315708753234942, -0.0541327746929101, -0.0601505961096861, 0.00894802256177154, -0.00252081977982933, -0.0276525235907967, -0.000650872868404596, -0.0360750360750361, 0.0188697013765088, 0.00112734487734489, 0.0374251899332651, 0.019928830187662, 0.000563672438672452, 0.0, 0.0, -0.0593544669060614, 0.0, 0.0167212267476002, 0.00321800158796926, 0.0, 0.00431740218144093, -0.0224338798048931, -0.0463017761206981, 0.0, -0.00747795993496437, 0.018708742786244, 0.0431830154655461, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0620433733855302, 0.0, 0.0, 0.017478740331497, 0.0363288795677472, 0.0, 0.0, 0.00451299134777144, 0.00938007637015066, 0.0119136893323295, 0.0, 0.0, -0.00781673030845888, -0.0162467688519772, -0.0206351152291861, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 45:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, 0.0, -0.0348575579824556, 0.0585390371093695, -0.0282378493330015, 0.0, 0.0, 0.00631417506469884, -0.0206220094068228, 0.083846285486229, 0.0, 0.0, -0.00679184789949389, 0.0, 0.0, 0.0, 0.0, 0.00151870335961078, -0.0616465147138344, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0450520222315696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0100739384233621, -0.0329013451166065, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0565115904387178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 46:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0217859737390348, -0.0523770332031201, 0.0423567739995024, 0.0546823600997146, 0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, 0.0417574386216002, 0.0285692908380655, -0.00921750786359888, 0.0273366604729936, -0.00789141414141414, -0.0248527774227189, 0.0187890812890813, -0.00347132196482459, -0.0143487577351167, -0.015031265031265, -0.0557374224920008, -0.00491557862111906, -0.0241814494802473, -0.0197335053839337, -0.00928957041533348, -0.00241350119097693, -0.0394205194526234, -0.0158304746652834, -0.000623163327913708, 0.00712335017241507, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957583, 0.00540074884191869, 0.0, -0.0510586685671264, 0.00466099742173249, -0.0405265617908061, -0.0143871467126537, 0.00367664434877214, -0.0114170653756726, -0.00564541633388697, -0.00155366580724415, 0.00100913554354854, 0.010317557614593, 0.00571843474677502, 0.00240692871881142, 0.000260557676948618, -0.000850977809452114, 0.0127646671417816, 0.00737991258440983, 0.00347410235931509, 0.000902598269554292, -0.00049131226736157, -0.000868525589828748};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 47:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, 0.0, -0.0217859737390347, 0.00308100195312484, -0.127070321998507, 0.0, 0.0, 0.0473563129852413, 0.0257775117585285, 0.0127592173566001, 0.0, -0.0352914769176103, 0.0509388592462045, 0.0, 0.0, 0.0, 0.00225468975468975, -0.00943765659186684, -0.0143487577351166, -0.0129644660894661, 0.0836061337380012, 0.0, 0.0, 0.0477758551400501, 0.00928957041533348, -0.0144810071458617, 0.0, 0.0, 0.0, 0.0, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957584, 0.00540074884191876, 0.0, 0.0765880028506896, -0.00699149613259875, 0.0, 0.0, 0.0, -0.0228341307513453, -0.011290832667774, -0.00310733161448838, 0.00201827108709704, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, 0.00737991258440981, 0.00347410235931506, 0.000902598269554269, -0.000491312267361589, -0.000868525589828803};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 48:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083695, -0.0217859737390348, -0.0523770332031201, 0.0423567739995023, -0.0546823600997146, -0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, -0.0417574386216002, 0.0285692908380655, -0.00921750786359893, -0.0273366604729936, 0.00789141414141414, 0.0248527774227189, 0.0187890812890813, -0.00347132196482458, -0.0143487577351166, -0.015031265031265, -0.0557374224920008, 0.00491557862111907, 0.0241814494802472, -0.0197335053839337, -0.00928957041533349, -0.00241350119097694, 0.0394205194526234, 0.0158304746652834, 0.000623163327913706, -0.00712335017241508, -0.0325134964536671, -0.0141250354327105, -0.00215870109072045, 0.00411266813957581, 0.00540074884191868, 0.0, -0.0510586685671264, 0.0046609974217325, 0.0405265617908061, 0.0143871467126537, -0.00367664434877216, -0.0114170653756727, -0.00564541633388695, -0.00155366580724416, 0.00100913554354855, -0.010317557614593, -0.00571843474677502, -0.00240692871881143, -0.000260557676948629, 0.000850977809452107, 0.0127646671417816, 0.00737991258440984, 0.00347410235931506, 0.000902598269554289, -0.000491312267361559, -0.000868525589828739};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 49:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0188672067041847, 0.0108929868695175, 0.00308100195312472, 0.0141189246665008, -0.109364720199429, 0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, -0.00894802256177148, -0.0277290175781224, 0.00145539597846298, -0.00585785581564149, 0.0383297258297258, -0.0124263887113595, 0.0191648629148628, 0.0348216984596467, 0.00717437886755836, -0.0129644660894661, 0.0, 0.0589869434534289, -0.00659494076734012, 0.00727023882565974, 0.0148633126645335, -0.0040225019849616, 0.0506835250105158, -0.00431740218144091, -0.00810112326287806, 0.00356167508620759, 0.0650269929073342, -0.00166176887443651, -0.0115130724838425, -0.00205633406978793, 0.00540074884191875, 0.0, 0.0, 0.0, 0.0607898426862092, -0.0123318400394175, 0.0013787416307896, 0.0399597288148543, 0.00303983956440066, -0.00427258096992151, 0.00100913554354852, -0.0154763364218895, -0.00302740663064561, 0.000902598269554317, 0.000781673030845898, -0.000425488904726052, -0.031911667854454, -0.00776832903622089, 0.000868525589828735, 0.00180519653910857, 0.000245656133680779, -0.000868525589828785};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 50:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, 0.0188672067041847, 0.0108929868695173, 0.00308100195312461, 0.0141189246665007, 0.109364720199429, -0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, 0.00894802256177146, -0.0277290175781224, 0.00145539597846298, 0.00585785581564147, -0.0383297258297259, 0.0124263887113595, 0.0191648629148629, 0.0348216984596467, 0.00717437886755832, -0.0129644660894661, 0.0, -0.0589869434534289, 0.00659494076734013, 0.00727023882565983, 0.0148633126645336, -0.00402250198496153, -0.0506835250105158, 0.00431740218144093, 0.00810112326287806, -0.00356167508620756, 0.0650269929073343, -0.00166176887443652, -0.0115130724838424, -0.00205633406978791, 0.00540074884191871, 0.0, 0.0, 0.0, -0.0607898426862092, 0.0123318400394175, -0.00137874163078959, 0.0399597288148543, 0.00303983956440068, -0.00427258096992146, 0.00100913554354852, 0.0154763364218896, 0.00302740663064561, -0.000902598269554309, -0.000781673030845882, 0.000425488904726061, -0.031911667854454, -0.00776832903622087, 0.000868525589828761, 0.00180519653910858, 0.000245656133680792, -0.000868525589828766};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 51:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.078755617076958, 0.0, 0.0435719474780694, -0.0523770332031201, -0.0282378493330015, 0.0, 0.0, 0.0631417506469885, -0.0515550235170571, 0.0291639253865144, 0.0, -0.00672218607954477, 0.000970263985642002, 0.0, 0.0, 0.0, -0.0601250601250601, -0.0125835421224891, 0.0286975154702333, -0.015031265031265, 0.0, 0.0, 0.0, -0.0436214329539588, 0.0111474844984002, -0.00160900079398465, 0.0, 0.0, 0.0, 0.0, -0.0650269929073343, 0.031573608614294, -0.00287826812096059, -0.00822533627915167, 0.00540074884191872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0532796384198057, 0.018239037386404, -0.00466099742173253, 0.000672757029032364, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425488904726053, -0.00388416451811041, -0.00347410235931508, 0.00120346435940574, 0.000982624534723167, -0.000868525589828753};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 52:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, -0.188672067041848, -0.108929868695174, -0.0770250488281178, -0.0705946233325038, -0.0546823600997147, -0.0446479600584758, -0.0315708753234942, -0.0257775117585285, -0.0182274533665715, 0.0894802256177148, -0.0151249186789758, -0.0130985638061669, 0.0585785581564149, -0.028183621933622, 0.0690354928408859, 0.0744047619047619, 0.00976309302606916, 0.039857660375324, 0.0597492784992785, 0.0, 0.0737336793167861, 0.0659494076734016, 0.036351194128299, 0.00743165633226677, 0.0345935170706695, -0.0120675059548847, 0.0431740218144092, 0.0155790831978424, -0.0254405363300539, -0.0232239260383337, 0.0465295284842228, 0.0251848460584054, -0.0146881004984851, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, 0.0678251202167962, -0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.00908221989193679, 0.0, -0.0111004909790339, -0.00902598269554285, -0.00234501909253765, 0.0034039112378084, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 53:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.188672067041848, -0.108929868695174, -0.0770250488281179, -0.0705946233325039, 0.0546823600997147, 0.0446479600584757, -0.0315708753234942, -0.0257775117585286, -0.0182274533665715, -0.0894802256177148, -0.0151249186789759, -0.0130985638061668, -0.0585785581564149, 0.028183621933622, -0.0690354928408859, 0.0744047619047619, 0.00976309302606915, 0.039857660375324, 0.0597492784992785, 0.0, -0.0737336793167861, -0.0659494076734016, 0.036351194128299, 0.00743165633226679, 0.0345935170706696, 0.0120675059548846, -0.0431740218144092, -0.0155790831978425, 0.0254405363300538, -0.0232239260383337, 0.0465295284842228, 0.0251848460584053, -0.014688100498485, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, -0.0678251202167962, 0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.0090822198919368, 0.0, 0.0111004909790338, 0.00902598269554286, 0.00234501909253764, -0.00340391123780842, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598857, 0.00196524906944628, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 54:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.217859737390348, -0.0770250488281177, 0.0, 0.0, 0.0, -0.0947126259704828, 0.0515550235170571, -0.0182274533665715, 0.0, -0.0907495120738552, 0.0232863356554078, 0.0, 0.0, 0.0, -0.0946969696969697, -0.0227805503941613, -0.079715320750648, 0.0597492784992784, 0.0, 0.0, 0.0, -0.0727023882565981, -0.0483057661597341, 0.0144810071458617, 0.0, 0.0, 0.0, 0.0, 0.0464478520766673, -0.0781031370985168, 0.0431740218144092, 0.0293762009969702, -0.0328199352701214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0668764704168148, 0.0310733161448835, -0.00605481326129118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0427258096992147, 0.00694820471863014, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 55:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.0, 0.231075146484353, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109364720199429, 0.0, 0.0100832791193172, -0.093145342621631, 0.0, 0.0, 0.0, -0.00450937950937958, -0.104139658944738, 0.0, -0.0924422799422799, 0.0, 0.0, 0.0, 0.0, -0.066884906990401, -0.0579240285834466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.0647610327216138, 0.0, 0.0835038859404355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0699149613259878, 0.0242192530451648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338355, 0.0270779480866287, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 56:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923505, 0.00609788120679253, 0.00352061335622801, 0.00248944957812478, 0.00705946233325035, 0.00546823600997146, 0.0044647960058476, 0.0031570875323494, 0.00257775117585286, 0.00182274533665715, -0.00298267418725715, -0.00252081977982932, -0.00218309396769448, -0.00195261860521384, -0.00169101731601733, -0.00138070985681772, -0.0011273448773449, -0.00097630930260694, -0.000797153207506489, -0.000563672438672444, 0.00278687112460006, 0.00245778931055954, 0.00219831358911339, 0.00207721109304566, 0.00185791408306669, 0.00160900079398463, 0.00160900079398464, 0.00143913406048031, 0.00124632665582739, 0.00101762145320215, 0.000928957041533368, 0.000830884437218251, 0.000719567030240159, 0.000587524019939407, 0.000415442218609133, -0.00705593524717798, -0.00638233357089079, -0.00582624677716565, -0.00562868913761196, -0.00513826668309062, -0.00459580543596521, -0.00475711057319694, -0.00434262794914382, -0.00388416451811044, -0.00336378514516178, -0.00368484200521178, -0.00336378514516176, -0.00300866089851429, -0.00260557676948629, -0.00212744452363027, -0.00212744452363026, -0.00194208225905519, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 57:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923493, -0.00609788120679249, 0.00352061335622803, 0.00248944957812476, 0.0070594623332504, -0.00546823600997144, -0.00446479600584757, 0.00315708753234942, 0.00257775117585287, 0.00182274533665715, 0.00298267418725716, -0.00252081977982929, -0.00218309396769448, 0.00195261860521383, 0.00169101731601732, 0.00138070985681771, -0.00112734487734489, -0.000976309302606925, -0.000797153207506475, -0.000563672438672438, 0.00278687112460003, -0.00245778931055953, -0.0021983135891134, 0.00207721109304565, 0.00185791408306669, 0.00160900079398462, -0.00160900079398462, -0.0014391340604803, -0.0012463266558274, -0.00101762145320215, 0.000928957041533351, 0.000830884437218258, 0.000719567030240152, 0.000587524019939402, 0.000415442218609129, 0.00705593524717798, -0.00638233357089081, -0.00582624677716566, 0.00562868913761197, 0.00513826668309062, 0.0045958054359652, -0.00475711057319694, -0.00434262794914383, -0.00388416451811044, -0.00336378514516178, 0.00368484200521179, 0.00336378514516178, 0.0030086608985143, 0.0026055767694863, 0.00212744452363027, -0.00212744452363027, -0.00194208225905521, -0.00173705117965753, -0.00150433044925715, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 58:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923494, 0.0, -0.00704122671245613, 0.00248944957812474, 0.0, 0.0, 0.0, 0.0094712625970483, -0.00515550235170573, 0.00182274533665714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0045093795093795, -0.00292892790782074, 0.00159430641501297, -0.000563672438672427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00464478520766671, -0.00332353774887303, 0.00215870109072045, -0.0011750480398788, 0.000415442218609134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, -0.0097104112952761, 0.00694820471863011, -0.00451299134777143, 0.00245656133680785, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 59:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923491, 0.0, 0.0, -0.00746834873437434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0109364720199429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00563672438672436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00623163327913695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 60:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0, 0.03747187483114, -0.0289614183593723, 0.0, 0.0, 0.0, 0.0284137877911448, 0.00515550235170568, -0.00619733414463431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0315656565656565, -0.0113902751970807, 0.0026571773583549, -0.000187890812890804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0232239260383337, -0.00166176887443655, -0.00647610327216137, 0.00646276421933346, -0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0213629048496074, -0.0277928188745204, 0.0243701532779658, -0.0157219925555703, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 61:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.0, -0.0287574853355261, 0.05360943398437, 0.0, 0.0, 0.0, -0.0189425251940965, 0.0154665070551172, 0.0153110608279201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00450937950937951, 0.0370997534990628, -0.0281660799985623, 0.0108976671476671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.00431740218144093, -0.0123380044187275, 0.00872428659079177, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338356, -0.0487403065559316, 0.041270230458372, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 62:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0, 0.0409576306293853, -0.0449826285156207, 0.0, 0.0, 0.0, 0.0189425251940965, -0.0051555023517058, -0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00455611007883225, 0.0356061766019561, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302218152700864, 0.00411266813957586, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0379091273212801, -0.0550269739444961, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 63:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0, -0.0148144621425436, 0.0449826285156208, 0.0, 0.0, 0.0, 0.0, 0.0206220094068229, 0.021143845905223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0106287094334197, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020563340697879, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03439185871531, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 64:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0187359374155699, -0.0289614183593723, 0.0211783869997511, -0.0164047080299144, 0.00446479600584752, 0.00947126259704829, -0.00257775117585286, -0.00619733414463432, 0.0208787193108001, -0.0176457384588052, -0.00848980987436738, 0.0136683302364968, 0.00657617845117846, 0.00230118309469618, -0.00789141414141413, -0.0037967583990269, -0.00132858867917748, -0.0001878908128908, 0.0139343556230002, -0.0122889465527977, -0.00109915679455667, 0.0103860554652283, 0.000928957041533345, -0.00482700238195389, -0.00804500396992315, -0.000719567030240148, 0.0037389799674822, 0.00559691799261188, 0.00464478520766673, 0.000415442218609139, -0.00215870109072047, -0.0032313821096667, -0.00290809553026391, 0.0, 0.0, 0.0128177429097644, 0.0, -0.0113041867027994, -0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, -0.00740032731935591, -0.0120346435940572, -0.014070114555226, -0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863013, 0.00812338442598859, 0.00786099627778514, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 65:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734316, -0.0249047128495238, 0.014378742667763, 0.0536094339843698, -0.0141189246665007, 0.0109364720199429, 0.0133943880175427, -0.00631417506469885, -0.00773325352755854, 0.0153110608279201, -0.00298267418725716, 0.00252081977982933, 0.0276525235907967, -0.00195261860521385, -0.0214195526695527, -0.0243925408037797, 0.00112734487734488, 0.0123665844996876, 0.0140830399992812, 0.0108976671476671, 0.0, 0.0, 0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796927, 0.0, 0.0129522065443227, 0.00249265331165477, -0.0106850252586226, 0.0, -0.00747795993496439, -0.00143913406048031, 0.00616900220936372, 0.00872428659079175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, 0.0135389740433143, 0.0281402291104519, 0.0357410679969885, 0.0, 0.0, -0.00781673030845889, -0.0162467688519772, -0.020635115229186, -0.018239037386404};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 66:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0204788153146928, -0.0449826285156207, 0.0141189246665008, -0.0109364720199429, -0.00446479600584748, 0.00631417506469886, 0.00257775117585284, -0.021143845905223, 0.0, 0.0, 0.00339592394974695, 0.0, -0.00263047138047139, 0.0308358534689291, 0.0, 0.00151870335961076, -0.017803088300978, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, -0.0174485731815836, 0.00356167508620753, 0.0, 0.0, 0.0100739384233621, -0.00205633406978791, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, -0.0218868448636848, -0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 67:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.00740723107127185, 0.0449826285156207, 0.0, 0.0, 0.0178591840233903, 0.0, -0.0103110047034114, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00920473237878477, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489396, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0297842233308238, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 68:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0335503995581136, -0.00801060507812418, 0.0211783869997512, 0.00109364720199429, -0.0169662248222207, -0.00568275755822894, 0.00567105258687627, 0.00838462854862288, 0.0208787193108001, -0.0109235523792603, -0.0162519217595033, 0.00499002532443536, 0.00958243145743147, 0.0108922666482287, -0.00187890812890812, -0.00466458889023306, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, -0.00245778931055953, -0.0120907247401236, -0.00415442218609133, 0.00464478520766674, 0.00965400476390776, 0.00643600317593851, -0.000719567030240141, -0.00498530662330958, -0.006614539445814, -0.00464478520766674, -0.000415442218609131, 0.00215870109072044, 0.00323138210966672, 0.00290809553026393, 0.0, 0.0127646671417816, -0.00116524935543313, -0.0202632808954031, -0.00719357335632686, 0.00183832217438609, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, -0.020635115229186, -0.01143686949355, -0.00481385743762287, -0.000521115353897263, 0.00170195561890421, 0.0127646671417816, 0.00737991258440982, 0.00347410235931507, 0.00090259826955429, -0.000491312267361578, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 69:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, -0.0249047128495238, 0.0553363732971482, -0.00431340273437461, -0.0141189246665008, 0.0153110608279201, 0.00803663281052558, 0.00883984509057838, -0.0159820572902877, 0.000729098134662845, -0.00298267418725716, 0.0277290175781224, -0.00145539597846296, -0.0301571095694136, -0.0116492303992304, 0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917747, -0.00263047138047138, 0.0, 0.0196623144844763, -0.00219831358911338, -0.00727023882565981, -0.0148633126645336, 0.00402250198496157, -0.00724050357293084, 0.0129522065443227, 0.00685479660705067, -0.00457929653940971, 0.00928957041533346, -0.00664707549774609, -0.0057565362419212, -0.00029376200996971, 0.00290809553026395, 0.0, 0.0, 0.0, 0.0202632808954031, -0.00411061334647249, 0.000459580543596519, -0.0399597288148543, -0.00303983956440069, 0.00427258096992149, -0.00100913554354853, 0.0464290092656685, 0.00908221989193678, -0.00270779480866285, -0.00234501909253766, 0.00127646671417817, -0.031911667854454, -0.00776832903622087, 0.000868525589828756, 0.00180519653910858, 0.000245656133680792, -0.000868525589828773};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 70:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0492363006502187, -0.00431340273437462, 0.0141189246665007, -0.00656188321196576, -0.00982255121286465, -0.016416855168217, 0.0149509568199466, 0.00072909813466287, 0.0, 0.0033610930397724, -0.00048513199282101, 0.0282044909641998, -0.0124007936507936, 0.00291483191994851, -0.0353234728234728, 0.00889526253486301, 0.00239145962251945, -0.00263047138047138, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920009, 0.00080450039699231, -0.00402250198496154, -0.014391340604803, 0.00934744991870548, -0.00254405363300537, -0.0092895704153335, 0.0141250354327105, -0.00287826812096064, -0.00381890612960613, 0.00290809553026391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516179, -0.0515877880729651, 0.00840946286290446, 0.00300866089851429, -0.00286613444643492, 0.000850977809452107, 0.0425488904726053, -0.00388416451811045, -0.00347410235931507, 0.00120346435940572, 0.000982624534723146, -0.000868525589828758};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 71:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.0448791059024117, -0.00801060507812427, 0.0, 0.0174983552319086, -0.00357183680467801, 0.0132597676358676, -0.0175287079957995, 0.00838462854862288, 0.0, 0.0, 0.0, 0.00867830491206147, -0.00300625300625301, 0.000613648825252317, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0160900079398463, -0.00719567030240153, 0.0024926533116548, -0.000508810726601086, 0.00464478520766675, -0.0108014976838374, 0.0107935054536023, -0.00734405024924252, 0.00290809553026394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0257938940364826, -0.0134551405806471, 0.00601732179702859, -0.00208446141558904, 0.000425488904726059, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554292, 0.0017195929357655, -0.000868525589828772};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 72:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734313, -0.0324515955311979, -0.0187359374155699, -0.0289614183593722, 0.0211783869997511, 0.0164047080299144, -0.00446479600584756, 0.00947126259704828, -0.00257775117585285, -0.00619733414463429, -0.0208787193108001, -0.0176457384588052, -0.00848980987436741, -0.0136683302364968, -0.00657617845117842, -0.00230118309469618, -0.00789141414141414, -0.00379675839902689, -0.00132858867917748, -0.000187890812890818, 0.0139343556230002, 0.0122889465527977, 0.00109915679455668, 0.0103860554652283, 0.000928957041533349, -0.0048270023819539, 0.00804500396992312, 0.00071956703024016, -0.0037389799674822, -0.00559691799261187, 0.00464478520766674, 0.000415442218609132, -0.00215870109072046, -0.00323138210966673, -0.00290809553026393, 0.0, 0.0, 0.0128177429097644, 0.0, 0.0113041867027994, 0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, 0.00740032731935588, 0.0120346435940572, 0.014070114555226, 0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863012, 0.00812338442598859, 0.00786099627778515, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 73:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.024904712849524, 0.014378742667763, 0.0536094339843699, -0.0141189246665008, -0.0109364720199429, -0.0133943880175426, -0.00631417506469884, -0.00773325352755861, 0.0153110608279199, 0.00298267418725715, 0.0025208197798293, 0.0276525235907967, 0.00195261860521382, 0.0214195526695527, 0.0243925408037797, 0.00112734487734485, 0.0123665844996876, 0.0140830399992811, 0.0108976671476671, 0.0, 0.0, -0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796923, 0.0, -0.0129522065443228, -0.00249265331165476, 0.0106850252586226, 0.0, -0.00747795993496438, -0.0014391340604803, 0.00616900220936375, 0.00872428659079182, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, -0.0135389740433143, -0.0281402291104519, -0.0357410679969884, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 74:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734313, -0.0354703486038674, -0.0204788153146928, -0.0449826285156206, 0.0141189246665007, 0.0109364720199429, 0.00446479600584753, 0.00631417506469885, 0.00257775117585285, -0.0211438459052229, 0.0, 0.0, 0.00339592394974695, 0.0, 0.00263047138047134, -0.0308358534689291, 0.0, 0.00151870335961077, -0.0178030883009781, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, 0.0174485731815835, -0.00356167508620756, 0.0, 0.0, 0.0100739384233621, -0.00205633406978792, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, 0.0218868448636848, 0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 75:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0128297005588457, 0.00740723107127183, 0.0449826285156208, 0.0, 0.0, -0.0178591840233903, 0.0, -0.0103110047034115, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00920473237878482, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489395, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0297842233308237, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 76:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734305, -0.0324515955311978, -0.0335503995581136, -0.00801060507812423, 0.0211783869997512, -0.00109364720199431, 0.0169662248222208, -0.00568275755822893, 0.00567105258687627, 0.00838462854862291, -0.0208787193108001, -0.0109235523792603, -0.0162519217595033, -0.00499002532443534, -0.00958243145743147, -0.0108922666482287, -0.00187890812890815, -0.00466458889023305, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, 0.00245778931055952, 0.0120907247401236, -0.00415442218609134, 0.00464478520766673, 0.00965400476390777, -0.00643600317593851, 0.000719567030240148, 0.00498530662330958, 0.00661453944581401, -0.00464478520766677, -0.000415442218609124, 0.00215870109072045, 0.00323138210966672, 0.00290809553026392, 0.0, 0.0127646671417816, -0.00116524935543312, 0.0202632808954031, 0.00719357335632687, -0.00183832217438607, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, 0.020635115229186, 0.0114368694935501, 0.00481385743762287, 0.000521115353897252, -0.00170195561890421, 0.0127646671417816, 0.00737991258440981, 0.00347410235931507, 0.000902598269554277, -0.000491312267361576, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 77:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734306, 0.0249047128495239, 0.0553363732971483, -0.00431340273437459, -0.0141189246665007, -0.0153110608279201, -0.00803663281052554, 0.00883984509057833, -0.0159820572902877, 0.000729098134662816, 0.00298267418725714, 0.0277290175781224, -0.00145539597846298, 0.0301571095694136, 0.0116492303992305, -0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917748, -0.00263047138047135, 0.0, -0.0196623144844763, 0.00219831358911337, -0.00727023882565974, -0.0148633126645335, 0.00402250198496158, 0.00724050357293086, -0.0129522065443227, -0.00685479660705068, 0.0045792965394097, 0.00928957041533352, -0.0066470754977461, -0.00575653624192119, -0.000293762009969713, 0.00290809553026392, 0.0, 0.0, 0.0, -0.0202632808954031, 0.00411061334647248, -0.00045958054359652, -0.0399597288148542, -0.00303983956440067, 0.00427258096992148, -0.00100913554354853, -0.0464290092656685, -0.00908221989193682, 0.00270779480866286, 0.00234501909253766, -0.00127646671417816, -0.031911667854454, -0.00776832903622085, 0.000868525589828734, 0.00180519653910859, 0.000245656133680784, -0.000868525589828764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 78:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734315, -0.0354703486038674, -0.0492363006502185, -0.00431340273437457, 0.0141189246665008, 0.00656188321196575, 0.00982255121286466, -0.016416855168217, 0.0149509568199466, 0.000729098134662867, 0.0, 0.00336109303977241, -0.000485131992820998, -0.0282044909641998, 0.0124007936507937, -0.00291483191994851, -0.0353234728234728, 0.008895262534863, 0.00239145962251945, -0.0026304713804714, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920008, 0.000804500396992312, 0.00402250198496156, 0.0143913406048031, -0.00934744991870546, 0.00254405363300538, -0.00928957041533351, 0.0141250354327105, -0.00287826812096063, -0.00381890612960613, 0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516176, 0.0515877880729651, -0.00840946286290444, -0.00300866089851428, 0.00286613444643492, -0.000850977809452105, 0.0425488904726053, -0.00388416451811045, -0.00347410235931505, 0.00120346435940571, 0.000982624534723157, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 79:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0128297005588457, 0.0448791059024117, -0.00801060507812429, 0.0, -0.0174983552319087, 0.00357183680467806, 0.0132597676358676, -0.0175287079957995, 0.00838462854862292, 0.0, 0.0, 0.0, -0.00867830491206146, 0.00300625300625302, -0.000613648825252329, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0160900079398463, 0.00719567030240154, -0.00249265331165478, 0.000508810726601091, 0.00464478520766676, -0.0108014976838374, 0.0107935054536023, -0.00734405024924251, 0.00290809553026393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0257938940364825, 0.0134551405806471, -0.00601732179702859, 0.00208446141558904, -0.000425488904726056, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554288, 0.00171959293576549, -0.000868525589828771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 80:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0452812960900435, -0.0113287063442981, -0.00801060507812424, -0.00141189246665005, 0.0164047080299144, 0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862293, -0.00894802256177147, -0.0142846454190327, -0.0123708658169354, -0.014536160727703, -0.0125886844636845, -0.0102786178229764, -0.00939454064454065, -0.00813591085505764, -0.00664294339588734, -0.00469727032227033, -0.00836061337380014, 0.00245778931055955, 0.00219831358911339, 0.00830884437218263, 0.00743165633226679, 0.0064360031759385, 0.00965400476390778, 0.00863480436288184, 0.00747795993496438, 0.00610572871921294, 0.00650269929073342, 0.00581619106052785, 0.00503696921168106, 0.00411266813957582, 0.00290809553026391, 0.0352796762358899, 0.0191470007126724, 0.0174787403314969, 0.00788016479265675, 0.00719357335632689, 0.00643412761035129, 0.000951422114639382, 0.000868525589828755, 0.000776832903622076, 0.000672757029032345, -0.00221090520312707, -0.00201827108709705, -0.00180519653910857, -0.00156334606169177, -0.00127646671417816, -0.00212744452363026, -0.00194208225905521, -0.00173705117965752, -0.00150433044925715, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 81:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0603750614533913, -0.00610007264692978, -0.00431340273437464, -0.00564756986660042, -0.0218729440398858, -0.0178591840233902, 0.00126283501293976, 0.00103110047034114, 0.000729098134662865, 0.0417574386216002, 0.016805465198862, 0.0145539597846298, -0.000867830491206139, -0.000751563251563246, -0.00061364882525229, -0.00526094276094275, -0.00455611007883229, -0.00372004830169691, -0.00263047138047138, 0.00557374224920013, -0.0196623144844763, -0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992314, 0.00321800158796925, 0.00287826812096061, 0.00249265331165479, 0.00203524290640428, 0.00650269929073342, 0.00581619106052785, 0.00503696921168108, 0.00411266813957583, 0.00290809553026394, -0.0705593524717798, -0.0127646671417816, -0.0116524935543313, 0.00450295131008955, 0.00411061334647247, 0.00367664434877213, 0.00380568845855755, 0.00347410235931508, 0.00310733161448836, 0.00269102811612943, -0.000736968401042361, -0.000672757029032367, -0.000601732179702866, -0.000521115353897261, -0.000425488904726046, -0.00212744452363026, -0.00194208225905521, -0.00173705117965753, -0.00150433044925714, -0.00122828066840394, -0.000868525589828775};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 82:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, -0.0603750614533913, -0.00610007264692978, -0.00431340273437461, -0.00564756986660028, 0.0218729440398858, 0.0178591840233902, 0.00126283501293978, 0.00103110047034114, 0.00072909813466285, -0.0417574386216002, 0.016805465198862, 0.0145539597846299, 0.00086783049120613, 0.000751563251563235, 0.000613648825252307, -0.00526094276094275, -0.00455611007883227, -0.0037200483016969, -0.00263047138047138, 0.00557374224920005, 0.0196623144844763, 0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992316, -0.00321800158796927, -0.00287826812096063, -0.0024926533116548, -0.00203524290640429, 0.00650269929073343, 0.00581619106052785, 0.00503696921168108, 0.00411266813957581, 0.00290809553026392, 0.0705593524717798, -0.0127646671417816, -0.0116524935543313, -0.00450295131008957, -0.00411061334647248, -0.00367664434877215, 0.00380568845855754, 0.00347410235931504, 0.00310733161448834, 0.00269102811612942, 0.000736968401042368, 0.000672757029032363, 0.000601732179702872, 0.000521115353897267, 0.000425488904726048, -0.00212744452363027, -0.00194208225905522, -0.00173705117965754, -0.00150433044925714, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 83:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0452812960900436, -0.0113287063442981, -0.00801060507812426, -0.00141189246665009, -0.0164047080299144, -0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862292, 0.00894802256177149, -0.0142846454190328, -0.0123708658169354, 0.014536160727703, 0.0125886844636845, 0.0102786178229763, -0.00939454064454066, -0.00813591085505763, -0.00664294339588734, -0.00469727032227034, -0.0083606133738001, -0.00245778931055954, -0.0021983135891134, 0.00830884437218264, 0.00743165633226679, 0.00643600317593851, -0.00965400476390776, -0.00863480436288183, -0.00747795993496437, -0.00610572871921293, 0.00650269929073342, 0.00581619106052784, 0.00503696921168106, 0.00411266813957582, 0.00290809553026394, -0.0352796762358899, 0.0191470007126724, 0.017478740331497, -0.00788016479265674, -0.00719357335632688, -0.00643412761035128, 0.000951422114639399, 0.000868525589828759, 0.000776832903622089, 0.000672757029032358, 0.00221090520312706, 0.00201827108709707, 0.00180519653910857, 0.00156334606169177, 0.00127646671417816, -0.00212744452363025, -0.00194208225905521, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 84:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0679219441350651, -0.00435719474780696, -0.00308100195312468, 0.0705946233325039, -0.0328094160598287, -0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.0072909813466286, 0.0298267418725716, 0.0151249186789758, 0.0130985638061668, -0.0325436434202305, -0.0229226791726792, -0.024852777422719, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797018, 0.0, 0.0245778931055954, 0.0219831358911338, -0.0363511941282991, -0.0074316563322668, -0.0345935170706696, 0.0362025178646541, 0.0, 0.0130864298861876, 0.0335815079556711, -0.0232239260383337, 0.00166176887443654, -0.00359783515120076, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0226083734055987, -0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193682, 0.0, 0.0333014729371016, 0.0270779480866286, 0.00703505727761299, -0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 85:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0037734413408369, 0.00217859737390355, -0.0215670136718729, 0.0, 0.0984282481794862, -0.0312535720409329, -0.0852413633734344, -0.0180442582309701, 0.0309866707231717, 0.0, 0.0453747560369276, -0.0116431678277039, 0.0, 0.0236742424242424, -0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506555, 0.00394570707070709, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293083, -0.0603375297744236, 0.0, -0.039259289658563, 0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, -0.0555024548951693, 0.0, 0.0164151336477636, -0.00680782247561685, 0.0, 0.0427258096992147, 0.00694820471863017, -0.0108311792346515, -0.00393049813889261, 0.00607967912880133};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 86:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0301875307266957, 0.0610007264692972, -0.00308100195312469, 0.0, 0.0218729440398859, 0.0178591840233903, 0.0757701007763862, -0.0412440188136457, -0.00729098134662862, 0.0, 0.0, 0.0, 0.0520698294723689, -0.0127765752765753, 0.00184094647575698, -0.00901875901875902, 0.0286384062098028, -0.0297603864135752, 0.0142797017797017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0402250198496157, 0.014391340604803, -0.0137095932141014, 0.00407048581280861, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0370016365967795, -0.030086608985143, 0.014070114555226, -0.00340391123780845, 0.0, -0.0427258096992148, 0.0243187165152054, 0.0, -0.00982624534723142, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 87:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.021478804657352, 0.00377344134083693, -0.0196073763651314, 0.00924300585937423, 0.0, -0.0109364720199429, 0.102690308134494, 0.00947126259704826, -0.0695992817480272, -0.060150596109686, 0.0, -0.0050416395596586, 0.0465726713108155, 0.00650872868404612, 0.0214195526695527, -0.00782402252196702, -0.00450937950937954, -0.0289638426440052, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, -0.0431740218144091, -0.00249265331165473, -0.0605484764655282, 0.0, 0.0299118397398575, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, -0.0451299134777144, -0.0281402291104519, 0.023827378664659, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 88:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0150937653633478, 0.0130715842434209, 0.00924300585937413, 0.0, -0.0109364720199429, -0.0089295920116951, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, -0.00650872868404607, 0.0574945887445887, -0.0266937238984759, 0.00676406926406925, 0.0126920209338899, 0.00637722566005186, 0.000563672438672445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0431740218144092, 0.0199412264932383, -0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0451299134777144, -0.0375203054806026, 0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 89:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0301875307266956, 0.0174287789912279, 0.0585390371093694, 0.0, 0.0218729440398859, 0.0178591840233903, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, 0.00526094276094279, 0.0533874477969518, 0.0, -0.0045561100788323, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034897146363167, 0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0437736897273697, -0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 90:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0679219441350652, -0.00435719474780696, -0.00308100195312475, 0.0705946233325039, 0.0328094160598288, 0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.00729098134662861, -0.0298267418725716, 0.0151249186789759, 0.0130985638061669, 0.0325436434202305, 0.0229226791726792, 0.0248527774227189, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797017, 0.0, -0.0245778931055953, -0.0219831358911338, -0.036351194128299, -0.00743165633226676, -0.0345935170706695, -0.0362025178646541, 0.0, -0.0130864298861876, -0.0335815079556711, -0.0232239260383336, 0.00166176887443654, -0.00359783515120077, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, -0.0226083734055987, 0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193681, 0.0, -0.0333014729371016, -0.0270779480866286, -0.00703505727761297, 0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598856, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 91:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, -0.0037734413408369, 0.00217859737390357, -0.0215670136718729, 0.0, -0.0984282481794861, 0.0312535720409329, -0.0852413633734345, -0.0180442582309701, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0116431678277039, 0.0, -0.0236742424242424, 0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506539, 0.0039457070707071, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293081, 0.0603375297744236, 0.0, 0.0392592896585629, -0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, 0.0555024548951693, 0.0, -0.0164151336477637, 0.00680782247561685, 0.0, 0.0427258096992147, 0.0069482047186302, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 92:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, -0.0301875307266958, 0.0610007264692973, -0.00308100195312478, 0.0, -0.0218729440398858, -0.0178591840233903, 0.0757701007763862, -0.0412440188136456, -0.0072909813466286, 0.0, 0.0, 0.0, -0.0520698294723688, 0.0127765752765753, -0.00184094647575691, -0.00901875901875897, 0.0286384062098028, -0.0297603864135751, 0.0142797017797018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0402250198496157, -0.0143913406048031, 0.0137095932141013, -0.00407048581280864, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0370016365967796, 0.0300866089851429, -0.014070114555226, 0.00340391123780843, 0.0, -0.0427258096992147, 0.0243187165152053, 0.0, -0.00982624534723143, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 93:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573526, -0.00377344134083707, -0.0196073763651313, 0.00924300585937411, 0.0, 0.0109364720199428, -0.102690308134494, 0.00947126259704835, -0.0695992817480271, -0.0601505961096859, 0.0, -0.00504163955965866, 0.0465726713108155, -0.00650872868404609, -0.0214195526695527, 0.00782402252196703, -0.00450937950937956, -0.0289638426440051, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, 0.0431740218144092, 0.00249265331165475, 0.0605484764655282, 0.0, 0.0299118397398574, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, 0.0451299134777144, 0.0281402291104519, -0.0238273786646589, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 94:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573518, 0.0150937653633479, 0.013071584243421, 0.00924300585937412, 0.0, 0.0109364720199429, 0.00892959201169515, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, 0.0065087286840461, -0.0574945887445887, 0.0266937238984759, 0.00676406926406924, 0.0126920209338899, 0.0063772256600518, 0.000563672438672482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0431740218144092, -0.0199412264932383, 0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0451299134777144, 0.0375203054806026, -0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 95:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0301875307266957, 0.0174287789912278, 0.0585390371093694, 0.0, -0.0218729440398858, -0.0178591840233902, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, -0.00526094276094276, -0.0533874477969517, 0.0, -0.00455611007883227, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0348971463631671, -0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437736897273697, 0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 96:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0566435317214905, -0.00308100195312481, 0.0423567739995023, 0.0546823600997146, 0.0446479600584756, 0.0378850503881931, 0.0051555023517058, -0.00729098134662859, 0.0417574386216002, -0.00504163955965863, 0.0295930515620807, -0.0247331689993752, 0.0101461038961039, 0.0266937238984759, -0.0202922077922078, 0.00216957622801539, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, -0.0245778931055954, -0.00219831358911336, -0.00519302773261414, -0.0130053985814669, -0.0168945083368385, 0.00402250198496158, -0.0158304746652834, -0.026796023100289, -0.0295110221428625, 0.00464478520766674, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, -0.0226083734055987, -0.0367664434877216, 0.0, -0.0047768907440582, -0.00776832903622084, -0.00908221989193678, 0.0, 0.00370016365967797, 0.00601732179702859, 0.00703505727761299, 0.00680782247561684, 0.0, 0.00427258096992148, 0.0069482047186301, 0.00812338442598856, 0.00786099627778516, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 97:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0, -0.00435719474780698, -0.0215670136718729, -0.127070321998507, 0.0, 0.0, 0.0284137877911449, 0.03608851646194, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0422064833754265, 0.0, 0.0, 0.0, -0.0202922077922078, -0.00618329224984381, 0.00159430641501296, 0.00394570707070708, 0.0836061337380012, 0.0, 0.0, -0.0103860554652283, 0.024152883079867, 0.0434430214375849, 0.0, 0.0, 0.0, 0.0, 0.00464478520766673, -0.0108014976838374, -0.0194283098164842, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, 0.0769064574585865, 0.0, 0.0, 0.0, 0.0, -0.00955378148811642, -0.0155366580724417, -0.0181644397838736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00427258096992146, 0.00694820471863015, 0.00812338442598858, 0.00786099627778516, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 98:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083696, -0.0566435317214904, -0.00308100195312474, 0.0423567739995022, -0.0546823600997145, -0.0446479600584756, 0.037885050388193, 0.00515550235170577, -0.00729098134662853, -0.0417574386216002, -0.00504163955965862, 0.0295930515620806, 0.0247331689993752, -0.0101461038961039, -0.0266937238984759, -0.0202922077922078, 0.00216957622801538, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, 0.0245778931055953, 0.00219831358911338, -0.00519302773261413, -0.0130053985814669, -0.0168945083368386, -0.00402250198496156, 0.0158304746652834, 0.026796023100289, 0.0295110221428625, 0.00464478520766678, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, 0.0226083734055987, 0.0367664434877216, 0.0, -0.00477689074405818, -0.00776832903622087, -0.0090822198919368, 0.0, -0.00370016365967795, -0.00601732179702859, -0.00703505727761298, -0.00680782247561684, 0.0, 0.00427258096992151, 0.00694820471863008, 0.00812338442598856, 0.00786099627778518, 0.00607967912880136};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 99:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, -0.0188672067041848, 0.00653579212171038, 0.0092430058593742, 0.0141189246665007, 0.0, -0.111619900146189, -0.0031570875323494, -0.0541327746929101, -0.060150596109686, -0.00894802256177143, -0.0025208197798293, -0.0276525235907967, 0.000650872868404634, 0.0360750360750361, -0.0188697013765088, 0.00112734487734487, 0.0374251899332651, 0.0199288301876619, 0.000563672438672437, 0.0, 0.0, 0.0593544669060615, 0.0, 0.0167212267476002, 0.0032180015879692, 0.0, -0.0043174021814409, 0.0224338798048931, 0.0463017761206981, 0.0, -0.00747795993496438, 0.018708742786244, 0.043183015465546, 0.0461140862656136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0620433733855302, 0.0, 0.0, 0.0174787403314969, 0.0363288795677471, 0.0, 0.0, -0.00451299134777145, -0.00938007637015062, -0.0119136893323295, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 100:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573519, 0.0188672067041847, 0.00653579212171046, 0.00924300585937428, 0.0141189246665008, 0.0, 0.111619900146189, -0.00315708753234942, -0.0541327746929101, -0.0601505961096861, 0.00894802256177154, -0.00252081977982933, -0.0276525235907967, -0.000650872868404596, -0.0360750360750361, 0.0188697013765088, 0.00112734487734489, 0.0374251899332651, 0.019928830187662, 0.000563672438672452, 0.0, 0.0, -0.0593544669060614, 0.0, 0.0167212267476002, 0.00321800158796926, 0.0, 0.00431740218144093, -0.0224338798048931, -0.0463017761206981, 0.0, -0.00747795993496437, 0.018708742786244, 0.0431830154655461, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0620433733855302, 0.0, 0.0, 0.017478740331497, 0.0363288795677472, 0.0, 0.0, 0.00451299134777144, 0.00938007637015066, 0.0119136893323295, 0.0, 0.0, -0.00781673030845888, -0.0162467688519772, -0.0206351152291861, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 101:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, 0.0, -0.0348575579824556, 0.0585390371093695, -0.0282378493330015, 0.0, 0.0, 0.00631417506469884, -0.0206220094068228, 0.083846285486229, 0.0, 0.0, -0.00679184789949389, 0.0, 0.0, 0.0, 0.0, 0.00151870335961078, -0.0616465147138344, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0450520222315696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0100739384233621, -0.0329013451166065, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0565115904387178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 102:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0217859737390348, -0.0523770332031201, 0.0423567739995024, 0.0546823600997146, 0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, 0.0417574386216002, 0.0285692908380655, -0.00921750786359888, 0.0273366604729936, -0.00789141414141414, -0.0248527774227189, 0.0187890812890813, -0.00347132196482459, -0.0143487577351167, -0.015031265031265, -0.0557374224920008, -0.00491557862111906, -0.0241814494802473, -0.0197335053839337, -0.00928957041533348, -0.00241350119097693, -0.0394205194526234, -0.0158304746652834, -0.000623163327913708, 0.00712335017241507, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957583, 0.00540074884191869, 0.0, -0.0510586685671264, 0.00466099742173249, -0.0405265617908061, -0.0143871467126537, 0.00367664434877214, -0.0114170653756726, -0.00564541633388697, -0.00155366580724415, 0.00100913554354854, 0.010317557614593, 0.00571843474677502, 0.00240692871881142, 0.000260557676948618, -0.000850977809452114, 0.0127646671417816, 0.00737991258440983, 0.00347410235931509, 0.000902598269554292, -0.00049131226736157, -0.000868525589828748};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 103:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, 0.0, -0.0217859737390347, 0.00308100195312484, -0.127070321998507, 0.0, 0.0, 0.0473563129852413, 0.0257775117585285, 0.0127592173566001, 0.0, -0.0352914769176103, 0.0509388592462045, 0.0, 0.0, 0.0, 0.00225468975468975, -0.00943765659186684, -0.0143487577351166, -0.0129644660894661, 0.0836061337380012, 0.0, 0.0, 0.0477758551400501, 0.00928957041533348, -0.0144810071458617, 0.0, 0.0, 0.0, 0.0, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957584, 0.00540074884191876, 0.0, 0.0765880028506896, -0.00699149613259875, 0.0, 0.0, 0.0, -0.0228341307513453, -0.011290832667774, -0.00310733161448838, 0.00201827108709704, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, 0.00737991258440981, 0.00347410235931506, 0.000902598269554269, -0.000491312267361589, -0.000868525589828803};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 104:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083695, -0.0217859737390348, -0.0523770332031201, 0.0423567739995023, -0.0546823600997146, -0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, -0.0417574386216002, 0.0285692908380655, -0.00921750786359893, -0.0273366604729936, 0.00789141414141414, 0.0248527774227189, 0.0187890812890813, -0.00347132196482458, -0.0143487577351166, -0.015031265031265, -0.0557374224920008, 0.00491557862111907, 0.0241814494802472, -0.0197335053839337, -0.00928957041533349, -0.00241350119097694, 0.0394205194526234, 0.0158304746652834, 0.000623163327913706, -0.00712335017241508, -0.0325134964536671, -0.0141250354327105, -0.00215870109072045, 0.00411266813957581, 0.00540074884191868, 0.0, -0.0510586685671264, 0.0046609974217325, 0.0405265617908061, 0.0143871467126537, -0.00367664434877216, -0.0114170653756727, -0.00564541633388695, -0.00155366580724416, 0.00100913554354855, -0.010317557614593, -0.00571843474677502, -0.00240692871881143, -0.000260557676948629, 0.000850977809452107, 0.0127646671417816, 0.00737991258440984, 0.00347410235931506, 0.000902598269554289, -0.000491312267361559, -0.000868525589828739};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 105:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0188672067041847, 0.0108929868695175, 0.00308100195312472, 0.0141189246665008, -0.109364720199429, 0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, -0.00894802256177148, -0.0277290175781224, 0.00145539597846298, -0.00585785581564149, 0.0383297258297258, -0.0124263887113595, 0.0191648629148628, 0.0348216984596467, 0.00717437886755836, -0.0129644660894661, 0.0, 0.0589869434534289, -0.00659494076734012, 0.00727023882565974, 0.0148633126645335, -0.0040225019849616, 0.0506835250105158, -0.00431740218144091, -0.00810112326287806, 0.00356167508620759, 0.0650269929073342, -0.00166176887443651, -0.0115130724838425, -0.00205633406978793, 0.00540074884191875, 0.0, 0.0, 0.0, 0.0607898426862092, -0.0123318400394175, 0.0013787416307896, 0.0399597288148543, 0.00303983956440066, -0.00427258096992151, 0.00100913554354852, -0.0154763364218895, -0.00302740663064561, 0.000902598269554317, 0.000781673030845898, -0.000425488904726052, -0.031911667854454, -0.00776832903622089, 0.000868525589828735, 0.00180519653910857, 0.000245656133680779, -0.000868525589828785};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 106:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, 0.0188672067041847, 0.0108929868695173, 0.00308100195312461, 0.0141189246665007, 0.109364720199429, -0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, 0.00894802256177146, -0.0277290175781224, 0.00145539597846298, 0.00585785581564147, -0.0383297258297259, 0.0124263887113595, 0.0191648629148629, 0.0348216984596467, 0.00717437886755832, -0.0129644660894661, 0.0, -0.0589869434534289, 0.00659494076734013, 0.00727023882565983, 0.0148633126645336, -0.00402250198496153, -0.0506835250105158, 0.00431740218144093, 0.00810112326287806, -0.00356167508620756, 0.0650269929073343, -0.00166176887443652, -0.0115130724838424, -0.00205633406978791, 0.00540074884191871, 0.0, 0.0, 0.0, -0.0607898426862092, 0.0123318400394175, -0.00137874163078959, 0.0399597288148543, 0.00303983956440068, -0.00427258096992146, 0.00100913554354852, 0.0154763364218896, 0.00302740663064561, -0.000902598269554309, -0.000781673030845882, 0.000425488904726061, -0.031911667854454, -0.00776832903622087, 0.000868525589828761, 0.00180519653910858, 0.000245656133680792, -0.000868525589828766};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 107:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.078755617076958, 0.0, 0.0435719474780694, -0.0523770332031201, -0.0282378493330015, 0.0, 0.0, 0.0631417506469885, -0.0515550235170571, 0.0291639253865144, 0.0, -0.00672218607954477, 0.000970263985642002, 0.0, 0.0, 0.0, -0.0601250601250601, -0.0125835421224891, 0.0286975154702333, -0.015031265031265, 0.0, 0.0, 0.0, -0.0436214329539588, 0.0111474844984002, -0.00160900079398465, 0.0, 0.0, 0.0, 0.0, -0.0650269929073343, 0.031573608614294, -0.00287826812096059, -0.00822533627915167, 0.00540074884191872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0532796384198057, 0.018239037386404, -0.00466099742173253, 0.000672757029032364, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425488904726053, -0.00388416451811041, -0.00347410235931508, 0.00120346435940574, 0.000982624534723167, -0.000868525589828753};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 108:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, -0.188672067041848, -0.108929868695174, -0.0770250488281178, -0.0705946233325038, -0.0546823600997147, -0.0446479600584758, -0.0315708753234942, -0.0257775117585285, -0.0182274533665715, 0.0894802256177148, -0.0151249186789758, -0.0130985638061669, 0.0585785581564149, -0.028183621933622, 0.0690354928408859, 0.0744047619047619, 0.00976309302606916, 0.039857660375324, 0.0597492784992785, 0.0, 0.0737336793167861, 0.0659494076734016, 0.036351194128299, 0.00743165633226677, 0.0345935170706695, -0.0120675059548847, 0.0431740218144092, 0.0155790831978424, -0.0254405363300539, -0.0232239260383337, 0.0465295284842228, 0.0251848460584054, -0.0146881004984851, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, 0.0678251202167962, -0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.00908221989193679, 0.0, -0.0111004909790339, -0.00902598269554285, -0.00234501909253765, 0.0034039112378084, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 109:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.188672067041848, -0.108929868695174, -0.0770250488281179, -0.0705946233325039, 0.0546823600997147, 0.0446479600584757, -0.0315708753234942, -0.0257775117585286, -0.0182274533665715, -0.0894802256177148, -0.0151249186789759, -0.0130985638061668, -0.0585785581564149, 0.028183621933622, -0.0690354928408859, 0.0744047619047619, 0.00976309302606915, 0.039857660375324, 0.0597492784992785, 0.0, -0.0737336793167861, -0.0659494076734016, 0.036351194128299, 0.00743165633226679, 0.0345935170706696, 0.0120675059548846, -0.0431740218144092, -0.0155790831978425, 0.0254405363300538, -0.0232239260383337, 0.0465295284842228, 0.0251848460584053, -0.014688100498485, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, -0.0678251202167962, 0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.0090822198919368, 0.0, 0.0111004909790338, 0.00902598269554286, 0.00234501909253764, -0.00340391123780842, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598857, 0.00196524906944628, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 110:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.217859737390348, -0.0770250488281177, 0.0, 0.0, 0.0, -0.0947126259704828, 0.0515550235170571, -0.0182274533665715, 0.0, -0.0907495120738552, 0.0232863356554078, 0.0, 0.0, 0.0, -0.0946969696969697, -0.0227805503941613, -0.079715320750648, 0.0597492784992784, 0.0, 0.0, 0.0, -0.0727023882565981, -0.0483057661597341, 0.0144810071458617, 0.0, 0.0, 0.0, 0.0, 0.0464478520766673, -0.0781031370985168, 0.0431740218144092, 0.0293762009969702, -0.0328199352701214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0668764704168148, 0.0310733161448835, -0.00605481326129118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0427258096992147, 0.00694820471863014, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 111:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.0, 0.231075146484353, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109364720199429, 0.0, 0.0100832791193172, -0.093145342621631, 0.0, 0.0, 0.0, -0.00450937950937958, -0.104139658944738, 0.0, -0.0924422799422799, 0.0, 0.0, 0.0, 0.0, -0.066884906990401, -0.0579240285834466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.0647610327216138, 0.0, 0.0835038859404355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0699149613259878, 0.0242192530451648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338355, 0.0270779480866287, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 112:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923505, 0.00609788120679253, 0.00352061335622801, 0.00248944957812478, 0.00705946233325035, 0.00546823600997146, 0.0044647960058476, 0.0031570875323494, 0.00257775117585286, 0.00182274533665715, -0.00298267418725715, -0.00252081977982932, -0.00218309396769448, -0.00195261860521384, -0.00169101731601733, -0.00138070985681772, -0.0011273448773449, -0.00097630930260694, -0.000797153207506489, -0.000563672438672444, 0.00278687112460006, 0.00245778931055954, 0.00219831358911339, 0.00207721109304566, 0.00185791408306669, 0.00160900079398463, 0.00160900079398464, 0.00143913406048031, 0.00124632665582739, 0.00101762145320215, 0.000928957041533368, 0.000830884437218251, 0.000719567030240159, 0.000587524019939407, 0.000415442218609133, -0.00705593524717798, -0.00638233357089079, -0.00582624677716565, -0.00562868913761196, -0.00513826668309062, -0.00459580543596521, -0.00475711057319694, -0.00434262794914382, -0.00388416451811044, -0.00336378514516178, -0.00368484200521178, -0.00336378514516176, -0.00300866089851429, -0.00260557676948629, -0.00212744452363027, -0.00212744452363026, -0.00194208225905519, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 113:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923493, -0.00609788120679249, 0.00352061335622803, 0.00248944957812476, 0.0070594623332504, -0.00546823600997144, -0.00446479600584757, 0.00315708753234942, 0.00257775117585287, 0.00182274533665715, 0.00298267418725716, -0.00252081977982929, -0.00218309396769448, 0.00195261860521383, 0.00169101731601732, 0.00138070985681771, -0.00112734487734489, -0.000976309302606925, -0.000797153207506475, -0.000563672438672438, 0.00278687112460003, -0.00245778931055953, -0.0021983135891134, 0.00207721109304565, 0.00185791408306669, 0.00160900079398462, -0.00160900079398462, -0.0014391340604803, -0.0012463266558274, -0.00101762145320215, 0.000928957041533351, 0.000830884437218258, 0.000719567030240152, 0.000587524019939402, 0.000415442218609129, 0.00705593524717798, -0.00638233357089081, -0.00582624677716566, 0.00562868913761197, 0.00513826668309062, 0.0045958054359652, -0.00475711057319694, -0.00434262794914383, -0.00388416451811044, -0.00336378514516178, 0.00368484200521179, 0.00336378514516178, 0.0030086608985143, 0.0026055767694863, 0.00212744452363027, -0.00212744452363027, -0.00194208225905521, -0.00173705117965753, -0.00150433044925715, -0.00122828066840393, -0.000868525589828762};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 114:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923494, 0.0, -0.00704122671245613, 0.00248944957812474, 0.0, 0.0, 0.0, 0.0094712625970483, -0.00515550235170573, 0.00182274533665714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0045093795093795, -0.00292892790782074, 0.00159430641501297, -0.000563672438672427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00464478520766671, -0.00332353774887303, 0.00215870109072045, -0.0011750480398788, 0.000415442218609134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, -0.0097104112952761, 0.00694820471863011, -0.00451299134777143, 0.00245656133680785, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 115:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.00945067404923491, 0.0, 0.0, -0.00746834873437434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0109364720199429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00563672438672436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00623163327913695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 116:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0, 0.03747187483114, -0.0289614183593723, 0.0, 0.0, 0.0, 0.0284137877911448, 0.00515550235170568, -0.00619733414463431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0315656565656565, -0.0113902751970807, 0.0026571773583549, -0.000187890812890804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0232239260383337, -0.00166176887443655, -0.00647610327216137, 0.00646276421933346, -0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0213629048496074, -0.0277928188745204, 0.0243701532779658, -0.0157219925555703, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 117:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.0, -0.0287574853355261, 0.05360943398437, 0.0, 0.0, 0.0, -0.0189425251940965, 0.0154665070551172, 0.0153110608279201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00450937950937951, 0.0370997534990628, -0.0281660799985623, 0.0108976671476671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.00431740218144093, -0.0123380044187275, 0.00872428659079177, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338356, -0.0487403065559316, 0.041270230458372, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 118:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0, 0.0409576306293853, -0.0449826285156207, 0.0, 0.0, 0.0, 0.0189425251940965, -0.0051555023517058, -0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00455611007883225, 0.0356061766019561, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302218152700864, 0.00411266813957586, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0379091273212801, -0.0550269739444961, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 119:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0, -0.0148144621425436, 0.0449826285156208, 0.0, 0.0, 0.0, 0.0, 0.0206220094068229, 0.021143845905223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0106287094334197, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020563340697879, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03439185871531, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 120:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0187359374155699, -0.0289614183593723, 0.0211783869997511, -0.0164047080299144, 0.00446479600584752, 0.00947126259704829, -0.00257775117585286, -0.00619733414463432, 0.0208787193108001, -0.0176457384588052, -0.00848980987436738, 0.0136683302364968, 0.00657617845117846, 0.00230118309469618, -0.00789141414141413, -0.0037967583990269, -0.00132858867917748, -0.0001878908128908, 0.0139343556230002, -0.0122889465527977, -0.00109915679455667, 0.0103860554652283, 0.000928957041533345, -0.00482700238195389, -0.00804500396992315, -0.000719567030240148, 0.0037389799674822, 0.00559691799261188, 0.00464478520766673, 0.000415442218609139, -0.00215870109072047, -0.0032313821096667, -0.00290809553026391, 0.0, 0.0, 0.0128177429097644, 0.0, -0.0113041867027994, -0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, -0.00740032731935591, -0.0120346435940572, -0.014070114555226, -0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863013, 0.00812338442598859, 0.00786099627778514, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 121:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734316, -0.0249047128495238, 0.014378742667763, 0.0536094339843698, -0.0141189246665007, 0.0109364720199429, 0.0133943880175427, -0.00631417506469885, -0.00773325352755854, 0.0153110608279201, -0.00298267418725716, 0.00252081977982933, 0.0276525235907967, -0.00195261860521385, -0.0214195526695527, -0.0243925408037797, 0.00112734487734488, 0.0123665844996876, 0.0140830399992812, 0.0108976671476671, 0.0, 0.0, 0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796927, 0.0, 0.0129522065443227, 0.00249265331165477, -0.0106850252586226, 0.0, -0.00747795993496439, -0.00143913406048031, 0.00616900220936372, 0.00872428659079175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, 0.0135389740433143, 0.0281402291104519, 0.0357410679969885, 0.0, 0.0, -0.00781673030845889, -0.0162467688519772, -0.020635115229186, -0.018239037386404};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 122:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0204788153146928, -0.0449826285156207, 0.0141189246665008, -0.0109364720199429, -0.00446479600584748, 0.00631417506469886, 0.00257775117585284, -0.021143845905223, 0.0, 0.0, 0.00339592394974695, 0.0, -0.00263047138047139, 0.0308358534689291, 0.0, 0.00151870335961076, -0.017803088300978, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, -0.0174485731815836, 0.00356167508620753, 0.0, 0.0, 0.0100739384233621, -0.00205633406978791, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, -0.0218868448636848, -0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 123:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.00740723107127185, 0.0449826285156207, 0.0, 0.0, 0.0178591840233903, 0.0, -0.0103110047034114, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00920473237878477, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489396, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0297842233308238, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 124:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734309, 0.0324515955311978, -0.0335503995581136, -0.00801060507812418, 0.0211783869997512, 0.00109364720199429, -0.0169662248222207, -0.00568275755822894, 0.00567105258687627, 0.00838462854862288, 0.0208787193108001, -0.0109235523792603, -0.0162519217595033, 0.00499002532443536, 0.00958243145743147, 0.0108922666482287, -0.00187890812890812, -0.00466458889023306, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, -0.00245778931055953, -0.0120907247401236, -0.00415442218609133, 0.00464478520766674, 0.00965400476390776, 0.00643600317593851, -0.000719567030240141, -0.00498530662330958, -0.006614539445814, -0.00464478520766674, -0.000415442218609131, 0.00215870109072044, 0.00323138210966672, 0.00290809553026393, 0.0, 0.0127646671417816, -0.00116524935543313, -0.0202632808954031, -0.00719357335632686, 0.00183832217438609, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, -0.020635115229186, -0.01143686949355, -0.00481385743762287, -0.000521115353897263, 0.00170195561890421, 0.0127646671417816, 0.00737991258440982, 0.00347410235931507, 0.00090259826955429, -0.000491312267361578, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 125:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, -0.0249047128495238, 0.0553363732971482, -0.00431340273437461, -0.0141189246665008, 0.0153110608279201, 0.00803663281052558, 0.00883984509057838, -0.0159820572902877, 0.000729098134662845, -0.00298267418725716, 0.0277290175781224, -0.00145539597846296, -0.0301571095694136, -0.0116492303992304, 0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917747, -0.00263047138047138, 0.0, 0.0196623144844763, -0.00219831358911338, -0.00727023882565981, -0.0148633126645336, 0.00402250198496157, -0.00724050357293084, 0.0129522065443227, 0.00685479660705067, -0.00457929653940971, 0.00928957041533346, -0.00664707549774609, -0.0057565362419212, -0.00029376200996971, 0.00290809553026395, 0.0, 0.0, 0.0, 0.0202632808954031, -0.00411061334647249, 0.000459580543596519, -0.0399597288148543, -0.00303983956440069, 0.00427258096992149, -0.00100913554354853, 0.0464290092656685, 0.00908221989193678, -0.00270779480866285, -0.00234501909253766, 0.00127646671417817, -0.031911667854454, -0.00776832903622087, 0.000868525589828756, 0.00180519653910858, 0.000245656133680792, -0.000868525589828773};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 126:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, 0.0354703486038674, -0.0492363006502187, -0.00431340273437462, 0.0141189246665007, -0.00656188321196576, -0.00982255121286465, -0.016416855168217, 0.0149509568199466, 0.00072909813466287, 0.0, 0.0033610930397724, -0.00048513199282101, 0.0282044909641998, -0.0124007936507936, 0.00291483191994851, -0.0353234728234728, 0.00889526253486301, 0.00239145962251945, -0.00263047138047138, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920009, 0.00080450039699231, -0.00402250198496154, -0.014391340604803, 0.00934744991870548, -0.00254405363300537, -0.0092895704153335, 0.0141250354327105, -0.00287826812096064, -0.00381890612960613, 0.00290809553026391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516179, -0.0515877880729651, 0.00840946286290446, 0.00300866089851429, -0.00286613444643492, 0.000850977809452107, 0.0425488904726053, -0.00388416451811045, -0.00347410235931507, 0.00120346435940572, 0.000982624534723146, -0.000868525589828758};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 127:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0128297005588457, 0.0448791059024117, -0.00801060507812427, 0.0, 0.0174983552319086, -0.00357183680467801, 0.0132597676358676, -0.0175287079957995, 0.00838462854862288, 0.0, 0.0, 0.0, 0.00867830491206147, -0.00300625300625301, 0.000613648825252317, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0160900079398463, -0.00719567030240153, 0.0024926533116548, -0.000508810726601086, 0.00464478520766675, -0.0108014976838374, 0.0107935054536023, -0.00734405024924252, 0.00290809553026394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0257938940364826, -0.0134551405806471, 0.00601732179702859, -0.00208446141558904, 0.000425488904726059, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554292, 0.0017195929357655, -0.000868525589828772};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 128:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734313, -0.0324515955311979, -0.0187359374155699, -0.0289614183593722, 0.0211783869997511, 0.0164047080299144, -0.00446479600584756, 0.00947126259704828, -0.00257775117585285, -0.00619733414463429, -0.0208787193108001, -0.0176457384588052, -0.00848980987436741, -0.0136683302364968, -0.00657617845117842, -0.00230118309469618, -0.00789141414141414, -0.00379675839902689, -0.00132858867917748, -0.000187890812890818, 0.0139343556230002, 0.0122889465527977, 0.00109915679455668, 0.0103860554652283, 0.000928957041533349, -0.0048270023819539, 0.00804500396992312, 0.00071956703024016, -0.0037389799674822, -0.00559691799261187, 0.00464478520766674, 0.000415442218609132, -0.00215870109072046, -0.00323138210966673, -0.00290809553026393, 0.0, 0.0, 0.0128177429097644, 0.0, 0.0113041867027994, 0.0183832217438608, 0.0, 0.0095537814881164, 0.0155366580724417, 0.0181644397838736, 0.0, 0.00740032731935588, 0.0120346435940572, 0.014070114555226, 0.0136156449512337, 0.0, 0.00427258096992147, 0.00694820471863012, 0.00812338442598859, 0.00786099627778515, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 129:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.010023442173431, 0.024904712849524, 0.014378742667763, 0.0536094339843699, -0.0141189246665008, -0.0109364720199429, -0.0133943880175426, -0.00631417506469884, -0.00773325352755861, 0.0153110608279199, 0.00298267418725715, 0.0025208197798293, 0.0276525235907967, 0.00195261860521382, 0.0214195526695527, 0.0243925408037797, 0.00112734487734485, 0.0123665844996876, 0.0140830399992811, 0.0108976671476671, 0.0, 0.0, -0.0197848223020205, 0.0, -0.0167212267476003, -0.00321800158796923, 0.0, -0.0129522065443228, -0.00249265331165476, 0.0106850252586226, 0.0, -0.00747795993496438, -0.0014391340604803, 0.00616900220936375, 0.00872428659079182, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0206811244618434, 0.0, 0.0, -0.017478740331497, -0.0363288795677472, 0.0, 0.0, -0.0135389740433143, -0.0281402291104519, -0.0357410679969884, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 130:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734313, -0.0354703486038674, -0.0204788153146928, -0.0449826285156206, 0.0141189246665007, 0.0109364720199429, 0.00446479600584753, 0.00631417506469885, 0.00257775117585285, -0.0211438459052229, 0.0, 0.0, 0.00339592394974695, 0.0, 0.00263047138047134, -0.0308358534689291, 0.0, 0.00151870335961077, -0.0178030883009781, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225260111157848, 0.0, 0.0, 0.0174485731815835, -0.00356167508620756, 0.0, 0.0, 0.0100739384233621, -0.00205633406978792, -0.0145404776513196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0282557952193589, 0.0, 0.0, 0.0, 0.0218868448636848, 0.047654757329318, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 131:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0128297005588457, 0.00740723107127183, 0.0449826285156208, 0.0, 0.0, -0.0178591840233903, 0.0, -0.0103110047034115, 0.0211438459052229, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00920473237878482, 0.0, 0.0, -0.00531435471670986, 0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0178083754310377, 0.0, 0.0, 0.0, -0.0102816703489395, 0.0145404776513197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0297842233308237, 0.0, 0.0, 0.0, 0.0, -0.017195929357655, -0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 132:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734305, -0.0324515955311978, -0.0335503995581136, -0.00801060507812423, 0.0211783869997512, -0.00109364720199431, 0.0169662248222208, -0.00568275755822893, 0.00567105258687627, 0.00838462854862291, -0.0208787193108001, -0.0109235523792603, -0.0162519217595033, -0.00499002532443534, -0.00958243145743147, -0.0108922666482287, -0.00187890812890815, -0.00466458889023305, -0.00558007245254536, -0.00469727032227032, 0.0139343556230002, 0.00245778931055952, 0.0120907247401236, -0.00415442218609134, 0.00464478520766673, 0.00965400476390777, -0.00643600317593851, 0.000719567030240148, 0.00498530662330958, 0.00661453944581401, -0.00464478520766677, -0.000415442218609124, 0.00215870109072045, 0.00323138210966672, 0.00290809553026392, 0.0, 0.0127646671417816, -0.00116524935543312, 0.0202632808954031, 0.00719357335632687, -0.00183832217438607, 0.0228341307513453, 0.0112908326677739, 0.00310733161448834, -0.00201827108709707, 0.020635115229186, 0.0114368694935501, 0.00481385743762287, 0.000521115353897252, -0.00170195561890421, 0.0127646671417816, 0.00737991258440981, 0.00347410235931507, 0.000902598269554277, -0.000491312267361576, -0.000868525589828769};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 133:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734306, 0.0249047128495239, 0.0553363732971483, -0.00431340273437459, -0.0141189246665007, -0.0153110608279201, -0.00803663281052554, 0.00883984509057833, -0.0159820572902877, 0.000729098134662816, 0.00298267418725714, 0.0277290175781224, -0.00145539597846298, 0.0301571095694136, 0.0116492303992305, -0.00352848074520083, 0.0191648629148629, 0.00976309302606916, 0.00132858867917748, -0.00263047138047135, 0.0, -0.0196623144844763, 0.00219831358911337, -0.00727023882565974, -0.0148633126645335, 0.00402250198496158, 0.00724050357293086, -0.0129522065443227, -0.00685479660705068, 0.0045792965394097, 0.00928957041533352, -0.0066470754977461, -0.00575653624192119, -0.000293762009969713, 0.00290809553026392, 0.0, 0.0, 0.0, -0.0202632808954031, 0.00411061334647248, -0.00045958054359652, -0.0399597288148542, -0.00303983956440067, 0.00427258096992148, -0.00100913554354853, -0.0464290092656685, -0.00908221989193682, 0.00270779480866286, 0.00234501909253766, -0.00127646671417816, -0.031911667854454, -0.00776832903622085, 0.000868525589828734, 0.00180519653910859, 0.000245656133680784, -0.000868525589828764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 134:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734315, -0.0354703486038674, -0.0492363006502185, -0.00431340273437457, 0.0141189246665008, 0.00656188321196575, 0.00982255121286466, -0.016416855168217, 0.0149509568199466, 0.000729098134662867, 0.0, 0.00336109303977241, -0.000485131992820998, -0.0282044909641998, 0.0124007936507937, -0.00291483191994851, -0.0353234728234728, 0.008895262534863, 0.00239145962251945, -0.0026304713804714, 0.0, 0.0, 0.0, 0.0218107164769794, -0.00557374224920008, 0.000804500396992312, 0.00402250198496156, 0.0143913406048031, -0.00934744991870546, 0.00254405363300538, -0.00928957041533351, 0.0141250354327105, -0.00287826812096063, -0.00381890612960613, 0.00290809553026392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0266398192099028, -0.00911951869320202, 0.00233049871086625, -0.000336378514516176, 0.0515877880729651, -0.00840946286290444, -0.00300866089851428, 0.00286613444643492, -0.000850977809452105, 0.0425488904726053, -0.00388416451811045, -0.00347410235931505, 0.00120346435940571, 0.000982624534723157, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 135:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, 0.0128297005588457, 0.0448791059024117, -0.00801060507812429, 0.0, -0.0174983552319087, 0.00357183680467806, 0.0132597676358676, -0.0175287079957995, 0.00838462854862292, 0.0, 0.0, 0.0, -0.00867830491206146, 0.00300625300625302, -0.000613648825252329, 0.0225468975468975, -0.019200749617936, 0.0122230158484327, -0.00469727032227032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0160900079398463, 0.00719567030240154, -0.00249265331165478, 0.000508810726601091, 0.00464478520766676, -0.0108014976838374, 0.0107935054536023, -0.00734405024924251, 0.00290809553026393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0257938940364825, 0.0134551405806471, -0.00601732179702859, 0.00208446141558904, -0.000425488904726056, -0.031911667854454, 0.0135945758133865, -0.00347410235931504, -0.000902598269554288, 0.00171959293576549, -0.000868525589828771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 136:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0100234421734311, -0.0452812960900435, -0.0113287063442981, -0.00801060507812424, -0.00141189246665005, 0.0164047080299144, 0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862293, -0.00894802256177147, -0.0142846454190327, -0.0123708658169354, -0.014536160727703, -0.0125886844636845, -0.0102786178229764, -0.00939454064454065, -0.00813591085505764, -0.00664294339588734, -0.00469727032227033, -0.00836061337380014, 0.00245778931055955, 0.00219831358911339, 0.00830884437218263, 0.00743165633226679, 0.0064360031759385, 0.00965400476390778, 0.00863480436288184, 0.00747795993496438, 0.00610572871921294, 0.00650269929073342, 0.00581619106052785, 0.00503696921168106, 0.00411266813957582, 0.00290809553026391, 0.0352796762358899, 0.0191470007126724, 0.0174787403314969, 0.00788016479265675, 0.00719357335632689, 0.00643412761035129, 0.000951422114639382, 0.000868525589828755, 0.000776832903622076, 0.000672757029032345, -0.00221090520312707, -0.00201827108709705, -0.00180519653910857, -0.00156334606169177, -0.00127646671417816, -0.00212744452363026, -0.00194208225905521, -0.00173705117965752, -0.00150433044925715, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 137:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734309, 0.0603750614533913, -0.00610007264692978, -0.00431340273437464, -0.00564756986660042, -0.0218729440398858, -0.0178591840233902, 0.00126283501293976, 0.00103110047034114, 0.000729098134662865, 0.0417574386216002, 0.016805465198862, 0.0145539597846298, -0.000867830491206139, -0.000751563251563246, -0.00061364882525229, -0.00526094276094275, -0.00455611007883229, -0.00372004830169691, -0.00263047138047138, 0.00557374224920013, -0.0196623144844763, -0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992314, 0.00321800158796925, 0.00287826812096061, 0.00249265331165479, 0.00203524290640428, 0.00650269929073342, 0.00581619106052785, 0.00503696921168108, 0.00411266813957583, 0.00290809553026394, -0.0705593524717798, -0.0127646671417816, -0.0116524935543313, 0.00450295131008955, 0.00411061334647247, 0.00367664434877213, 0.00380568845855755, 0.00347410235931508, 0.00310733161448836, 0.00269102811612943, -0.000736968401042361, -0.000672757029032367, -0.000601732179702866, -0.000521115353897261, -0.000425488904726046, -0.00212744452363026, -0.00194208225905521, -0.00173705117965753, -0.00150433044925714, -0.00122828066840394, -0.000868525589828775};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 138:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0100234421734311, -0.0603750614533913, -0.00610007264692978, -0.00431340273437461, -0.00564756986660028, 0.0218729440398858, 0.0178591840233902, 0.00126283501293978, 0.00103110047034114, 0.00072909813466285, -0.0417574386216002, 0.016805465198862, 0.0145539597846299, 0.00086783049120613, 0.000751563251563235, 0.000613648825252307, -0.00526094276094275, -0.00455611007883227, -0.0037200483016969, -0.00263047138047138, 0.00557374224920005, 0.0196623144844763, 0.0175865087129071, -0.0103860554652283, -0.00928957041533348, -0.00804500396992316, -0.00321800158796927, -0.00287826812096063, -0.0024926533116548, -0.00203524290640429, 0.00650269929073343, 0.00581619106052785, 0.00503696921168108, 0.00411266813957581, 0.00290809553026392, 0.0705593524717798, -0.0127646671417816, -0.0116524935543313, -0.00450295131008957, -0.00411061334647248, -0.00367664434877215, 0.00380568845855754, 0.00347410235931504, 0.00310733161448834, 0.00269102811612942, 0.000736968401042368, 0.000672757029032363, 0.000601732179702872, 0.000521115353897267, 0.000425488904726048, -0.00212744452363027, -0.00194208225905522, -0.00173705117965754, -0.00150433044925714, -0.00122828066840393, -0.000868525589828761};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 139:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.010023442173431, 0.0452812960900436, -0.0113287063442981, -0.00801060507812426, -0.00141189246665009, -0.0164047080299144, -0.0133943880175427, 0.0145226026488074, 0.0118576554089232, 0.00838462854862292, 0.00894802256177149, -0.0142846454190328, -0.0123708658169354, 0.014536160727703, 0.0125886844636845, 0.0102786178229763, -0.00939454064454066, -0.00813591085505763, -0.00664294339588734, -0.00469727032227034, -0.0083606133738001, -0.00245778931055954, -0.0021983135891134, 0.00830884437218264, 0.00743165633226679, 0.00643600317593851, -0.00965400476390776, -0.00863480436288183, -0.00747795993496437, -0.00610572871921293, 0.00650269929073342, 0.00581619106052784, 0.00503696921168106, 0.00411266813957582, 0.00290809553026394, -0.0352796762358899, 0.0191470007126724, 0.017478740331497, -0.00788016479265674, -0.00719357335632688, -0.00643412761035128, 0.000951422114639399, 0.000868525589828759, 0.000776832903622089, 0.000672757029032358, 0.00221090520312706, 0.00201827108709707, 0.00180519653910857, 0.00156334606169177, 0.00127646671417816, -0.00212744452363025, -0.00194208225905521, -0.00173705117965752, -0.00150433044925714, -0.00122828066840393, -0.000868525589828767};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 140:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0679219441350651, -0.00435719474780696, -0.00308100195312468, 0.0705946233325039, -0.0328094160598287, -0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.0072909813466286, 0.0298267418725716, 0.0151249186789758, 0.0130985638061668, -0.0325436434202305, -0.0229226791726792, -0.024852777422719, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797018, 0.0, 0.0245778931055954, 0.0219831358911338, -0.0363511941282991, -0.0074316563322668, -0.0345935170706696, 0.0362025178646541, 0.0, 0.0130864298861876, 0.0335815079556711, -0.0232239260383337, 0.00166176887443654, -0.00359783515120076, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0226083734055987, -0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193682, 0.0, 0.0333014729371016, 0.0270779480866286, 0.00703505727761299, -0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 141:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0037734413408369, 0.00217859737390355, -0.0215670136718729, 0.0, 0.0984282481794862, -0.0312535720409329, -0.0852413633734344, -0.0180442582309701, 0.0309866707231717, 0.0, 0.0453747560369276, -0.0116431678277039, 0.0, 0.0236742424242424, -0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506555, 0.00394570707070709, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293083, -0.0603375297744236, 0.0, -0.039259289658563, 0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, -0.0555024548951693, 0.0, 0.0164151336477636, -0.00680782247561685, 0.0, 0.0427258096992147, 0.00694820471863017, -0.0108311792346515, -0.00393049813889261, 0.00607967912880133};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 142:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769579, 0.0301875307266957, 0.0610007264692972, -0.00308100195312469, 0.0, 0.0218729440398859, 0.0178591840233903, 0.0757701007763862, -0.0412440188136457, -0.00729098134662862, 0.0, 0.0, 0.0, 0.0520698294723689, -0.0127765752765753, 0.00184094647575698, -0.00901875901875902, 0.0286384062098028, -0.0297603864135752, 0.0142797017797017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0402250198496157, 0.014391340604803, -0.0137095932141014, 0.00407048581280861, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0370016365967795, -0.030086608985143, 0.014070114555226, -0.00340391123780845, 0.0, -0.0427258096992148, 0.0243187165152054, 0.0, -0.00982624534723142, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 143:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.021478804657352, 0.00377344134083693, -0.0196073763651314, 0.00924300585937423, 0.0, -0.0109364720199429, 0.102690308134494, 0.00947126259704826, -0.0695992817480272, -0.060150596109686, 0.0, -0.0050416395596586, 0.0465726713108155, 0.00650872868404612, 0.0214195526695527, -0.00782402252196702, -0.00450937950937954, -0.0289638426440052, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, -0.0431740218144091, -0.00249265331165473, -0.0605484764655282, 0.0, 0.0299118397398575, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, -0.0451299134777144, -0.0281402291104519, 0.023827378664659, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 144:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0150937653633478, 0.0130715842434209, 0.00924300585937413, 0.0, -0.0109364720199429, -0.0089295920116951, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, -0.00650872868404607, 0.0574945887445887, -0.0266937238984759, 0.00676406926406925, 0.0126920209338899, 0.00637722566005186, 0.000563672438672445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0431740218144092, 0.0199412264932383, -0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0451299134777144, -0.0375203054806026, 0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 145:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0301875307266956, 0.0174287789912279, 0.0585390371093694, 0.0, 0.0218729440398859, 0.0178591840233903, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, 0.00526094276094279, 0.0533874477969518, 0.0, -0.0045561100788323, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034897146363167, 0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0437736897273697, -0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 146:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0679219441350652, -0.00435719474780696, -0.00308100195312475, 0.0705946233325039, 0.0328094160598288, 0.0267887760350854, 0.0126283501293977, 0.0360885164619401, -0.00729098134662861, -0.0298267418725716, 0.0151249186789759, 0.0130985638061669, 0.0325436434202305, 0.0229226791726792, 0.0248527774227189, 0.0248015873015873, 0.0169226945785198, 0.0164744996218006, 0.0142797017797017, 0.0, -0.0245778931055953, -0.0219831358911338, -0.036351194128299, -0.00743165633226676, -0.0345935170706695, -0.0362025178646541, 0.0, -0.0130864298861876, -0.0335815079556711, -0.0232239260383336, 0.00166176887443654, -0.00359783515120077, -0.0146881004984851, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, -0.0226083734055987, 0.00459580543596521, 0.0, -0.0334382352084074, -0.0194208225905522, 0.00908221989193681, 0.0, -0.0333014729371016, -0.0270779480866286, -0.00703505727761297, 0.0102117337134253, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598856, 0.0019652490694463, 0.00607967912880137};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 147:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, -0.0037734413408369, 0.00217859737390357, -0.0215670136718729, 0.0, -0.0984282481794861, 0.0312535720409329, -0.0852413633734345, -0.0180442582309701, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0116431678277039, 0.0, -0.0236742424242424, 0.00138070985681772, -0.0202922077922078, -0.0335199527228374, -0.000797153207506539, 0.0039457070707071, 0.0, 0.0, 0.0, 0.036351194128299, 0.024152883079867, -0.00724050357293081, 0.0603375297744236, 0.0, 0.0392592896585629, -0.0188259968842399, 0.0464478520766673, -0.0108014976838374, 0.0259044130886455, 0.010869194368879, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334382352084074, -0.0155366580724417, 0.00302740663064559, 0.0, 0.0555024548951693, 0.0, -0.0164151336477637, 0.00680782247561685, 0.0, 0.0427258096992147, 0.0069482047186302, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 148:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, -0.0301875307266958, 0.0610007264692973, -0.00308100195312478, 0.0, -0.0218729440398858, -0.0178591840233903, 0.0757701007763862, -0.0412440188136456, -0.0072909813466286, 0.0, 0.0, 0.0, -0.0520698294723688, 0.0127765752765753, -0.00184094647575691, -0.00901875901875897, 0.0286384062098028, -0.0297603864135751, 0.0142797017797018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0402250198496157, -0.0143913406048031, 0.0137095932141013, -0.00407048581280864, -0.0464478520766673, 0.0182794576188018, -0.0345392174515273, 0.0364264892362429, -0.0178640154001927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0370016365967796, 0.0300866089851429, -0.014070114555226, 0.00340391123780843, 0.0, -0.0427258096992147, 0.0243187165152053, 0.0, -0.00982624534723143, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 149:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573526, -0.00377344134083707, -0.0196073763651313, 0.00924300585937411, 0.0, 0.0109364720199428, -0.102690308134494, 0.00947126259704835, -0.0695992817480271, -0.0601505961096859, 0.0, -0.00504163955965866, 0.0465726713108155, -0.00650872868404609, -0.0214195526695527, 0.00782402252196703, -0.00450937950937956, -0.0289638426440051, -0.0263060558477138, 0.000563672438672401, 0.0, 0.0, 0.0, 0.0, 0.0334424534952005, 0.0289620142917233, 0.0, 0.0431740218144092, 0.00249265331165475, 0.0605484764655282, 0.0, 0.0299118397398574, -0.00431740218144093, 0.0185070066280912, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0349574806629939, -0.0121096265225824, 0.0, 0.0, 0.0451299134777144, 0.0281402291104519, -0.0238273786646589, 0.0, 0.0, 0.0312669212338355, 0.0270779480866286, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 150:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573518, 0.0150937653633479, 0.013071584243421, 0.00924300585937412, 0.0, 0.0109364720199429, 0.00892959201169515, 0.00947126259704832, 0.123732056440937, -0.0601505961096861, 0.0, 0.0, 0.0, 0.0065087286840461, -0.0574945887445887, 0.0266937238984759, 0.00676406926406924, 0.0126920209338899, 0.0063772256600518, 0.000563672438672482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0431740218144092, -0.0199412264932383, 0.0142467003448302, 0.0, -0.0448677596097863, 0.0215870109072046, -0.0616900220936373, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0451299134777144, 0.0375203054806026, -0.0119136893323295, 0.0, 0.0, -0.0469003818507533, 0.0162467688519772, 0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 151:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0301875307266957, 0.0174287789912278, 0.0585390371093694, 0.0, -0.0218729440398858, -0.0178591840233902, -0.0189425251940966, 0.0103110047034114, 0.083846285486229, 0.0, 0.0, 0.0, 0.0, -0.00526094276094276, -0.0533874477969517, 0.0, -0.00455611007883227, 0.0308232573569172, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0348971463631671, -0.0284934006896603, 0.0, 0.0, -0.0302218152700864, 0.0164506725583033, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437736897273697, 0.023827378664659, 0.0, 0.0, 0.0, -0.0379091273212801, -0.013756743486124, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 152:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0566435317214905, -0.00308100195312481, 0.0423567739995023, 0.0546823600997146, 0.0446479600584756, 0.0378850503881931, 0.0051555023517058, -0.00729098134662859, 0.0417574386216002, -0.00504163955965863, 0.0295930515620807, -0.0247331689993752, 0.0101461038961039, 0.0266937238984759, -0.0202922077922078, 0.00216957622801539, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, -0.0245778931055954, -0.00219831358911336, -0.00519302773261414, -0.0130053985814669, -0.0168945083368385, 0.00402250198496158, -0.0158304746652834, -0.026796023100289, -0.0295110221428625, 0.00464478520766674, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, -0.0226083734055987, -0.0367664434877216, 0.0, -0.0047768907440582, -0.00776832903622084, -0.00908221989193678, 0.0, 0.00370016365967797, 0.00601732179702859, 0.00703505727761299, 0.00680782247561684, 0.0, 0.00427258096992148, 0.0069482047186301, 0.00812338442598856, 0.00786099627778516, 0.00607967912880135};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 153:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, 0.0, -0.00435719474780698, -0.0215670136718729, -0.127070321998507, 0.0, 0.0, 0.0284137877911449, 0.03608851646194, 0.0309866707231716, 0.0, 0.0453747560369275, -0.0422064833754265, 0.0, 0.0, 0.0, -0.0202922077922078, -0.00618329224984381, 0.00159430641501296, 0.00394570707070708, 0.0836061337380012, 0.0, 0.0, -0.0103860554652283, 0.024152883079867, 0.0434430214375849, 0.0, 0.0, 0.0, 0.0, 0.00464478520766673, -0.0108014976838374, -0.0194283098164842, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, 0.0769064574585865, 0.0, 0.0, 0.0, 0.0, -0.00955378148811642, -0.0155366580724417, -0.0181644397838736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00427258096992146, 0.00694820471863015, 0.00812338442598858, 0.00786099627778516, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 154:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083696, -0.0566435317214904, -0.00308100195312474, 0.0423567739995022, -0.0546823600997145, -0.0446479600584756, 0.037885050388193, 0.00515550235170577, -0.00729098134662853, -0.0417574386216002, -0.00504163955965862, 0.0295930515620806, 0.0247331689993752, -0.0101461038961039, -0.0266937238984759, -0.0202922077922078, 0.00216957622801538, 0.0132858867917747, 0.0142797017797018, -0.0557374224920008, 0.0245778931055953, 0.00219831358911338, -0.00519302773261413, -0.0130053985814669, -0.0168945083368386, -0.00402250198496156, 0.0158304746652834, 0.026796023100289, 0.0295110221428625, 0.00464478520766678, -0.0108014976838375, -0.0194283098164841, -0.0217383887377579, -0.0178640154001927, 0.0, 0.0, -0.0512709716390577, 0.0, 0.0226083734055987, 0.0367664434877216, 0.0, -0.00477689074405818, -0.00776832903622087, -0.0090822198919368, 0.0, -0.00370016365967795, -0.00601732179702859, -0.00703505727761298, -0.00680782247561684, 0.0, 0.00427258096992151, 0.00694820471863008, 0.00812338442598856, 0.00786099627778518, 0.00607967912880136};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 155:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573521, -0.0188672067041848, 0.00653579212171038, 0.0092430058593742, 0.0141189246665007, 0.0, -0.111619900146189, -0.0031570875323494, -0.0541327746929101, -0.060150596109686, -0.00894802256177143, -0.0025208197798293, -0.0276525235907967, 0.000650872868404634, 0.0360750360750361, -0.0188697013765088, 0.00112734487734487, 0.0374251899332651, 0.0199288301876619, 0.000563672438672437, 0.0, 0.0, 0.0593544669060615, 0.0, 0.0167212267476002, 0.0032180015879692, 0.0, -0.0043174021814409, 0.0224338798048931, 0.0463017761206981, 0.0, -0.00747795993496438, 0.018708742786244, 0.043183015465546, 0.0461140862656136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0620433733855302, 0.0, 0.0, 0.0174787403314969, 0.0363288795677471, 0.0, 0.0, -0.00451299134777145, -0.00938007637015062, -0.0119136893323295, 0.0, 0.0, -0.00781673030845887, -0.0162467688519772, -0.020635115229186, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 156:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573519, 0.0188672067041847, 0.00653579212171046, 0.00924300585937428, 0.0141189246665008, 0.0, 0.111619900146189, -0.00315708753234942, -0.0541327746929101, -0.0601505961096861, 0.00894802256177154, -0.00252081977982933, -0.0276525235907967, -0.000650872868404596, -0.0360750360750361, 0.0188697013765088, 0.00112734487734489, 0.0374251899332651, 0.019928830187662, 0.000563672438672452, 0.0, 0.0, -0.0593544669060614, 0.0, 0.0167212267476002, 0.00321800158796926, 0.0, 0.00431740218144093, -0.0224338798048931, -0.0463017761206981, 0.0, -0.00747795993496437, 0.018708742786244, 0.0431830154655461, 0.0461140862656137, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0620433733855302, 0.0, 0.0, 0.017478740331497, 0.0363288795677472, 0.0, 0.0, 0.00451299134777144, 0.00938007637015066, 0.0119136893323295, 0.0, 0.0, -0.00781673030845888, -0.0162467688519772, -0.0206351152291861, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 157:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, 0.0, -0.0348575579824556, 0.0585390371093695, -0.0282378493330015, 0.0, 0.0, 0.00631417506469884, -0.0206220094068228, 0.083846285486229, 0.0, 0.0, -0.00679184789949389, 0.0, 0.0, 0.0, 0.0, 0.00151870335961078, -0.0616465147138344, -0.0319414381914382, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0450520222315696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0100739384233621, -0.0329013451166065, -0.0643935438844155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0565115904387178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01263637577376, 0.027513486972248, 0.0303983956440068};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 158:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769577, -0.0377344134083696, -0.0217859737390348, -0.0523770332031201, 0.0423567739995024, 0.0546823600997146, 0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, 0.0417574386216002, 0.0285692908380655, -0.00921750786359888, 0.0273366604729936, -0.00789141414141414, -0.0248527774227189, 0.0187890812890813, -0.00347132196482459, -0.0143487577351167, -0.015031265031265, -0.0557374224920008, -0.00491557862111906, -0.0241814494802473, -0.0197335053839337, -0.00928957041533348, -0.00241350119097693, -0.0394205194526234, -0.0158304746652834, -0.000623163327913708, 0.00712335017241507, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957583, 0.00540074884191869, 0.0, -0.0510586685671264, 0.00466099742173249, -0.0405265617908061, -0.0143871467126537, 0.00367664434877214, -0.0114170653756726, -0.00564541633388697, -0.00155366580724415, 0.00100913554354854, 0.010317557614593, 0.00571843474677502, 0.00240692871881142, 0.000260557676948618, -0.000850977809452114, 0.0127646671417816, 0.00737991258440983, 0.00347410235931509, 0.000902598269554292, -0.00049131226736157, -0.000868525589828748};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 159:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573517, 0.0, -0.0217859737390347, 0.00308100195312484, -0.127070321998507, 0.0, 0.0, 0.0473563129852413, 0.0257775117585285, 0.0127592173566001, 0.0, -0.0352914769176103, 0.0509388592462045, 0.0, 0.0, 0.0, 0.00225468975468975, -0.00943765659186684, -0.0143487577351166, -0.0129644660894661, 0.0836061337380012, 0.0, 0.0, 0.0477758551400501, 0.00928957041533348, -0.0144810071458617, 0.0, 0.0, 0.0, 0.0, -0.0325134964536671, -0.0141250354327105, -0.00215870109072047, 0.00411266813957584, 0.00540074884191876, 0.0, 0.0765880028506896, -0.00699149613259875, 0.0, 0.0, 0.0, -0.0228341307513453, -0.011290832667774, -0.00310733161448838, 0.00201827108709704, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127646671417816, 0.00737991258440981, 0.00347410235931506, 0.000902598269554269, -0.000491312267361589, -0.000868525589828803};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 160:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.0787556170769578, 0.0377344134083695, -0.0217859737390348, -0.0523770332031201, 0.0423567739995023, -0.0546823600997146, -0.0446479600584757, 0.0, 0.0257775117585286, 0.0291639253865144, -0.0417574386216002, 0.0285692908380655, -0.00921750786359893, -0.0273366604729936, 0.00789141414141414, 0.0248527774227189, 0.0187890812890813, -0.00347132196482458, -0.0143487577351166, -0.015031265031265, -0.0557374224920008, 0.00491557862111907, 0.0241814494802472, -0.0197335053839337, -0.00928957041533349, -0.00241350119097694, 0.0394205194526234, 0.0158304746652834, 0.000623163327913706, -0.00712335017241508, -0.0325134964536671, -0.0141250354327105, -0.00215870109072045, 0.00411266813957581, 0.00540074884191868, 0.0, -0.0510586685671264, 0.0046609974217325, 0.0405265617908061, 0.0143871467126537, -0.00367664434877216, -0.0114170653756727, -0.00564541633388695, -0.00155366580724416, 0.00100913554354855, -0.010317557614593, -0.00571843474677502, -0.00240692871881143, -0.000260557676948629, 0.000850977809452107, 0.0127646671417816, 0.00737991258440984, 0.00347410235931506, 0.000902598269554289, -0.000491312267361559, -0.000868525589828739};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 161:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, -0.0188672067041847, 0.0108929868695175, 0.00308100195312472, 0.0141189246665008, -0.109364720199429, 0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, -0.00894802256177148, -0.0277290175781224, 0.00145539597846298, -0.00585785581564149, 0.0383297258297258, -0.0124263887113595, 0.0191648629148628, 0.0348216984596467, 0.00717437886755836, -0.0129644660894661, 0.0, 0.0589869434534289, -0.00659494076734012, 0.00727023882565974, 0.0148633126645335, -0.0040225019849616, 0.0506835250105158, -0.00431740218144091, -0.00810112326287806, 0.00356167508620759, 0.0650269929073342, -0.00166176887443651, -0.0115130724838425, -0.00205633406978793, 0.00540074884191875, 0.0, 0.0, 0.0, 0.0607898426862092, -0.0123318400394175, 0.0013787416307896, 0.0399597288148543, 0.00303983956440066, -0.00427258096992151, 0.00100913554354852, -0.0154763364218895, -0.00302740663064561, 0.000902598269554317, 0.000781673030845898, -0.000425488904726052, -0.031911667854454, -0.00776832903622089, 0.000868525589828735, 0.00180519653910857, 0.000245656133680779, -0.000868525589828785};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 162:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {-0.0214788046573523, 0.0188672067041847, 0.0108929868695173, 0.00308100195312461, 0.0141189246665007, 0.109364720199429, -0.0223239800292378, -0.0789271883087356, -0.0128887558792643, 0.0127592173566001, 0.00894802256177146, -0.0277290175781224, 0.00145539597846298, 0.00585785581564147, -0.0383297258297259, 0.0124263887113595, 0.0191648629148629, 0.0348216984596467, 0.00717437886755832, -0.0129644660894661, 0.0, -0.0589869434534289, 0.00659494076734013, 0.00727023882565983, 0.0148633126645336, -0.00402250198496153, -0.0506835250105158, 0.00431740218144093, 0.00810112326287806, -0.00356167508620756, 0.0650269929073343, -0.00166176887443652, -0.0115130724838424, -0.00205633406978791, 0.00540074884191871, 0.0, 0.0, 0.0, -0.0607898426862092, 0.0123318400394175, -0.00137874163078959, 0.0399597288148543, 0.00303983956440068, -0.00427258096992146, 0.00100913554354852, 0.0154763364218896, 0.00302740663064561, -0.000902598269554309, -0.000781673030845882, 0.000425488904726061, -0.031911667854454, -0.00776832903622087, 0.000868525589828761, 0.00180519653910858, 0.000245656133680792, -0.000868525589828766};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 163:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.078755617076958, 0.0, 0.0435719474780694, -0.0523770332031201, -0.0282378493330015, 0.0, 0.0, 0.0631417506469885, -0.0515550235170571, 0.0291639253865144, 0.0, -0.00672218607954477, 0.000970263985642002, 0.0, 0.0, 0.0, -0.0601250601250601, -0.0125835421224891, 0.0286975154702333, -0.015031265031265, 0.0, 0.0, 0.0, -0.0436214329539588, 0.0111474844984002, -0.00160900079398465, 0.0, 0.0, 0.0, 0.0, -0.0650269929073343, 0.031573608614294, -0.00287826812096059, -0.00822533627915167, 0.00540074884191872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0532796384198057, 0.018239037386404, -0.00466099742173253, 0.000672757029032364, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425488904726053, -0.00388416451811041, -0.00347410235931508, 0.00120346435940574, 0.000982624534723167, -0.000868525589828753};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 164:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, -0.188672067041848, -0.108929868695174, -0.0770250488281178, -0.0705946233325038, -0.0546823600997147, -0.0446479600584758, -0.0315708753234942, -0.0257775117585285, -0.0182274533665715, 0.0894802256177148, -0.0151249186789758, -0.0130985638061669, 0.0585785581564149, -0.028183621933622, 0.0690354928408859, 0.0744047619047619, 0.00976309302606916, 0.039857660375324, 0.0597492784992785, 0.0, 0.0737336793167861, 0.0659494076734016, 0.036351194128299, 0.00743165633226677, 0.0345935170706695, -0.0120675059548847, 0.0431740218144092, 0.0155790831978424, -0.0254405363300539, -0.0232239260383337, 0.0465295284842228, 0.0251848460584054, -0.0146881004984851, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, 0.0678251202167962, -0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.00908221989193679, 0.0, -0.0111004909790339, -0.00902598269554285, -0.00234501909253765, 0.0034039112378084, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598858, 0.0019652490694463, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 165:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.188672067041848, -0.108929868695174, -0.0770250488281179, -0.0705946233325039, 0.0546823600997147, 0.0446479600584757, -0.0315708753234942, -0.0257775117585286, -0.0182274533665715, -0.0894802256177148, -0.0151249186789759, -0.0130985638061668, -0.0585785581564149, 0.028183621933622, -0.0690354928408859, 0.0744047619047619, 0.00976309302606915, 0.039857660375324, 0.0597492784992785, 0.0, -0.0737336793167861, -0.0659494076734016, 0.036351194128299, 0.00743165633226679, 0.0345935170706696, 0.0120675059548846, -0.0431740218144092, -0.0155790831978425, 0.0254405363300538, -0.0232239260383337, 0.0465295284842228, 0.0251848460584053, -0.014688100498485, -0.0328199352701215, 0.0, 0.0, 0.0, 0.0, -0.0678251202167962, 0.0137874163078956, 0.0, 0.0334382352084074, 0.0194208225905522, -0.0090822198919368, 0.0, 0.0111004909790338, 0.00902598269554286, 0.00234501909253764, -0.00340391123780842, 0.0, -0.0213629048496074, -0.0191075629762328, -0.00812338442598857, 0.00196524906944628, 0.00607967912880138};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 166:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.217859737390348, -0.0770250488281177, 0.0, 0.0, 0.0, -0.0947126259704828, 0.0515550235170571, -0.0182274533665715, 0.0, -0.0907495120738552, 0.0232863356554078, 0.0, 0.0, 0.0, -0.0946969696969697, -0.0227805503941613, -0.079715320750648, 0.0597492784992784, 0.0, 0.0, 0.0, -0.0727023882565981, -0.0483057661597341, 0.0144810071458617, 0.0, 0.0, 0.0, 0.0, 0.0464478520766673, -0.0781031370985168, 0.0431740218144092, 0.0293762009969702, -0.0328199352701214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0668764704168148, 0.0310733161448835, -0.00605481326129118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0427258096992147, 0.00694820471863014, -0.0108311792346515, -0.0039304981388926, 0.00607967912880134};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 167:
      {
        
      // Array of basisvalues
      double basisvalues[56] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[10] = 1.66666666666667*tmp0*basisvalues[4] - 0.666666666666667*tmp1*basisvalues[1];
      basisvalues[20] = 1.75*tmp0*basisvalues[10] - 0.75*tmp1*basisvalues[4];
      basisvalues[35] = 1.8*tmp0*basisvalues[20] - 0.8*tmp1*basisvalues[10];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[11] = (0.5*(2.0 + 3.0*Y + Z) + 2.0*(1.0 + Y))*basisvalues[4];
      basisvalues[21] = (0.5*(2.0 + 3.0*Y + Z) + 3.0*(1.0 + Y))*basisvalues[10];
      basisvalues[36] = (0.5*(2.0 + 3.0*Y + Z) + 4.0*(1.0 + Y))*basisvalues[20];
      basisvalues[7] = (1.66666666666667*tmp2 + 0.111111111111111*tmp3)*basisvalues[2] - 0.555555555555556*tmp4*basisvalues[0];
      basisvalues[16] = (1.75*tmp2 + 0.05*tmp3)*basisvalues[7] - 0.7*tmp4*basisvalues[2];
      basisvalues[30] = (1.8*tmp2 + 0.0285714285714286*tmp3)*basisvalues[16] - 0.771428571428571*tmp4*basisvalues[7];
      basisvalues[50] = (1.83333333333333*tmp2 + 0.0185185185185185*tmp3)*basisvalues[30] - 0.814814814814815*tmp4*basisvalues[16];
      basisvalues[13] = (2.1*tmp2 + 0.54*tmp3)*basisvalues[5] - 0.56*tmp4*basisvalues[1];
      basisvalues[26] = (2.0*tmp2 + 0.285714285714286*tmp3)*basisvalues[13] - 0.714285714285714*tmp4*basisvalues[5];
      basisvalues[45] = (1.96428571428571*tmp2 + 0.178571428571429*tmp3)*basisvalues[26] - 0.785714285714286*tmp4*basisvalues[13];
      basisvalues[23] = (2.57142857142857*tmp2 + 1.02040816326531*tmp3)*basisvalues[11] - 0.551020408163265*tmp4*basisvalues[4];
      basisvalues[41] = (2.29166666666667*tmp2 + 0.578703703703704*tmp3)*basisvalues[23] - 0.712962962962963*tmp4*basisvalues[11];
      basisvalues[38] = (3.05555555555556*tmp2 + 1.51234567901235*tmp3)*basisvalues[21] - 0.54320987654321*tmp4*basisvalues[10];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[17] = (4.0*Z + 3.0)*basisvalues[7];
      basisvalues[31] = (5.0*Z + 4.0)*basisvalues[16];
      basisvalues[51] = (6.0*Z + 5.0)*basisvalues[30];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[14] = (4.0*Z + 3.0)*basisvalues[5];
      basisvalues[27] = (5.0*Z + 4.0)*basisvalues[13];
      basisvalues[46] = (6.0*Z + 5.0)*basisvalues[26];
      basisvalues[12] = (4.0*Z + 3.0)*basisvalues[4];
      basisvalues[24] = (5.0*Z + 4.0)*basisvalues[11];
      basisvalues[42] = (6.0*Z + 5.0)*basisvalues[23];
      basisvalues[22] = (5.0*Z + 4.0)*basisvalues[10];
      basisvalues[39] = (6.0*Z + 5.0)*basisvalues[21];
      basisvalues[37] = (6.0*Z + 5.0)*basisvalues[20];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[19] = basisvalues[9]*(0.155555555555556 + 1.86666666666667*Z) - 0.711111111111111*basisvalues[3];
      basisvalues[34] = basisvalues[19]*(0.09375 + 1.875*Z) - 0.78125*basisvalues[9];
      basisvalues[55] = basisvalues[34]*(0.0628571428571429 + 1.88571428571429*Z) - 0.822857142857143*basisvalues[19];
      basisvalues[18] = basisvalues[8]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[2];
      basisvalues[33] = basisvalues[18]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[8];
      basisvalues[54] = basisvalues[33]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[18];
      basisvalues[32] = basisvalues[17]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[7];
      basisvalues[53] = basisvalues[32]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[17];
      basisvalues[52] = basisvalues[31]*(1.76 + 3.3*Z) - 0.54*basisvalues[16];
      basisvalues[15] = basisvalues[6]*(0.777777777777778 + 2.33333333333333*Z) - 0.555555555555556*basisvalues[1];
      basisvalues[29] = basisvalues[15]*(0.428571428571429 + 2.14285714285714*Z) - 0.714285714285714*basisvalues[6];
      basisvalues[49] = basisvalues[29]*(0.275 + 2.0625*Z) - 0.7875*basisvalues[15];
      basisvalues[28] = basisvalues[14]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[5];
      basisvalues[48] = basisvalues[28]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[14];
      basisvalues[47] = basisvalues[27]*(1.76 + 3.3*Z) - 0.54*basisvalues[13];
      basisvalues[25] = basisvalues[12]*(1.265625 + 2.8125*Z) - 0.546875*basisvalues[4];
      basisvalues[44] = basisvalues[25]*(0.733333333333333 + 2.44444444444444*Z) - 0.711111111111111*basisvalues[12];
      basisvalues[43] = basisvalues[24]*(1.76 + 3.3*Z) - 0.54*basisvalues[11];
      basisvalues[40] = basisvalues[22]*(1.76 + 3.3*Z) - 0.54*basisvalues[10];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[19] *= std::sqrt(2.25);
      basisvalues[34] *= std::sqrt(2.75);
      basisvalues[55] *= std::sqrt(3.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[18] *= std::sqrt(4.5);
      basisvalues[33] *= std::sqrt(5.5);
      basisvalues[54] *= std::sqrt(6.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[17] *= std::sqrt(6.75);
      basisvalues[32] *= std::sqrt(8.25);
      basisvalues[53] *= std::sqrt(9.75);
      basisvalues[16] *= std::sqrt(9.0);
      basisvalues[31] *= std::sqrt(11.0);
      basisvalues[52] *= std::sqrt(13.0);
      basisvalues[30] *= std::sqrt(13.75);
      basisvalues[51] *= std::sqrt(16.25);
      basisvalues[50] *= std::sqrt(19.5);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[15] *= std::sqrt(13.5);
      basisvalues[29] *= std::sqrt(16.5);
      basisvalues[49] *= std::sqrt(19.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[14] *= std::sqrt(20.25);
      basisvalues[28] *= std::sqrt(24.75);
      basisvalues[48] *= std::sqrt(29.25);
      basisvalues[13] *= std::sqrt(27.0);
      basisvalues[27] *= std::sqrt(33.0);
      basisvalues[47] *= std::sqrt(39.0);
      basisvalues[26] *= std::sqrt(41.25);
      basisvalues[46] *= std::sqrt(48.75);
      basisvalues[45] *= std::sqrt(58.5);
      basisvalues[4] *= std::sqrt(26.25);
      basisvalues[12] *= std::sqrt(33.75);
      basisvalues[25] *= std::sqrt(41.25);
      basisvalues[44] *= std::sqrt(48.75);
      basisvalues[11] *= std::sqrt(45.0);
      basisvalues[24] *= std::sqrt(55.0);
      basisvalues[43] *= std::sqrt(65.0);
      basisvalues[23] *= std::sqrt(68.75);
      basisvalues[42] *= std::sqrt(81.25);
      basisvalues[41] *= std::sqrt(97.5);
      basisvalues[10] *= std::sqrt(63.0);
      basisvalues[22] *= std::sqrt(77.0);
      basisvalues[40] *= std::sqrt(91.0);
      basisvalues[21] *= std::sqrt(96.25);
      basisvalues[39] *= std::sqrt(113.75);
      basisvalues[38] *= std::sqrt(136.5);
      basisvalues[20] *= std::sqrt(123.75);
      basisvalues[37] *= std::sqrt(146.25);
      basisvalues[36] *= std::sqrt(175.5);
      basisvalues[35] *= std::sqrt(214.5);
      
      // Table(s) of coefficients
      static const double coefficients0[56] = \
      {0.107394023286761, 0.0, 0.0, 0.231075146484353, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109364720199429, 0.0, 0.0100832791193172, -0.093145342621631, 0.0, 0.0, 0.0, -0.00450937950937958, -0.104139658944738, 0.0, -0.0924422799422799, 0.0, 0.0, 0.0, 0.0, -0.066884906990401, -0.0579240285834466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299118397398575, -0.0647610327216138, 0.0, 0.0835038859404355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0699149613259878, 0.0242192530451648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312669212338355, 0.0270779480866287, 0.0, -0.0182390373864041};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 56; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 168; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 168; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[729];
    for (unsigned int r = 0; r < 729; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 168; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 28:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 29:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 30:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 31:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 32:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 33:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 34:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 35:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 36:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 37:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 38:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 39:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 40:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 41:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 42:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 43:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 44:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 45:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 46:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 47:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 48:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 49:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 50:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 51:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 52:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 53:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 54:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 55:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 56:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 57:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 58:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 59:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 60:
      {
        y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 61:
      {
        y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 62:
      {
        y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 63:
      {
        y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 64:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 65:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 66:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 67:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 68:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 69:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 70:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 71:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 72:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 73:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 74:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 75:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 76:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 77:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 78:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 79:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 80:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 81:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 82:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 83:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 84:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 85:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 86:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 87:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 88:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 89:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 90:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 91:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 92:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 93:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 94:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 95:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 96:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 97:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 98:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 99:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 100:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 101:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 102:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 103:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 104:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 105:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 106:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 107:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 108:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 109:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 110:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 111:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 112:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 113:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 114:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 115:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 116:
      {
        y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 117:
      {
        y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 118:
      {
        y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 119:
      {
        y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 120:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 121:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 122:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 123:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 124:
      {
        y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 125:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 126:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 127:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 128:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 129:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 130:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 131:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 132:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 133:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 134:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 135:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 136:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
      y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 137:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
      y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 138:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
      y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 139:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
      y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 140:
      {
        y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 141:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 142:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 143:
      {
        y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 144:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 145:
      {
        y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 146:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 147:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 148:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 149:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 150:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 151:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 152:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 153:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 154:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 155:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 156:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 157:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 158:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 159:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 160:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 161:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 162:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 163:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 164:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 165:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 166:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 167:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
      y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
    y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[28] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[29] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[30] = vals[0];
    y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[31] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[32] = vals[0];
    y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[33] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[34] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[35] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[36] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[37] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[38] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[39] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[40] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[41] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[42] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[43] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[44] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[45] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[46] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[47] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[48] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[49] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[50] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[51] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[52] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[53] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[54] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[55] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[56] = vals[1];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[57] = vals[1];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[58] = vals[1];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[59] = vals[1];
    y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[60] = vals[1];
    y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[61] = vals[1];
    y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[62] = vals[1];
    y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[63] = vals[1];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[64] = vals[1];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[65] = vals[1];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[66] = vals[1];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[67] = vals[1];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[68] = vals[1];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[69] = vals[1];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[70] = vals[1];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[71] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[72] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[73] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[74] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[75] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[76] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[77] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[78] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[79] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[80] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[81] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[82] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[83] = vals[1];
    y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[84] = vals[1];
    y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[85] = vals[1];
    y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[86] = vals[1];
    y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[87] = vals[1];
    y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[88] = vals[1];
    y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[89] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[90] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[91] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[92] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[93] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[94] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[95] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[96] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[97] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[98] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[99] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[100] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[101] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[102] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[103] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[104] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[105] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[106] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[107] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[108] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[109] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[110] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[111] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[112] = vals[2];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[113] = vals[2];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[114] = vals[2];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[115] = vals[2];
    y[0] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[116] = vals[2];
    y[0] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[117] = vals[2];
    y[0] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[118] = vals[2];
    y[0] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[119] = vals[2];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[120] = vals[2];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[121] = vals[2];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[122] = vals[2];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[123] = vals[2];
    y[0] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[124] = vals[2];
    y[0] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[125] = vals[2];
    y[0] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[126] = vals[2];
    y[0] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[127] = vals[2];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[128] = vals[2];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[129] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[130] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[131] = vals[2];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[132] = vals[2];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[133] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[134] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[135] = vals[2];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    y[2] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[136] = vals[2];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    y[2] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[137] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    y[2] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[138] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    y[2] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[139] = vals[2];
    y[0] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[140] = vals[2];
    y[0] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[141] = vals[2];
    y[0] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[142] = vals[2];
    y[0] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[143] = vals[2];
    y[0] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[144] = vals[2];
    y[0] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[145] = vals[2];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[146] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[147] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[148] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[149] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[150] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[151] = vals[2];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[152] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[153] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[154] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[155] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[156] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[157] = vals[2];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[158] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[159] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[160] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[161] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[162] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[163] = vals[2];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[164] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[165] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[166] = vals[2];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    y[2] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[167] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[56];
    vertex_values[4] = dof_values[57];
    vertex_values[7] = dof_values[58];
    vertex_values[10] = dof_values[59];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[112];
    vertex_values[5] = dof_values[113];
    vertex_values[8] = dof_values[114];
    vertex_values[11] = dof_values[115];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0();
        break;
      }
    case 2:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 5, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 56*num_global_entities[3];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 56;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 56;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 56*c.entity_indices[3][0];
    dofs[1] = 56*c.entity_indices[3][0] + 1;
    dofs[2] = 56*c.entity_indices[3][0] + 2;
    dofs[3] = 56*c.entity_indices[3][0] + 3;
    dofs[4] = 56*c.entity_indices[3][0] + 4;
    dofs[5] = 56*c.entity_indices[3][0] + 5;
    dofs[6] = 56*c.entity_indices[3][0] + 6;
    dofs[7] = 56*c.entity_indices[3][0] + 7;
    dofs[8] = 56*c.entity_indices[3][0] + 8;
    dofs[9] = 56*c.entity_indices[3][0] + 9;
    dofs[10] = 56*c.entity_indices[3][0] + 10;
    dofs[11] = 56*c.entity_indices[3][0] + 11;
    dofs[12] = 56*c.entity_indices[3][0] + 12;
    dofs[13] = 56*c.entity_indices[3][0] + 13;
    dofs[14] = 56*c.entity_indices[3][0] + 14;
    dofs[15] = 56*c.entity_indices[3][0] + 15;
    dofs[16] = 56*c.entity_indices[3][0] + 16;
    dofs[17] = 56*c.entity_indices[3][0] + 17;
    dofs[18] = 56*c.entity_indices[3][0] + 18;
    dofs[19] = 56*c.entity_indices[3][0] + 19;
    dofs[20] = 56*c.entity_indices[3][0] + 20;
    dofs[21] = 56*c.entity_indices[3][0] + 21;
    dofs[22] = 56*c.entity_indices[3][0] + 22;
    dofs[23] = 56*c.entity_indices[3][0] + 23;
    dofs[24] = 56*c.entity_indices[3][0] + 24;
    dofs[25] = 56*c.entity_indices[3][0] + 25;
    dofs[26] = 56*c.entity_indices[3][0] + 26;
    dofs[27] = 56*c.entity_indices[3][0] + 27;
    dofs[28] = 56*c.entity_indices[3][0] + 28;
    dofs[29] = 56*c.entity_indices[3][0] + 29;
    dofs[30] = 56*c.entity_indices[3][0] + 30;
    dofs[31] = 56*c.entity_indices[3][0] + 31;
    dofs[32] = 56*c.entity_indices[3][0] + 32;
    dofs[33] = 56*c.entity_indices[3][0] + 33;
    dofs[34] = 56*c.entity_indices[3][0] + 34;
    dofs[35] = 56*c.entity_indices[3][0] + 35;
    dofs[36] = 56*c.entity_indices[3][0] + 36;
    dofs[37] = 56*c.entity_indices[3][0] + 37;
    dofs[38] = 56*c.entity_indices[3][0] + 38;
    dofs[39] = 56*c.entity_indices[3][0] + 39;
    dofs[40] = 56*c.entity_indices[3][0] + 40;
    dofs[41] = 56*c.entity_indices[3][0] + 41;
    dofs[42] = 56*c.entity_indices[3][0] + 42;
    dofs[43] = 56*c.entity_indices[3][0] + 43;
    dofs[44] = 56*c.entity_indices[3][0] + 44;
    dofs[45] = 56*c.entity_indices[3][0] + 45;
    dofs[46] = 56*c.entity_indices[3][0] + 46;
    dofs[47] = 56*c.entity_indices[3][0] + 47;
    dofs[48] = 56*c.entity_indices[3][0] + 48;
    dofs[49] = 56*c.entity_indices[3][0] + 49;
    dofs[50] = 56*c.entity_indices[3][0] + 50;
    dofs[51] = 56*c.entity_indices[3][0] + 51;
    dofs[52] = 56*c.entity_indices[3][0] + 52;
    dofs[53] = 56*c.entity_indices[3][0] + 53;
    dofs[54] = 56*c.entity_indices[3][0] + 54;
    dofs[55] = 56*c.entity_indices[3][0] + 55;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
      dofs[28] = 28;
      dofs[29] = 29;
      dofs[30] = 30;
      dofs[31] = 31;
      dofs[32] = 32;
      dofs[33] = 33;
      dofs[34] = 34;
      dofs[35] = 35;
      dofs[36] = 36;
      dofs[37] = 37;
      dofs[38] = 38;
      dofs[39] = 39;
      dofs[40] = 40;
      dofs[41] = 41;
      dofs[42] = 42;
      dofs[43] = 43;
      dofs[44] = 44;
      dofs[45] = 45;
      dofs[46] = 46;
      dofs[47] = 47;
      dofs[48] = 48;
      dofs[49] = 49;
      dofs[50] = 50;
      dofs[51] = 51;
      dofs[52] = 52;
      dofs[53] = 53;
      dofs[54] = 54;
      dofs[55] = 55;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
    dof_coordinates[12] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[13] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[14] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[15] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[16] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[17] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[18] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[19] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[20] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[21] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    dof_coordinates[22] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    dof_coordinates[23] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    dof_coordinates[24] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[25] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[26] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[27] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[28] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[29] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[30] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[31] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[32] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[33] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    dof_coordinates[34] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    dof_coordinates[35] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    dof_coordinates[36] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[37] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[38] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[39] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[40] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[41] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[42] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[43] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[44] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[45] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    dof_coordinates[46] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    dof_coordinates[47] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    dof_coordinates[48] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    dof_coordinates[49] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    dof_coordinates[50] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    dof_coordinates[51] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    dof_coordinates[52] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    dof_coordinates[53] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    dof_coordinates[54] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    dof_coordinates[55] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    dof_coordinates[56] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    dof_coordinates[57] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    dof_coordinates[58] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    dof_coordinates[59] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    dof_coordinates[60] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    dof_coordinates[61] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    dof_coordinates[62] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    dof_coordinates[63] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    dof_coordinates[64] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    dof_coordinates[65] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    dof_coordinates[66] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    dof_coordinates[67] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    dof_coordinates[68] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    dof_coordinates[69] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    dof_coordinates[70] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    dof_coordinates[71] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    dof_coordinates[72] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    dof_coordinates[73] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    dof_coordinates[74] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    dof_coordinates[75] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    dof_coordinates[76] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    dof_coordinates[77] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    dof_coordinates[78] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    dof_coordinates[79] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    dof_coordinates[80] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    dof_coordinates[81] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    dof_coordinates[82] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    dof_coordinates[83] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    dof_coordinates[84] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[85] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[86] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[87] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[88] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[89] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[90] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[91] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[92] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[93] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[94] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[95] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[96] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[97] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[98] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[99] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[100] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[101] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[102] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[103] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[104] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[105] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[106] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[107] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[108] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[109] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[110] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[111] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[112] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[113] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[114] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[115] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[116] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[117] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[118] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[119] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[120] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[121] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[122] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[123] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[124] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[125] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[126] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[127] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[128] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[129] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[130] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[131] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[132] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[133] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[134] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[135] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[136] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[137] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[138] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[139] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[140] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[141] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[142] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[143] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[144] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[145] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[146] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[147] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[148] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[149] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[150] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[151] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[152] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[153] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[154] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[155] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[156] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[157] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[158] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[159] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[160] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[161] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[162] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[163] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[164] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[165] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[166] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[167] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 5, 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 168*num_global_entities[3];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 168;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 168;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + 56*c.entity_indices[3][0];
    dofs[1] = offset + 56*c.entity_indices[3][0] + 1;
    dofs[2] = offset + 56*c.entity_indices[3][0] + 2;
    dofs[3] = offset + 56*c.entity_indices[3][0] + 3;
    dofs[4] = offset + 56*c.entity_indices[3][0] + 4;
    dofs[5] = offset + 56*c.entity_indices[3][0] + 5;
    dofs[6] = offset + 56*c.entity_indices[3][0] + 6;
    dofs[7] = offset + 56*c.entity_indices[3][0] + 7;
    dofs[8] = offset + 56*c.entity_indices[3][0] + 8;
    dofs[9] = offset + 56*c.entity_indices[3][0] + 9;
    dofs[10] = offset + 56*c.entity_indices[3][0] + 10;
    dofs[11] = offset + 56*c.entity_indices[3][0] + 11;
    dofs[12] = offset + 56*c.entity_indices[3][0] + 12;
    dofs[13] = offset + 56*c.entity_indices[3][0] + 13;
    dofs[14] = offset + 56*c.entity_indices[3][0] + 14;
    dofs[15] = offset + 56*c.entity_indices[3][0] + 15;
    dofs[16] = offset + 56*c.entity_indices[3][0] + 16;
    dofs[17] = offset + 56*c.entity_indices[3][0] + 17;
    dofs[18] = offset + 56*c.entity_indices[3][0] + 18;
    dofs[19] = offset + 56*c.entity_indices[3][0] + 19;
    dofs[20] = offset + 56*c.entity_indices[3][0] + 20;
    dofs[21] = offset + 56*c.entity_indices[3][0] + 21;
    dofs[22] = offset + 56*c.entity_indices[3][0] + 22;
    dofs[23] = offset + 56*c.entity_indices[3][0] + 23;
    dofs[24] = offset + 56*c.entity_indices[3][0] + 24;
    dofs[25] = offset + 56*c.entity_indices[3][0] + 25;
    dofs[26] = offset + 56*c.entity_indices[3][0] + 26;
    dofs[27] = offset + 56*c.entity_indices[3][0] + 27;
    dofs[28] = offset + 56*c.entity_indices[3][0] + 28;
    dofs[29] = offset + 56*c.entity_indices[3][0] + 29;
    dofs[30] = offset + 56*c.entity_indices[3][0] + 30;
    dofs[31] = offset + 56*c.entity_indices[3][0] + 31;
    dofs[32] = offset + 56*c.entity_indices[3][0] + 32;
    dofs[33] = offset + 56*c.entity_indices[3][0] + 33;
    dofs[34] = offset + 56*c.entity_indices[3][0] + 34;
    dofs[35] = offset + 56*c.entity_indices[3][0] + 35;
    dofs[36] = offset + 56*c.entity_indices[3][0] + 36;
    dofs[37] = offset + 56*c.entity_indices[3][0] + 37;
    dofs[38] = offset + 56*c.entity_indices[3][0] + 38;
    dofs[39] = offset + 56*c.entity_indices[3][0] + 39;
    dofs[40] = offset + 56*c.entity_indices[3][0] + 40;
    dofs[41] = offset + 56*c.entity_indices[3][0] + 41;
    dofs[42] = offset + 56*c.entity_indices[3][0] + 42;
    dofs[43] = offset + 56*c.entity_indices[3][0] + 43;
    dofs[44] = offset + 56*c.entity_indices[3][0] + 44;
    dofs[45] = offset + 56*c.entity_indices[3][0] + 45;
    dofs[46] = offset + 56*c.entity_indices[3][0] + 46;
    dofs[47] = offset + 56*c.entity_indices[3][0] + 47;
    dofs[48] = offset + 56*c.entity_indices[3][0] + 48;
    dofs[49] = offset + 56*c.entity_indices[3][0] + 49;
    dofs[50] = offset + 56*c.entity_indices[3][0] + 50;
    dofs[51] = offset + 56*c.entity_indices[3][0] + 51;
    dofs[52] = offset + 56*c.entity_indices[3][0] + 52;
    dofs[53] = offset + 56*c.entity_indices[3][0] + 53;
    dofs[54] = offset + 56*c.entity_indices[3][0] + 54;
    dofs[55] = offset + 56*c.entity_indices[3][0] + 55;
    offset += 56*num_global_entities[3];
    dofs[56] = offset + 56*c.entity_indices[3][0];
    dofs[57] = offset + 56*c.entity_indices[3][0] + 1;
    dofs[58] = offset + 56*c.entity_indices[3][0] + 2;
    dofs[59] = offset + 56*c.entity_indices[3][0] + 3;
    dofs[60] = offset + 56*c.entity_indices[3][0] + 4;
    dofs[61] = offset + 56*c.entity_indices[3][0] + 5;
    dofs[62] = offset + 56*c.entity_indices[3][0] + 6;
    dofs[63] = offset + 56*c.entity_indices[3][0] + 7;
    dofs[64] = offset + 56*c.entity_indices[3][0] + 8;
    dofs[65] = offset + 56*c.entity_indices[3][0] + 9;
    dofs[66] = offset + 56*c.entity_indices[3][0] + 10;
    dofs[67] = offset + 56*c.entity_indices[3][0] + 11;
    dofs[68] = offset + 56*c.entity_indices[3][0] + 12;
    dofs[69] = offset + 56*c.entity_indices[3][0] + 13;
    dofs[70] = offset + 56*c.entity_indices[3][0] + 14;
    dofs[71] = offset + 56*c.entity_indices[3][0] + 15;
    dofs[72] = offset + 56*c.entity_indices[3][0] + 16;
    dofs[73] = offset + 56*c.entity_indices[3][0] + 17;
    dofs[74] = offset + 56*c.entity_indices[3][0] + 18;
    dofs[75] = offset + 56*c.entity_indices[3][0] + 19;
    dofs[76] = offset + 56*c.entity_indices[3][0] + 20;
    dofs[77] = offset + 56*c.entity_indices[3][0] + 21;
    dofs[78] = offset + 56*c.entity_indices[3][0] + 22;
    dofs[79] = offset + 56*c.entity_indices[3][0] + 23;
    dofs[80] = offset + 56*c.entity_indices[3][0] + 24;
    dofs[81] = offset + 56*c.entity_indices[3][0] + 25;
    dofs[82] = offset + 56*c.entity_indices[3][0] + 26;
    dofs[83] = offset + 56*c.entity_indices[3][0] + 27;
    dofs[84] = offset + 56*c.entity_indices[3][0] + 28;
    dofs[85] = offset + 56*c.entity_indices[3][0] + 29;
    dofs[86] = offset + 56*c.entity_indices[3][0] + 30;
    dofs[87] = offset + 56*c.entity_indices[3][0] + 31;
    dofs[88] = offset + 56*c.entity_indices[3][0] + 32;
    dofs[89] = offset + 56*c.entity_indices[3][0] + 33;
    dofs[90] = offset + 56*c.entity_indices[3][0] + 34;
    dofs[91] = offset + 56*c.entity_indices[3][0] + 35;
    dofs[92] = offset + 56*c.entity_indices[3][0] + 36;
    dofs[93] = offset + 56*c.entity_indices[3][0] + 37;
    dofs[94] = offset + 56*c.entity_indices[3][0] + 38;
    dofs[95] = offset + 56*c.entity_indices[3][0] + 39;
    dofs[96] = offset + 56*c.entity_indices[3][0] + 40;
    dofs[97] = offset + 56*c.entity_indices[3][0] + 41;
    dofs[98] = offset + 56*c.entity_indices[3][0] + 42;
    dofs[99] = offset + 56*c.entity_indices[3][0] + 43;
    dofs[100] = offset + 56*c.entity_indices[3][0] + 44;
    dofs[101] = offset + 56*c.entity_indices[3][0] + 45;
    dofs[102] = offset + 56*c.entity_indices[3][0] + 46;
    dofs[103] = offset + 56*c.entity_indices[3][0] + 47;
    dofs[104] = offset + 56*c.entity_indices[3][0] + 48;
    dofs[105] = offset + 56*c.entity_indices[3][0] + 49;
    dofs[106] = offset + 56*c.entity_indices[3][0] + 50;
    dofs[107] = offset + 56*c.entity_indices[3][0] + 51;
    dofs[108] = offset + 56*c.entity_indices[3][0] + 52;
    dofs[109] = offset + 56*c.entity_indices[3][0] + 53;
    dofs[110] = offset + 56*c.entity_indices[3][0] + 54;
    dofs[111] = offset + 56*c.entity_indices[3][0] + 55;
    offset += 56*num_global_entities[3];
    dofs[112] = offset + 56*c.entity_indices[3][0];
    dofs[113] = offset + 56*c.entity_indices[3][0] + 1;
    dofs[114] = offset + 56*c.entity_indices[3][0] + 2;
    dofs[115] = offset + 56*c.entity_indices[3][0] + 3;
    dofs[116] = offset + 56*c.entity_indices[3][0] + 4;
    dofs[117] = offset + 56*c.entity_indices[3][0] + 5;
    dofs[118] = offset + 56*c.entity_indices[3][0] + 6;
    dofs[119] = offset + 56*c.entity_indices[3][0] + 7;
    dofs[120] = offset + 56*c.entity_indices[3][0] + 8;
    dofs[121] = offset + 56*c.entity_indices[3][0] + 9;
    dofs[122] = offset + 56*c.entity_indices[3][0] + 10;
    dofs[123] = offset + 56*c.entity_indices[3][0] + 11;
    dofs[124] = offset + 56*c.entity_indices[3][0] + 12;
    dofs[125] = offset + 56*c.entity_indices[3][0] + 13;
    dofs[126] = offset + 56*c.entity_indices[3][0] + 14;
    dofs[127] = offset + 56*c.entity_indices[3][0] + 15;
    dofs[128] = offset + 56*c.entity_indices[3][0] + 16;
    dofs[129] = offset + 56*c.entity_indices[3][0] + 17;
    dofs[130] = offset + 56*c.entity_indices[3][0] + 18;
    dofs[131] = offset + 56*c.entity_indices[3][0] + 19;
    dofs[132] = offset + 56*c.entity_indices[3][0] + 20;
    dofs[133] = offset + 56*c.entity_indices[3][0] + 21;
    dofs[134] = offset + 56*c.entity_indices[3][0] + 22;
    dofs[135] = offset + 56*c.entity_indices[3][0] + 23;
    dofs[136] = offset + 56*c.entity_indices[3][0] + 24;
    dofs[137] = offset + 56*c.entity_indices[3][0] + 25;
    dofs[138] = offset + 56*c.entity_indices[3][0] + 26;
    dofs[139] = offset + 56*c.entity_indices[3][0] + 27;
    dofs[140] = offset + 56*c.entity_indices[3][0] + 28;
    dofs[141] = offset + 56*c.entity_indices[3][0] + 29;
    dofs[142] = offset + 56*c.entity_indices[3][0] + 30;
    dofs[143] = offset + 56*c.entity_indices[3][0] + 31;
    dofs[144] = offset + 56*c.entity_indices[3][0] + 32;
    dofs[145] = offset + 56*c.entity_indices[3][0] + 33;
    dofs[146] = offset + 56*c.entity_indices[3][0] + 34;
    dofs[147] = offset + 56*c.entity_indices[3][0] + 35;
    dofs[148] = offset + 56*c.entity_indices[3][0] + 36;
    dofs[149] = offset + 56*c.entity_indices[3][0] + 37;
    dofs[150] = offset + 56*c.entity_indices[3][0] + 38;
    dofs[151] = offset + 56*c.entity_indices[3][0] + 39;
    dofs[152] = offset + 56*c.entity_indices[3][0] + 40;
    dofs[153] = offset + 56*c.entity_indices[3][0] + 41;
    dofs[154] = offset + 56*c.entity_indices[3][0] + 42;
    dofs[155] = offset + 56*c.entity_indices[3][0] + 43;
    dofs[156] = offset + 56*c.entity_indices[3][0] + 44;
    dofs[157] = offset + 56*c.entity_indices[3][0] + 45;
    dofs[158] = offset + 56*c.entity_indices[3][0] + 46;
    dofs[159] = offset + 56*c.entity_indices[3][0] + 47;
    dofs[160] = offset + 56*c.entity_indices[3][0] + 48;
    dofs[161] = offset + 56*c.entity_indices[3][0] + 49;
    dofs[162] = offset + 56*c.entity_indices[3][0] + 50;
    dofs[163] = offset + 56*c.entity_indices[3][0] + 51;
    dofs[164] = offset + 56*c.entity_indices[3][0] + 52;
    dofs[165] = offset + 56*c.entity_indices[3][0] + 53;
    dofs[166] = offset + 56*c.entity_indices[3][0] + 54;
    dofs[167] = offset + 56*c.entity_indices[3][0] + 55;
    offset += 56*num_global_entities[3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
      dofs[28] = 28;
      dofs[29] = 29;
      dofs[30] = 30;
      dofs[31] = 31;
      dofs[32] = 32;
      dofs[33] = 33;
      dofs[34] = 34;
      dofs[35] = 35;
      dofs[36] = 36;
      dofs[37] = 37;
      dofs[38] = 38;
      dofs[39] = 39;
      dofs[40] = 40;
      dofs[41] = 41;
      dofs[42] = 42;
      dofs[43] = 43;
      dofs[44] = 44;
      dofs[45] = 45;
      dofs[46] = 46;
      dofs[47] = 47;
      dofs[48] = 48;
      dofs[49] = 49;
      dofs[50] = 50;
      dofs[51] = 51;
      dofs[52] = 52;
      dofs[53] = 53;
      dofs[54] = 54;
      dofs[55] = 55;
      dofs[56] = 56;
      dofs[57] = 57;
      dofs[58] = 58;
      dofs[59] = 59;
      dofs[60] = 60;
      dofs[61] = 61;
      dofs[62] = 62;
      dofs[63] = 63;
      dofs[64] = 64;
      dofs[65] = 65;
      dofs[66] = 66;
      dofs[67] = 67;
      dofs[68] = 68;
      dofs[69] = 69;
      dofs[70] = 70;
      dofs[71] = 71;
      dofs[72] = 72;
      dofs[73] = 73;
      dofs[74] = 74;
      dofs[75] = 75;
      dofs[76] = 76;
      dofs[77] = 77;
      dofs[78] = 78;
      dofs[79] = 79;
      dofs[80] = 80;
      dofs[81] = 81;
      dofs[82] = 82;
      dofs[83] = 83;
      dofs[84] = 84;
      dofs[85] = 85;
      dofs[86] = 86;
      dofs[87] = 87;
      dofs[88] = 88;
      dofs[89] = 89;
      dofs[90] = 90;
      dofs[91] = 91;
      dofs[92] = 92;
      dofs[93] = 93;
      dofs[94] = 94;
      dofs[95] = 95;
      dofs[96] = 96;
      dofs[97] = 97;
      dofs[98] = 98;
      dofs[99] = 99;
      dofs[100] = 100;
      dofs[101] = 101;
      dofs[102] = 102;
      dofs[103] = 103;
      dofs[104] = 104;
      dofs[105] = 105;
      dofs[106] = 106;
      dofs[107] = 107;
      dofs[108] = 108;
      dofs[109] = 109;
      dofs[110] = 110;
      dofs[111] = 111;
      dofs[112] = 112;
      dofs[113] = 113;
      dofs[114] = 114;
      dofs[115] = 115;
      dofs[116] = 116;
      dofs[117] = 117;
      dofs[118] = 118;
      dofs[119] = 119;
      dofs[120] = 120;
      dofs[121] = 121;
      dofs[122] = 122;
      dofs[123] = 123;
      dofs[124] = 124;
      dofs[125] = 125;
      dofs[126] = 126;
      dofs[127] = 127;
      dofs[128] = 128;
      dofs[129] = 129;
      dofs[130] = 130;
      dofs[131] = 131;
      dofs[132] = 132;
      dofs[133] = 133;
      dofs[134] = 134;
      dofs[135] = 135;
      dofs[136] = 136;
      dofs[137] = 137;
      dofs[138] = 138;
      dofs[139] = 139;
      dofs[140] = 140;
      dofs[141] = 141;
      dofs[142] = 142;
      dofs[143] = 143;
      dofs[144] = 144;
      dofs[145] = 145;
      dofs[146] = 146;
      dofs[147] = 147;
      dofs[148] = 148;
      dofs[149] = 149;
      dofs[150] = 150;
      dofs[151] = 151;
      dofs[152] = 152;
      dofs[153] = 153;
      dofs[154] = 154;
      dofs[155] = 155;
      dofs[156] = 156;
      dofs[157] = 157;
      dofs[158] = 158;
      dofs[159] = 159;
      dofs[160] = 160;
      dofs[161] = 161;
      dofs[162] = 162;
      dofs[163] = 163;
      dofs[164] = 164;
      dofs[165] = 165;
      dofs[166] = 166;
      dofs[167] = 167;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
    dof_coordinates[12] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[13] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[14] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[15] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[16] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[17] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[18] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[19] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[20] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[21] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    dof_coordinates[22] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    dof_coordinates[23] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    dof_coordinates[24] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[25] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[26] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[27] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[28] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[29] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[30] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[31] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[32] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[33] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    dof_coordinates[34] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    dof_coordinates[35] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    dof_coordinates[36] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[37] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[38] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[39] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[40] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[41] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[42] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[43] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[44] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[45] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    dof_coordinates[46] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    dof_coordinates[47] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    dof_coordinates[48] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    dof_coordinates[49] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    dof_coordinates[50] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    dof_coordinates[51] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    dof_coordinates[52] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    dof_coordinates[53] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    dof_coordinates[54] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    dof_coordinates[55] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    dof_coordinates[56] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    dof_coordinates[57] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    dof_coordinates[58] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    dof_coordinates[59] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    dof_coordinates[60] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    dof_coordinates[61] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    dof_coordinates[62] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    dof_coordinates[63] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    dof_coordinates[64] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    dof_coordinates[65] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    dof_coordinates[66] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    dof_coordinates[67] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    dof_coordinates[68] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    dof_coordinates[69] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    dof_coordinates[70] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    dof_coordinates[71] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    dof_coordinates[72] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    dof_coordinates[73] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    dof_coordinates[74] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    dof_coordinates[75] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    dof_coordinates[76] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    dof_coordinates[77] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    dof_coordinates[78] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    dof_coordinates[79] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    dof_coordinates[80] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    dof_coordinates[81] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    dof_coordinates[82] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    dof_coordinates[83] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    dof_coordinates[84] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[85] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[86] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[87] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[88] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[89] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[90] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[91] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[92] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[93] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[94] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[95] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[96] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[97] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[98] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[99] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[100] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[101] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[102] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[103] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[104] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[105] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[106] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[107] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[108] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[109] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[110] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[111] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[112] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[113] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[114] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[115] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[116] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[117] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[118] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[119] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[120] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[121] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[122] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[123] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[124] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[125] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[126] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[127] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[128] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[129] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[130] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[131] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[132] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[133] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[134] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[135] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[136] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[137] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[138] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[139] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[140] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[141] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[142] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[143] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[144] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[145] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[146] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[147] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[148] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[149] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[150] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[151] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[152] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[153] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[154] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[155] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[156] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[157] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[158] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[159] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[160] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[161] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[162] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[163] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[164] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[165] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[166] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[167] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[168] = vertex_coordinates[0];
    dof_coordinates[169] = vertex_coordinates[1];
    dof_coordinates[170] = vertex_coordinates[2];
    dof_coordinates[171] = vertex_coordinates[3];
    dof_coordinates[172] = vertex_coordinates[4];
    dof_coordinates[173] = vertex_coordinates[5];
    dof_coordinates[174] = vertex_coordinates[6];
    dof_coordinates[175] = vertex_coordinates[7];
    dof_coordinates[176] = vertex_coordinates[8];
    dof_coordinates[177] = vertex_coordinates[9];
    dof_coordinates[178] = vertex_coordinates[10];
    dof_coordinates[179] = vertex_coordinates[11];
    dof_coordinates[180] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[181] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[182] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[183] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[184] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[185] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[186] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[187] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[188] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[189] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    dof_coordinates[190] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    dof_coordinates[191] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    dof_coordinates[192] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[193] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[194] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[195] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[196] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[197] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[198] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[199] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[200] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[201] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    dof_coordinates[202] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    dof_coordinates[203] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    dof_coordinates[204] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[205] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[206] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[207] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[208] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[209] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[210] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[211] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[212] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[213] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    dof_coordinates[214] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    dof_coordinates[215] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    dof_coordinates[216] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    dof_coordinates[217] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    dof_coordinates[218] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    dof_coordinates[219] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    dof_coordinates[220] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    dof_coordinates[221] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    dof_coordinates[222] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    dof_coordinates[223] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    dof_coordinates[224] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    dof_coordinates[225] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    dof_coordinates[226] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    dof_coordinates[227] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    dof_coordinates[228] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    dof_coordinates[229] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    dof_coordinates[230] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    dof_coordinates[231] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    dof_coordinates[232] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    dof_coordinates[233] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    dof_coordinates[234] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    dof_coordinates[235] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    dof_coordinates[236] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    dof_coordinates[237] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    dof_coordinates[238] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    dof_coordinates[239] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    dof_coordinates[240] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    dof_coordinates[241] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    dof_coordinates[242] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    dof_coordinates[243] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    dof_coordinates[244] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    dof_coordinates[245] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    dof_coordinates[246] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    dof_coordinates[247] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    dof_coordinates[248] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    dof_coordinates[249] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    dof_coordinates[250] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    dof_coordinates[251] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    dof_coordinates[252] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[253] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[254] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[255] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[256] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[257] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[258] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[259] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[260] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[261] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[262] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[263] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[264] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[265] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[266] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[267] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[268] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[269] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[270] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[271] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[272] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[273] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[274] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[275] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[276] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[277] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[278] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[279] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[280] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[281] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[282] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[283] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[284] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[285] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[286] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[287] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[288] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[289] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[290] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[291] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[292] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[293] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[294] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[295] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[296] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[297] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[298] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[299] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[300] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[301] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[302] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[303] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[304] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[305] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[306] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[307] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[308] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[309] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[310] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[311] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[312] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[313] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[314] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[315] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[316] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[317] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[318] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[319] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[320] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[321] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[322] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[323] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[324] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[325] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[326] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[327] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[328] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[329] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[330] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[331] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[332] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[333] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[334] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[335] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[336] = vertex_coordinates[0];
    dof_coordinates[337] = vertex_coordinates[1];
    dof_coordinates[338] = vertex_coordinates[2];
    dof_coordinates[339] = vertex_coordinates[3];
    dof_coordinates[340] = vertex_coordinates[4];
    dof_coordinates[341] = vertex_coordinates[5];
    dof_coordinates[342] = vertex_coordinates[6];
    dof_coordinates[343] = vertex_coordinates[7];
    dof_coordinates[344] = vertex_coordinates[8];
    dof_coordinates[345] = vertex_coordinates[9];
    dof_coordinates[346] = vertex_coordinates[10];
    dof_coordinates[347] = vertex_coordinates[11];
    dof_coordinates[348] = 0.8*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[349] = 0.8*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[350] = 0.8*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[351] = 0.6*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[352] = 0.6*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[353] = 0.6*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[354] = 0.4*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[355] = 0.4*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[356] = 0.4*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[357] = 0.2*vertex_coordinates[6] + 0.8*vertex_coordinates[9];
    dof_coordinates[358] = 0.2*vertex_coordinates[7] + 0.8*vertex_coordinates[10];
    dof_coordinates[359] = 0.2*vertex_coordinates[8] + 0.8*vertex_coordinates[11];
    dof_coordinates[360] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[361] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[362] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[363] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[364] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[365] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[366] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[367] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[368] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[369] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[9];
    dof_coordinates[370] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[10];
    dof_coordinates[371] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[11];
    dof_coordinates[372] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[373] = 0.8*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[374] = 0.8*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[375] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[376] = 0.6*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[377] = 0.6*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[378] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[379] = 0.4*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[380] = 0.4*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[381] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[6];
    dof_coordinates[382] = 0.2*vertex_coordinates[4] + 0.8*vertex_coordinates[7];
    dof_coordinates[383] = 0.2*vertex_coordinates[5] + 0.8*vertex_coordinates[8];
    dof_coordinates[384] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[9];
    dof_coordinates[385] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[10];
    dof_coordinates[386] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[11];
    dof_coordinates[387] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[9];
    dof_coordinates[388] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[10];
    dof_coordinates[389] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[11];
    dof_coordinates[390] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[9];
    dof_coordinates[391] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[10];
    dof_coordinates[392] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[11];
    dof_coordinates[393] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[9];
    dof_coordinates[394] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[10];
    dof_coordinates[395] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[11];
    dof_coordinates[396] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[6];
    dof_coordinates[397] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[7];
    dof_coordinates[398] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[8];
    dof_coordinates[399] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[6];
    dof_coordinates[400] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[7];
    dof_coordinates[401] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[8];
    dof_coordinates[402] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[6];
    dof_coordinates[403] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[7];
    dof_coordinates[404] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[8];
    dof_coordinates[405] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[6];
    dof_coordinates[406] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[7];
    dof_coordinates[407] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[8];
    dof_coordinates[408] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[3];
    dof_coordinates[409] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[4];
    dof_coordinates[410] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[5];
    dof_coordinates[411] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[3];
    dof_coordinates[412] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[4];
    dof_coordinates[413] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[5];
    dof_coordinates[414] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[3];
    dof_coordinates[415] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[4];
    dof_coordinates[416] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[5];
    dof_coordinates[417] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[3];
    dof_coordinates[418] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[4];
    dof_coordinates[419] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[5];
    dof_coordinates[420] = 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[421] = 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[422] = 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[423] = 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[424] = 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[425] = 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[426] = 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[427] = 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[428] = 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[429] = 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[430] = 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[431] = 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[432] = 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[433] = 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[434] = 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[435] = 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[436] = 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[437] = 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[438] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[439] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[440] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[441] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[442] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[443] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[444] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[445] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[446] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[447] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[448] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[449] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[450] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[451] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[452] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
    dof_coordinates[453] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[6] + 0.6*vertex_coordinates[9];
    dof_coordinates[454] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[7] + 0.6*vertex_coordinates[10];
    dof_coordinates[455] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[8] + 0.6*vertex_coordinates[11];
    dof_coordinates[456] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[457] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[458] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[459] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[460] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[461] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[462] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[9];
    dof_coordinates[463] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[10];
    dof_coordinates[464] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[11];
    dof_coordinates[465] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[466] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[467] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[468] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[9];
    dof_coordinates[469] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[10];
    dof_coordinates[470] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[11];
    dof_coordinates[471] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[9];
    dof_coordinates[472] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[10];
    dof_coordinates[473] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[11];
    dof_coordinates[474] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[475] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[476] = 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[477] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[478] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[479] = 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[480] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[6];
    dof_coordinates[481] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[4] + 0.2*vertex_coordinates[7];
    dof_coordinates[482] = 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[5] + 0.2*vertex_coordinates[8];
    dof_coordinates[483] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[484] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[485] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[486] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[6];
    dof_coordinates[487] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.4*vertex_coordinates[7];
    dof_coordinates[488] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.4*vertex_coordinates[8];
    dof_coordinates[489] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[6];
    dof_coordinates[490] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.6*vertex_coordinates[7];
    dof_coordinates[491] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.6*vertex_coordinates[8];
    dof_coordinates[492] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[493] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[494] = 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[495] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[496] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[497] = 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[498] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[6] + 0.2*vertex_coordinates[9];
    dof_coordinates[499] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.4*vertex_coordinates[7] + 0.2*vertex_coordinates[10];
    dof_coordinates[500] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.4*vertex_coordinates[8] + 0.2*vertex_coordinates[11];
    dof_coordinates[501] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[6] + 0.4*vertex_coordinates[9];
    dof_coordinates[502] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[4] + 0.2*vertex_coordinates[7] + 0.4*vertex_coordinates[10];
    dof_coordinates[503] = 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[5] + 0.2*vertex_coordinates[8] + 0.4*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 3;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0();
        break;
      }
    case 2:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W216[216] = {0.000387381319499512, 0.000665118532009357, 0.000585836191028465, 0.00031770121340093, 9.73756921862106e-05, 1.13421694285829e-05, 0.000726129045448855, 0.00124673509136236, 0.00109812387115231, 0.000595516787239015, 0.00018252640191439, 2.12603918824395e-05, 0.000754254678618672, 0.00129502570039305, 0.00114065822419689, 0.000618583330037891, 0.000189596316905709, 2.20838846030239e-05, 0.00052854808478811, 0.000907496331275901, 0.000799322479379511, 0.000433475646411833, 0.000132860654397154, 1.54754027286732e-05, 0.000235476865600463, 0.000404304542544008, 0.000356111312225707, 0.000193120530504076, 5.91916068934585e-05, 6.89454646290829e-06, 4.6812880715354e-05, 8.03758801295647e-05, 7.07950496032822e-05, 3.83924269380772e-05, 1.17673115182154e-05, 1.37063817429187e-06, 0.000815716960554665, 0.00140055402785094, 0.00123360754139117, 0.000668990101264451, 0.00020504603516934, 2.38834437972721e-05, 0.00152902514424097, 0.00262527620241696, 0.00231234244244452, 0.00125399217565136, 0.00038434966864935, 4.47684526165347e-05, 0.00158824987927105, 0.00272696274959673, 0.00240190792079416, 0.00130256387809358, 0.000399236936769427, 4.65024984913897e-05, 0.00111297477582909, 0.00191093403786039, 0.00168315009155545, 0.000912778750463146, 0.000279767463547727, 3.25868797532674e-05, 0.000495848569406277, 0.000851352545880463, 0.000749871051095567, 0.00040665794717984, 0.000124641006767853, 1.45179909356304e-05, 9.85748637060563e-05, 0.000169249174756031, 0.00014907461918741, 8.08437377690454e-05, 2.47786744026275e-05, 2.88618152005384e-06, 0.00105799885859761, 0.00181654254419696, 0.00160001009401815, 0.000867691610910742, 0.000265948216917809, 3.09772353632468e-05, 0.00198317178090058, 0.00340502816537243, 0.002999147722918, 0.00162644931353069, 0.000498508098270849, 5.80654492426738e-05, 0.00205998727584868, 0.00353691735740022, 0.00311531568122456, 0.00168944764288879, 0.000517817139813846, 6.03145364200509e-05, 0.00144354733248948, 0.00247851415218444, 0.00218307447537104, 0.00118388966129318, 0.000362863188360062, 4.22657407549443e-05, 0.000643124080823797, 0.00110421882265784, 0.0009725955870956, 0.000527442317324585, 0.000161661518972436, 1.88300827146993e-05, 0.000127853285306839, 0.000219519076308906, 0.000193352332454762, 0.000104855711503479, 3.21383647800037e-05, 3.74342682766598e-06, 0.00105799885859761, 0.00181654254419696, 0.00160001009401815, 0.000867691610910741, 0.000265948216917809, 3.09772353632468e-05, 0.00198317178090058, 0.00340502816537243, 0.002999147722918, 0.00162644931353069, 0.000498508098270848, 5.80654492426738e-05, 0.00205998727584867, 0.00353691735740022, 0.00311531568122456, 0.00168944764288879, 0.000517817139813846, 6.03145364200509e-05, 0.00144354733248948, 0.00247851415218444, 0.00218307447537104, 0.00118388966129318, 0.000362863188360062, 4.22657407549443e-05, 0.000643124080823797, 0.00110421882265784, 0.000972595587095599, 0.000527442317324584, 0.000161661518972436, 1.88300827146993e-05, 0.000127853285306839, 0.000219519076308906, 0.000193352332454762, 0.000104855711503479, 3.21383647800037e-05, 3.74342682766598e-06, 0.000815716960554665, 0.00140055402785094, 0.00123360754139117, 0.000668990101264451, 0.00020504603516934, 2.38834437972721e-05, 0.00152902514424097, 0.00262527620241696, 0.00231234244244452, 0.00125399217565136, 0.00038434966864935, 4.47684526165347e-05, 0.00158824987927105, 0.00272696274959673, 0.00240190792079416, 0.00130256387809358, 0.000399236936769427, 4.65024984913897e-05, 0.00111297477582909, 0.00191093403786039, 0.00168315009155545, 0.000912778750463146, 0.000279767463547727, 3.25868797532674e-05, 0.000495848569406277, 0.000851352545880463, 0.000749871051095567, 0.00040665794717984, 0.000124641006767853, 1.45179909356304e-05, 9.85748637060563e-05, 0.000169249174756031, 0.00014907461918741, 8.08437377690454e-05, 2.47786744026275e-05, 2.88618152005384e-06, 0.000387381319499513, 0.000665118532009358, 0.000585836191028466, 0.00031770121340093, 9.73756921862109e-05, 1.1342169428583e-05, 0.000726129045448857, 0.00124673509136237, 0.00109812387115231, 0.000595516787239017, 0.00018252640191439, 2.12603918824395e-05, 0.000754254678618674, 0.00129502570039306, 0.00114065822419689, 0.000618583330037893, 0.000189596316905709, 2.2083884603024e-05, 0.000528548084788111, 0.000907496331275903, 0.000799322479379513, 0.000433475646411835, 0.000132860654397154, 1.54754027286732e-05, 0.000235476865600464, 0.000404304542544009, 0.000356111312225708, 0.000193120530504077, 5.91916068934587e-05, 6.89454646290831e-06, 4.68128807153541e-05, 8.03758801295649e-05, 7.07950496032824e-05, 3.83924269380773e-05, 1.17673115182155e-05, 1.37063817429188e-06};
    // Quadrature points on the UFC reference element: (0.0319263353242805, 0.0285569981572747, 0.0259045550936672), (0.028463310193376, 0.0254594424473144, 0.131563941657985), (0.0228628857485123, 0.0204500572821369, 0.302436918022891), (0.0160915115528755, 0.0143932982315623, 0.509036413164752), (0.00931865528776854, 0.00833521352131827, 0.715681127311714), (0.00370998742847828, 0.00331845490822724, 0.886805616177562), (0.0280201798587476, 0.144242689425179, 0.0259045550936672), (0.0249808524183223, 0.128596795420904, 0.131563941657985), (0.0200656343503386, 0.103294164359602, 0.302436918022891), (0.0141227310723564, 0.0727012004267798, 0.509036413164752), (0.00817852705463396, 0.0421015405270034, 0.715681127311714), (0.00325607414580387, 0.0167616658467636, 0.886805616177562), (0.0218069509935963, 0.328255251806044, 0.0259045550936672), (0.0194415677276443, 0.29264965614937, 0.131563941657985), (0.0156162561103851, 0.235068079131624, 0.302436918022891), (0.010991139455319, 0.165447212249001, 0.509036413164752), (0.00636501048812954, 0.095811107253949, 0.715681127311714), (0.00253406829245939, 0.0381447743739704, 0.886805616177562), (0.0145155449974574, 0.54419938163427, 0.0259045550936672), (0.0129410549532857, 0.485170491669912, 0.131563941657985), (0.0103947804683323, 0.389708626447115, 0.302436918022891), (0.0073161249999536, 0.274287372718776, 0.509036413164752), (0.00423679569770502, 0.15884085642018, 0.715681127311714), (0.00168677328328137, 0.0632384783264913, 0.886805616177562), (0.00759002965380401, 0.749307201071183, 0.0259045550936672), (0.00676674495268004, 0.668030423084586, 0.131563941657985), (0.00543532413100883, 0.536589143558839, 0.302436918022891), (0.00382552675151443, 0.377665816017406, 0.509036413164752), (0.00221537703119812, 0.218707704486042, 0.715681127311714), (0.000881996455633749, 0.0870729530278464, 0.886805616177562), (0.0024027984603795, 0.902933556108202, 0.0259045550936672), (0.00214216875238843, 0.804993045098109, 0.131563941657985), (0.00172067686812083, 0.646603079311139, 0.302436918022891), (0.00121105848171127, 0.455096571592547, 0.509036413164752), (0.000701328553710634, 0.263548148312915, 0.715681127311714), (0.000279216264273074, 0.104925044101914, 0.886805616177562), (0.160169775246924, 0.0285569981572747, 0.0259045550936672), (0.142796282446779, 0.0254594424473144, 0.131563941657985), (0.114699768534046, 0.0204500572821369, 0.302436918022891), (0.080728770233996, 0.0143932982315623, 0.509036413164752), (0.0467503366072312, 0.00833521352131827, 0.715681127311714), (0.0186124666847173, 0.00331845490822724, 0.886805616177562), (0.140573162086061, 0.144242689425179, 0.0259045550936672), (0.125325298900695, 0.128596795420904, 0.131563941657985), (0.100666365601832, 0.103294164359602, 0.302436918022891), (0.0708516852547046, 0.0727012004267798, 0.509036413164752), (0.0410304792857127, 0.0421015405270034, 0.715681127311714), (0.0163352498438522, 0.0167616658467636, 0.886805616177562), (0.109402297632597, 0.328255251806044, 0.0259045550936672), (0.0975355142316141, 0.29264965614937, 0.131563941657985), (0.0783444828851544, 0.235068079131624, 0.302436918022891), (0.055140946130676, 0.165447212249001, 0.509036413164752), (0.0319323307536863, 0.095811107253949, 0.715681127311714), (0.0127130516152568, 0.0381447743739704, 0.886805616177562), (0.0728223755158399, 0.54419938163427, 0.0259045550936672), (0.0649233882395983, 0.485170491669912, 0.131563941657985), (0.0521490999340504, 0.389708626447115, 0.302436918022891), (0.0367039337593433, 0.274287372718776, 0.509036413164752), (0.0212553870582339, 0.15884085642018, 0.715681127311714), (0.00846229593630254, 0.0632384783264913, 0.886805616177562), (0.0380780735220407, 0.749307201071183, 0.0259045550936672), (0.0339477740622412, 0.668030423084586, 0.131563941657985), (0.0272682296798337, 0.536589143558839, 0.302436918022891), (0.0191921106436906, 0.377665816017406, 0.509036413164752), (0.0111142239649518, 0.218707704486042, 0.715681127311714), (0.00442484778263935, 0.0870729530278464, 0.886805616177562), (0.012054489983069, 0.902933556108202, 0.0259045550936672), (0.0107469486906659, 0.804993045098109, 0.131563941657985), (0.00863238528444238, 0.646603079311139, 0.302436918022891), (0.00607570404984925, 0.455096571592547, 0.509036413164752), (0.00351846322733596, 0.263548148312915, 0.715681127311714), (0.00140078733871757, 0.104925044101914, 0.886805616177562), (0.359957416087714, 0.0285569981572747, 0.0259045550936672), (0.32091311096137, 0.0254594424473144, 0.131563941657985), (0.257770432927963, 0.0204500572821369, 0.302436918022891), (0.18142573711282, 0.0143932982315623, 0.509036413164752), (0.105064331522142, 0.00833521352131827, 0.715681127311714), (0.0418287120932833, 0.00331845490822724, 0.886805616177562), (0.315916983199671, 0.144242689425179, 0.0259045550936672), (0.281649710085242, 0.128596795420904, 0.131563941657985), (0.226232476090537, 0.103294164359602, 0.302436918022891), (0.159228478097232, 0.0727012004267798, 0.509036413164752), (0.0922098147528569, 0.0421015405270034, 0.715681127311714), (0.0367110106502643, 0.0167616658467636, 0.886805616177562), (0.245865165941442, 0.328255251806044, 0.0259045550936672), (0.219196359771832, 0.29264965614937, 0.131563941657985), (0.176067410849475, 0.235068079131624, 0.302436918022891), (0.123920961112862, 0.165447212249001, 0.509036413164752), (0.0717630979380167, 0.095811107253949, 0.715681127311714), (0.0285706663630063, 0.0381447743739704, 0.886805616177562), (0.163657307276856, 0.54419938163427, 0.0259045550936672), (0.145905524549545, 0.485170491669912, 0.131563941657985), (0.117197237959671, 0.389708626447115, 0.302436918022891), (0.0824865561302055, 0.274287372718776, 0.509036413164752), (0.0477682770774383, 0.15884085642018, 0.715681127311714), (0.0190177339932274, 0.0632384783264913, 0.886805616177562), (0.0855747280250677, 0.749307201071183, 0.0259045550936672), (0.0762925028429077, 0.668030423084586, 0.131563941657985), (0.0612812341261478, 0.536589143558839, 0.302436918022891), (0.0431313744801241, 0.377665816017406, 0.509036413164752), (0.0249775423239286, 0.218707704486042, 0.715681127311714), (0.00994417811952886, 0.0870729530278464, 0.886805616177562), (0.0270906484064887, 0.902933556108202, 0.0259045550936672), (0.0241521465304899, 0.804993045098109, 0.131563941657985), (0.0193999841535094, 0.646603079311139, 0.302436918022891), (0.0136542286291271, 0.455096571592547, 0.509036413164752), (0.00790721551528067, 0.263548148312915, 0.715681127311714), (0.00314805830348347, 0.104925044101914, 0.886805616177562), (0.585581030661344, 0.0285569981572747, 0.0259045550936672), (0.522063504933331, 0.0254594424473144, 0.131563941657985), (0.419342591767009, 0.0204500572821369, 0.302436918022891), (0.295144551490866, 0.0143932982315623, 0.509036413164752), (0.170919327644826, 0.00833521352131827, 0.715681127311714), (0.0680472168209276, 0.00331845490822724, 0.886805616177562), (0.513935772281482, 0.144242689425179, 0.0259045550936672), (0.45818955283587, 0.128596795420904, 0.131563941657985), (0.368036441526969, 0.103294164359602, 0.302436918022891), (0.259033908311236, 0.0727012004267798, 0.509036413164752), (0.150007517408426, 0.0421015405270034, 0.715681127311714), (0.0597217073254103, 0.0167616658467636, 0.886805616177562), (0.399975027158847, 0.328255251806044, 0.0259045550936672), (0.356590042420813, 0.29264965614937, 0.131563941657985), (0.286427591996011, 0.235068079131624, 0.302436918022891), (0.201595413473385, 0.165447212249001, 0.509036413164752), (0.11674466749632, 0.095811107253949, 0.715681127311714), (0.0464789430854615, 0.0381447743739704, 0.886805616177562), (0.266238755995207, 0.54419938163427, 0.0259045550936672), (0.237360042122558, 0.485170491669912, 0.131563941657985), (0.190657217570324, 0.389708626447115, 0.302436918022891), (0.134189657986267, 0.274287372718776, 0.509036413164752), (0.077709739190668, 0.15884085642018, 0.715681127311714), (0.0309381715027194, 0.0632384783264913, 0.886805616177562), (0.139213515810082, 0.749307201071183, 0.0259045550936672), (0.124113132414521, 0.668030423084586, 0.131563941657985), (0.0996927042921221, 0.536589143558839, 0.302436918022891), (0.0701663963377181, 0.377665816017406, 0.509036413164752), (0.0406336258783158, 0.218707704486042, 0.715681127311714), (0.0161772526750629, 0.0870729530278464, 0.886805616177562), (0.0440712403916416, 0.902933556108202, 0.0259045550936672), (0.0392908667134162, 0.804993045098109, 0.131563941657985), (0.0315600185124607, 0.646603079311139, 0.302436918022891), (0.022212786613574, 0.455096571592547, 0.509036413164752), (0.0128635088600901, 0.263548148312915, 0.715681127311714), (0.00512128141704032, 0.104925044101914, 0.886805616177562), (0.785368671502134, 0.0285569981572747, 0.0259045550936672), (0.700180333447922, 0.0254594424473144, 0.131563941657985), (0.562413256160926, 0.0204500572821369, 0.302436918022891), (0.39584151836969, 0.0143932982315623, 0.509036413164752), (0.229233322559737, 0.00833521352131827, 0.715681127311714), (0.0912634622294936, 0.00331845490822724, 0.886805616177562), (0.689279593395093, 0.144242689425179, 0.0259045550936672), (0.614513964020416, 0.128596795420904, 0.131563941657985), (0.493602552015675, 0.103294164359602, 0.302436918022891), (0.347410701153764, 0.0727012004267798, 0.509036413164752), (0.20118685287557, 0.0421015405270034, 0.715681127311714), (0.0800974681318223, 0.0167616658467636, 0.886805616177562), (0.536437895467693, 0.328255251806044, 0.0259045550936672), (0.47825088796103, 0.29264965614937, 0.131563941657985), (0.384150519960331, 0.235068079131624, 0.302436918022891), (0.270375428455571, 0.165447212249001, 0.509036413164752), (0.156575434680651, 0.095811107253949, 0.715681127311714), (0.0623365578332109, 0.0381447743739704, 0.886805616177562), (0.357073687756223, 0.54419938163427, 0.0259045550936672), (0.318342178432505, 0.485170491669912, 0.131563941657985), (0.255705355595944, 0.389708626447115, 0.302436918022891), (0.179972280357129, 0.274287372718776, 0.509036413164752), (0.104222629209872, 0.15884085642018, 0.715681127311714), (0.0414936095596443, 0.0632384783264913, 0.886805616177562), (0.18671017031311, 0.749307201071183, 0.0259045550936672), (0.166457861195188, 0.668030423084586, 0.131563941657985), (0.133705708738436, 0.536589143558839, 0.302436918022891), (0.0941056601741515, 0.377665816017406, 0.509036413164752), (0.0544969442372926, 0.218707704486042, 0.715681127311714), (0.0216965830119524, 0.0870729530278464, 0.886805616177562), (0.0591073988150613, 0.902933556108202, 0.0259045550936672), (0.0526960645532402, 0.804993045098109, 0.131563941657985), (0.0423276173815277, 0.646603079311139, 0.302436918022891), (0.0297913111928518, 0.455096571592547, 0.509036413164752), (0.0172522611480347, 0.263548148312915, 0.715681127311714), (0.00686855238180623, 0.104925044101914, 0.886805616177562), (0.913612111424777, 0.0285569981572747, 0.0259045550936672), (0.814513305701324, 0.0254594424473144, 0.131563941657985), (0.65425013894646, 0.0204500572821369, 0.302436918022891), (0.46047877705081, 0.0143932982315623, 0.509036413164752), (0.266665003879199, 0.00833521352131827, 0.715681127311714), (0.106165941485733, 0.00331845490822724, 0.886805616177562), (0.801832575622406, 0.144242689425179, 0.0259045550936672), (0.714858410502789, 0.128596795420904, 0.131563941657985), (0.574203283267168, 0.103294164359602, 0.302436918022891), (0.404139655336112, 0.0727012004267798, 0.509036413164752), (0.234038805106649, 0.0421015405270034, 0.715681127311714), (0.0931766438298707, 0.0167616658467636, 0.886805616177562), (0.624033242106693, 0.328255251806044, 0.0259045550936672), (0.556344834465, 0.29264965614937, 0.131563941657985), (0.4468787467351, 0.235068079131624, 0.302436918022891), (0.314525235130928, 0.165447212249001, 0.509036413164752), (0.182142754946207, 0.095811107253949, 0.715681127311714), (0.0725155411560083, 0.0381447743739704, 0.886805616177562), (0.415380518274606, 0.54419938163427, 0.0259045550936672), (0.370324511718817, 0.485170491669912, 0.131563941657985), (0.297459675061662, 0.389708626447115, 0.302436918022891), (0.209360089116518, 0.274287372718776, 0.509036413164752), (0.121241220570401, 0.15884085642018, 0.715681127311714), (0.0482691322126655, 0.0632384783264913, 0.886805616177562), (0.217198214181346, 0.749307201071183, 0.0259045550936672), (0.193638890304749, 0.668030423084586, 0.131563941657985), (0.155538614287261, 0.536589143558839, 0.302436918022891), (0.109472244066328, 0.377665816017406, 0.509036413164752), (0.0633957911710462, 0.218707704486042, 0.715681127311714), (0.025239434338958, 0.0870729530278464, 0.886805616177562), (0.0687590903377507, 0.902933556108202, 0.0259045550936672), (0.0613008444915176, 0.804993045098109, 0.131563941657985), (0.0492393257978493, 0.646603079311139, 0.302436918022891), (0.0346559567609898, 0.455096571592547, 0.509036413164752), (0.0200693958216601, 0.263548148312915, 0.715681127311714), (0.00799012345625072, 0.104925044101914, 0.886805616177562)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0[216][168] = \
    {{0.310703073843138, 0.0224419087355453, 0.0208770933958505, 0.0195251039488213, -0.00350519620229, -0.00213578148775571, -0.00215103292273913, -0.0036014832612442, -0.00378445250751067, -0.00231961445844541, -0.00235756395016123, -0.00402640927558307, -0.00417195365419321, -0.00251816728181509, -0.0025412185224488, -0.00432001510649589, 0.354215091736513, -0.393270742690671, 0.286443388274845, -0.115220749339439, 0.390484209646641, -0.426933671469903, 0.308757369600584, -0.123622648285321, 0.436556032512802, -0.46792562881181, 0.33533302108994, -0.13347157028838, 0.000760975979021908, 0.000531676205177549, 0.00078333670354422, 0.000539901917789551, 0.000550725217213955, 0.00080113621024832, 0.129016952515557, -0.0645985164753272, 0.0224161618429521, -0.0655979383537513, 0.0157596925360572, 0.0229255170425747, 0.144239197195841, -0.0708009310625629, 0.0243455865742151, -0.0733376023953634, 0.0172728564941386, 0.0256304160735921, 0.159008269921432, -0.0780504452045668, 0.0268384022973468, -0.079615105952796, 0.0187513670337182, 0.0276270291882514, 0.024059236904103, -0.00566655757523474, -0.00578015385508189, -0.00586958024656259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0168212127675001, 0.020831167572953, 0.0192875795853981, 0.0197079603842469, -0.0163810014243474, -0.00390242657177237, -0.00279689872237255, -0.0037531913254447, -0.0177608566866899, -0.00425338581439311, -0.00307308040887605, -0.0041960168268522, -0.00343697142949135, -0.00209922099594009, -0.00211619316158224, -0.00354396135402676, 0.762426252400218, -0.486472830393037, 0.315036567668793, -0.120074282056387, 0.147540025395148, -0.240094368128956, 0.21694135572351, -0.101414897218028, 0.164947740605516, -0.263802651514285, 0.236451671291947, -0.109957591036382, 0.00316467178184343, 0.00223004992142895, 0.00324612435929974, 0.00087438603765475, 0.000889697864057945, 0.00091221200425376, 0.361953254691465, -0.228613371439197, 0.0928919182149802, -0.0896376076996032, 0.025459819796289, 0.0261040901440186, 0.404658813134062, -0.2511879559161, 0.101246022171265, -0.10021362558217, 0.0279738671992901, 0.0291840175456565, 0.0783070774100658, -0.0486083437947558, 0.0195925056820641, -0.0494595496579395, 0.0138062550459616, 0.0200967791728533, 0.0745625360302077, -0.0208135617171244, -0.0211780387674471, -0.00830375195874451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.015558863517762, 0.0178396083059577, 0.0163965439250798, -0.0116539403654933, -0.0318063021955915, 0.0112436886986537, 0.00289018334287354, 0.00239490987846127, -0.0347130258988211, 0.0123225323775475, 0.00318776431988775, 0.00267747665318649, -0.00234721135471109, -0.00146045594323524, -0.00146979957328526, -0.00240441497001848, 0.161426388205, 0.609621358264413, -0.233929227326291, 0.0766193511896088, 0.0109152642713775, -0.0722517992667384, 0.107859002109446, -0.0688053487876894, 0.0122031169159267, -0.0796910370126104, 0.118208186061103, -0.0750933522468871, 0.00492003269613248, 0.00351354277547258, 0.00501895556935278, -0.002004548081792, -0.00203185252724649, -0.000736039572724344, 0.243404271380666, -0.257835982891349, 0.143623705893242, 0.147100706594461, -0.0581440074053683, -0.0210626951480251, 0.272122663056645, -0.284383462616914, 0.157404550542625, 0.164456588164782, -0.0641306693151902, -0.0235478065455435, 0.0184002802424234, -0.0192293260314473, 0.0106433172778928, -0.0194912534396815, 0.00760071179165121, 0.0108573133203486, 0.0656627847324154, -0.025605531410938, -0.0259543106904587, 0.0148074655791834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00894872042728933, 0.01354270014303, 0.0123418011338162, 0.0118223838397412, -0.0399845505836982, 0.0422013001459019, -0.0119330872043856, -0.00292413044299188, -0.0439702312640461, 0.0465429183672366, -0.0132189650130187, -0.00326913804247665, -0.00124328365422713, -0.000790403917700874, -0.000793900257330357, -0.00126398002385327, -0.0670830605102295, 0.297174981210494, 0.535772970512815, -0.0935504836114046, -0.00189681223432843, -0.00504670264847086, 0.0321772770214555, -0.03617037303724, -0.00212061026536665, -0.00559052193272536, 0.0354876359854279, -0.0397758545272403, 0.004335450944221, 0.00314406469764675, 0.00439483944231602, -0.00523488897578085, -0.00528322800716237, 0.00206912152181182, 0.0276817096582158, -0.127430920717603, 0.125763840462251, 0.212173344440878, -0.151186193020126, 0.0592105064091009, 0.0309477746936238, -0.141162538552777, 0.13870227078189, 0.237206911741454, -0.167477615955912, 0.0661965404040854, 0.000875066182395795, -0.00399145221042712, 0.00392188671994388, -0.00402830933090311, 0.00284414833496864, 0.00397561007306053, 0.0220957122063312, -0.0156004611164017, -0.0157445159727609, 0.0262147255291864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0109738205691141, 0.0084432111304712, 0.00763236993753075, -0.0295941247801587, -0.0344990911194154, 0.0601371945948342, -0.0484704728084982, 0.0146274102792548, -0.0382116443014454, 0.0667196416010176, -0.0539112807906322, 0.0163532456363013, -0.000445033691819641, -0.000288809823712886, -0.000289536829614409, -0.000449201642484015, 0.0736287355315531, -0.227812559637077, 0.539364215954558, 0.467968625984661, 0.000857520491375308, 0.000986133972088864, 0.00289671851242906, -0.0128544681648158, 0.000958696239860447, 0.00109682745774979, 0.00321378511702112, -0.0142377769749927, 0.00215684627323672, 0.00158719434401863, 0.00217342755715774, -0.00427040450999711, -0.0042924291824221, 0.00471322495942911, -0.00736449804673703, -0.0158793451087473, 0.0621953543792264, 0.0427239595603109, -0.122833242483404, 0.134874841195123, -0.00823340859708817, -0.0176618007484948, 0.0690030817265085, 0.0477648053829499, -0.13662126738705, 0.150788237023003, -9.58907759979536e-05, -0.000205698983515831, 0.000803647599287717, -0.000206759878970077, 0.000591393526743239, 0.000809825837014608, 0.0015440931637216, -0.00441655656921452, -0.00443933502297745, 0.0119441934599609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0261188035535263, 0.00356846422868538, 0.00320507108782463, 0.192230415140459, -0.0178382131382482, 0.0410650708630082, -0.0503948504088263, 0.036743473102511, -0.0198704873172243, 0.0457735732543992, -0.0562285998280994, 0.0410787029080848, -7.43559974853976e-05, -4.90514755034197e-05, -4.90999381122796e-05, -7.46268914881268e-05, -0.166915283235763, 0.464278848231275, -0.769187724303445, 1.17551858417977, -0.000624602315103688, -0.000497526431337217, -0.000671670106945687, -0.00213554205983538, -0.000698296888437391, -0.000555120501094781, -0.000748683496630181, -0.00237884036290424, 0.000442330508823117, 0.000329297655089024, 0.000443650701341738, -0.00114989679790907, -0.00115219045506205, 0.00190118764207892, 0.00448653414127205, 0.00450467759663963, 0.0126956210248063, -0.0157301889762828, -0.0329713743754391, 0.0544048679014506, 0.0050158841153128, 0.00502614278802704, 0.0141512951707227, -0.0175861372125048, -0.0367881678484813, 0.0608239019496676, 1.87695983853405e-05, 1.88079866665939e-05, 5.29545980091036e-05, 1.88455022700523e-05, 3.94226140919703e-05, 5.31126478445719e-05, -0.000169942708606156, -0.000355500518009963, -0.00035620962191079, 0.00124387251864917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00186778322923269, 0.0206121464512041, 0.0160091858217584, 0.0195251039488212, -0.00316207558373229, -0.00241577235429525, -0.00353354291864182, -0.0181912548602127, -0.003458305964826, -0.00210523271754534, -0.00211720616941652, -0.00353378209371136, -0.0192566655330661, -0.0037543278379911, -0.00258131419735611, -0.00342032226620977, 0.132011178619608, -0.227738706732717, 0.212018681376458, -0.101123604922342, 0.735069464402226, -0.406133611428703, 0.258494822208368, -0.0978768097135353, 0.142792530306415, -0.24334459988812, 0.225266158072228, -0.107046130267053, 0.0034884821852526, 0.000784350551183326, 0.000777623744280931, 0.0024490395387257, 0.000793999307933863, 0.00355148076900446, 0.377375106660751, -0.0785454775264234, 0.0222526783512822, -0.245248734459552, 0.022721285635297, 0.101630074704723, 0.0733078286669998, -0.0470623884943936, 0.0193921693138189, -0.0476413305733007, 0.0136139979708024, 0.0197423729662323, 0.408195327988216, -0.262054509821074, 0.107980185164327, -0.0849602859197393, 0.0242782715384183, 0.0240700543779729, 0.0789442096360893, -0.0225591161468229, -0.00731385603414951, -0.0228366290826985, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0295118525675892, 0.019028728721708, 0.0205403356838657, 0.0197079603842468, -0.0201247738104084, -0.00584323645334015, -0.0057793546097869, -0.018957539154774, -0.0161511787365526, -0.00384447375345827, -0.00275184717215773, -0.00368263832928279, -0.0157869230855839, -0.00392069343601937, -0.002837425154341, -0.00382121421853451, 0.228014045330252, -0.2717151045485, 0.231653750460453, -0.105383312724627, 0.222871671150234, -0.277102067847941, 0.238857806241639, -0.109348835528473, 0.0432944250827251, -0.131942507994804, 0.157153073341713, -0.0877581335269881, 0.014448143763741, 0.00412636436673884, 0.00426585139537898, 0.00395489410044247, 0.00161349267462726, 0.00404388585725995, 1.02114857456486, -0.347362233990544, 0.122072685786529, -0.332927664119839, 0.0461721157239614, 0.115720863634553, 0.198365455024692, -0.165396976974348, 0.0803159756186606, -0.0646735932737135, 0.0219849126185114, 0.0224796100611514, 0.193891742045086, -0.161666798236394, 0.0785046187846282, -0.0659557975662845, 0.02242078061199, 0.0231786894608931, 0.243053648758976, -0.082622797947246, -0.033707926396862, -0.0323072000911191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00567780449458299, 0.0161577642134766, 0.0267098865309275, -0.0116539403654934, -0.0579732173172457, 0.0239119304978304, 0.0078627426735822, 0.0120967981262487, -0.0313276643913103, 0.0110671468330955, 0.00284192495165244, 0.00234989003992663, -0.0106996359300074, -0.0035683942699284, -0.00278670080802792, -0.00384632070848094, -0.0380248596464322, 0.301987998765445, -0.169129303002115, 0.0672450495550814, -0.0129869928834945, -0.0973703756382166, 0.165842790839072, -0.110067289214354, -0.00252281677407686, -0.0351937372957314, 0.076756935940108, -0.0594783463215324, 0.022319525148426, 0.00852158369598113, 0.00936787367759266, -0.00902659870223746, -0.00485135103202069, -0.00326290380377016, 0.609030388285103, -0.507138483772254, 0.268073449809222, 0.537193055045898, -0.138827491931281, -0.0933720830549342, 0.118308533258758, -0.183301116519787, 0.124072300702036, 0.104353614600787, -0.0501780777616418, -0.0181381986942381, 0.0404070414401217, -0.0626045781079555, 0.0423755958927609, -0.0336468690624239, 0.0161789816165828, 0.0177857381237384, 0.210453801737447, -0.101195988938319, -0.0543878465817407, 0.0576110360335684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000689573107347516, 0.0121457494920625, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.041339453116336, -0.0147699151361857, -0.0393358416198596, 0.0414974536399691, -0.0117258358154839, -0.0028691622449886, -0.00561799280287607, -0.00244134318822817, -0.0020707327412001, -0.00293713936881887, -0.00443360677459506, 0.0139910499734395, 0.368517130449207, -0.082104674715699, -0.000633213118741771, -0.000823109650177159, 0.0650785581277403, -0.0840499253371741, -0.000123006202579645, -0.000233473059959504, 0.0217631516226341, -0.0312299337797292, 0.0195246551264626, 0.00966161533660806, 0.0113416597229396, -0.0234549811860988, -0.0160632387501088, 0.00917252921469192, 0.0065828238030824, -0.30364323834803, 0.324555812036961, 0.7371382729091, -0.459669715353957, 0.262483423099521, 0.00127876086944765, -0.0861276695976364, 0.10853586112807, 0.143194411238384, -0.130384202142739, 0.0509892927988105, 0.000182634184634645, -0.0123008586572028, 0.0155012238600132, -0.00842429281329397, 0.00767065339756534, 0.00900449227761771, 0.0673733265593303, -0.0613460913255653, -0.0420131188138636, 0.10199297705579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0071311438771826, 0.00750148626092424, 0.0261981528295215, -0.0295941247801588, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.0339007738939029, 0.059078590749144, -0.0475981981984886, 0.0143524422502369, -0.00199428872932849, -0.00106415577163217, -0.000972023581156769, -0.00141352907516584, 0.0450881185414648, -0.127068618871477, 0.241702073048268, 0.4107131286806, 0.00265240926107769, 0.00228882920954477, 0.00493590353226586, -0.0404499066305404, 0.000515249575909701, 0.000540144332047113, 0.00127523875639669, -0.011086077739848, 0.00964665779284916, 0.00583119804449758, 0.00725319143528799, -0.0190441299503523, -0.0156762365286428, 0.0208939848046806, -0.0207484211610255, -0.0296106304241301, 0.207559166263658, 0.0967054607656753, -0.448595161601129, 0.597907570023055, -0.00403053003957306, -0.00698785830119679, 0.0536249323623454, 0.0187857312892301, -0.105864663432386, 0.116147845812616, -0.000237104930297344, -0.000411076369401614, 0.00315460639795221, -0.000338378829323542, 0.0019068920090157, 0.00237190585575586, 0.00306743134590175, -0.0172861296713, -0.0142291329716045, 0.0464709748021342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0284903632108102, 0.00314688918138778, 0.014002682081672, 0.192230415140459, -0.0792712548026676, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.017513023375429, 0.0403122421171738, -0.0494632043101819, 0.0360527643450896, -0.000331016674263531, -0.000203286338883807, -0.000196366252368568, -0.000291059369223531, -0.178725093630068, 0.484387298109389, -0.768528380851086, 1.03169505116885, -0.00337811380894376, -0.00244266543518695, -0.00305101620671721, -0.00832902875213219, -0.000656222903823782, -0.00050947877110234, -0.000658791463301687, -0.00184009292641843, 0.00196766105572226, 0.0013631623972034, 0.00177020657356566, -0.00510934349238296, -0.0047586098838691, 0.00842806911326797, 0.0236431905624577, 0.0211799660893333, 0.0506566804146616, -0.0793857886114542, -0.136173587707137, 0.241179763965931, 0.00459285981587537, 0.00441760993533528, 0.0109380568162513, -0.0154212604048487, -0.0284023964650361, 0.0468509037896238, 8.68104352411505e-05, 8.34980070347009e-05, 0.000206742097729327, 7.77662418170243e-05, 0.000143227438853593, 0.000185995560246059, -0.000752719569419361, -0.0013863354276103, -0.00129116969293913, 0.00483950370236143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00652877742132648, 0.0172198053622791, -0.0100835618309506, 0.0195251039488213, 0.00276855422334106, 0.00354739278284621, 0.0184970121822559, -0.0413981115341341, -0.00286607158261648, -0.00172596335485652, -0.00170726307853493, -0.00275019694120753, -0.0363180547067536, 0.016112200793575, 0.00305654953686378, 0.00233062201042283, 0.0048055972738777, -0.0696229490571689, 0.116257872529598, -0.0787003334009247, 0.0608951799214986, 0.649943657200637, -0.208138951111156, 0.0666936707344561, 0.00404544389461575, -0.0599894079180596, 0.10126879776982, -0.0690428357230217, 0.00650857391428492, -0.00331084397955442, -0.00088868287866109, 0.00449418520894316, -0.00323471010148814, 0.0062900104675075, 0.262546773541793, 0.225455398280341, -0.0254307747166691, -0.30603626219929, -0.092565284917625, 0.179996535328407, 0.0174417456922689, -0.0208093974068782, 0.0123731957337331, -0.020330878897824, 0.00854372002011979, 0.011957693299125, 0.221016906233311, -0.263690843599809, 0.156789663691808, 0.189792675603336, -0.0797572741627939, -0.0214081135912331, 0.0766673450374756, -0.032218200402355, 0.0231891952485367, -0.0314773329510057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00858574731449899, 0.0157648753004523, -0.0118196797021563, 0.019707960384247, 0.0153251463175158, 0.0068247368416483, 0.0170656692030984, -0.0431419561966858, -0.0132859312546023, -0.00313228338759614, -0.00220943154814876, -0.00286604561350589, -0.0295531067577095, 0.00943259119854728, 0.00266080533945939, 0.00226463927967889, -0.0231797827124805, -0.0726756131892212, 0.124780298683106, -0.082015488398492, -0.0515609015277075, 0.218856107347192, -0.150272175335546, 0.0648054921715141, -0.00342534063541732, -0.0283345225038209, 0.0689689653012088, -0.0561822573222247, 0.0267888501632137, -0.00978290406589549, -0.00387759279960762, 0.00722618325024968, -0.00370795971687495, 0.0071621067453225, 0.621558100379749, 0.552501249632886, -0.110962179307842, -0.408107372713323, -0.106107915976051, 0.204952663667211, 0.0412919121935716, -0.0715303734534455, 0.0509272370439879, -0.0271117596075611, 0.0137374148224591, 0.0136156014808828, 0.0918493604928062, -0.159111523503951, 0.113282090987398, 0.0816446385611452, -0.0413689957486715, -0.0163971882951671, 0.231873293669398, -0.117489224878567, 0.0602870558259809, -0.0445312874461569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00728244989005017, 0.0132117409898727, -0.00729939888432002, -0.0116539403654932, 0.0195387056426205, -0.0109690858690789, -0.00648860340814756, 0.027528864934527, -0.0254704298617905, 0.00892944871598964, 0.00226644479881716, 0.0018288225557204, -0.0197968060956587, 0.00237595918769108, 0.0010194799310851, 0.00100887627534119, -0.0311859124881203, 0.0417262619381512, -0.086839836761721, 0.0523340502310094, -0.0242391457778125, 0.0111025773900733, -0.0390618253060835, 0.0288702594494081, -0.00161027694513697, -0.00387808858029452, 0.0317985080969108, -0.0376349350795189, 0.0409818725101213, -0.00560828431610174, -0.00334442030343108, -0.0163822876805217, 0.00311575927800587, -0.00577891319567471, 0.191503462471457, 0.214883898684752, -0.0957047798901591, 0.627694611711972, 0.0891613579747636, -0.165370846131076, 0.012722131933129, -0.0750581386916091, 0.077909037644902, 0.0416995784872781, -0.0311437274442787, -0.0109860662320211, 0.00988823433174061, -0.0583386862978682, 0.0605545379377077, 0.0110954774231796, -0.00828676301457344, -0.00494169284465326, 0.19138099827276, -0.142934721751187, 0.0271848592901333, 0.0794093452371631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0111121414793535, 0.00978040546374058, 0.00962857943557113, 0.0118223838397412, -0.0386200930353357, 0.0549301045311347, -0.0255353246076023, -0.0336121174078453, -0.0315495982714476, 0.0331063769654703, -0.009279481686203, -0.00223295070854487, -0.0102542626550715, -0.00120308329737536, -0.000725398750303325, -0.000833886962407598, 0.0582572468288328, -0.126131012729572, 0.160899807538945, -0.0638986839804833, 0.0189347929379131, 0.00458359170060305, 0.0125779136442874, -0.023862720875306, 0.00125789336011884, 0.00166566730191918, 0.00758070923223664, -0.0194939783441422, 0.0354479766349184, 0.00472287345005621, 0.00390727055762901, -0.0422408716007055, -0.0077220711591529, 0.0162454222693437, -0.135052204499447, -0.0818913657941354, 0.111811445560695, 0.732427557989167, -0.22097674739764, 0.464883125160772, -0.00897191069721797, -0.0297591450597252, 0.0673887642738483, 0.0486572926877846, -0.0803024716569526, 0.030883537955155, -0.0029160538912591, -0.00967232885842995, 0.0219027222761858, -0.00176820242786581, 0.00291818589781629, 0.00241423827269633, 0.0520988018747553, -0.0859822306134802, -0.0157184470409666, 0.140584097846635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00476412582200842, 0.00595231255869339, 0.0280757815135754, -0.0295941247801588, -0.14266986579011, 0.291843625603676, -0.302869456861528, 0.168138269227149, -0.0268382683375482, 0.0466279404547277, -0.0373939339722442, 0.0111699141963796, -0.00359294678603286, -0.00126119637132602, -0.000974613380291062, -0.00126885446246886, -0.0275920932079783, 0.0681032668396033, -0.0986835027874696, 0.319641098476688, -0.00369386434939309, -0.00184206276700084, -0.00257202845525767, -0.036309861209318, -0.000245394151048665, -0.000227431231249938, -0.000410933730046623, -0.00683041084421039, 0.0173265003015643, 0.00687907171497681, 0.00720440458057825, -0.0340478467842398, -0.0183200746196736, 0.0370052357530366, 0.0253065278441702, 0.0181540378518078, 0.206163069251945, -0.0898530971770404, -0.524251903161903, 1.05895121462285, 0.00168118623991424, 0.00224139766285718, 0.0329387331902805, -0.00596920255192279, -0.0647270320843949, 0.0703492087783403, 0.000225067154909295, 0.000300064908350548, 0.00440964052015391, 0.000161455481944249, 0.00175074209144582, 0.00183354017309724, -0.00221809903691524, -0.0240519510403532, -0.0129415977638842, 0.064054214880287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0302538880961422, 0.00246776876963702, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.0137211579663086, 0.0315457931627577, -0.038636441650314, 0.0280583803965702, -0.000590197519305592, -0.00031977238393541, -0.000291122581603045, -0.000414169528781521, -0.184397876468037, 0.480186648330887, -0.713797405978017, 0.802925731904298, -0.00793163153750679, -0.00486754060925082, -0.0053784079147495, -0.0118519803113755, -0.00052692134942565, -0.000394510258857673, -0.000478814744853861, -0.00112200145901495, 0.00350406908242368, 0.00214037926285329, 0.00261482209238985, -0.00908234190642575, -0.00744444616732436, 0.0149269125729195, 0.053338560217129, 0.0395429056190295, 0.0748264123822475, -0.167793715365594, -0.213032160197368, 0.427152317178935, 0.00354343567185696, 0.00320492075651014, 0.00666144891221001, -0.0111470244813418, -0.0172660855678771, 0.0283769706540023, 0.000152416213593885, 0.000137855440824856, 0.000286533442193371, 0.000112994800092413, 0.000175022302174377, 0.000213818265916596, -0.00123819818524007, -0.00191789619302759, -0.00157202570775307, 0.00667062852425399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00254449201900171, 0.0124299526187293, 0.0100401662714878, 0.0195251039488213, -0.00508376488671075, -0.0317222402070978, 0.0822967853898159, -0.0686320373360361, -0.00204964204175437, -0.0012189336202146, -0.00118292063155352, -0.00183063682142867, -0.0430586021516742, 0.0506272851755826, -0.0189383076837503, -0.00284867343610859, -0.000856872010174149, -0.00161605386869111, 0.0393067632837017, -0.0523859677188017, -0.0180010510271373, 0.0671213089149899, 0.629292918952211, -0.0815183617627336, -0.000480145834420704, -0.000964790796582565, 0.0241807101537086, -0.0328660874700564, 0.00762045121549463, -0.0102064605800899, 0.0052898064667229, 0.00516240990083447, -0.00957976934285656, 0.0069412250876227, 0.0101031421758618, 0.339146109455535, 0.151374443887892, -0.171539508681194, -0.274137109924834, 0.198631858112276, 0.000269483244227339, -0.00487483111382461, 0.00581659421565785, -0.00457550953039688, 0.00394040230937947, 0.00529814948649647, 0.00566126746200266, -0.102409791178522, 0.1221942227509, 0.190039573917173, -0.163660980479209, 0.0848222462719288, 0.0286048777260463, -0.0246343550379299, 0.0457134252619619, -0.0231217705022786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00481040329364079, 0.011274129402522, 0.0110939404354587, 0.019707960384247, -0.0231802053744832, -0.0276298646655864, 0.0870824133797191, -0.07152307771332, -0.0094228577941513, -0.00219692843858316, -0.00152363049106581, -0.00190775015176707, -0.0347488262460901, 0.0337592671031057, -0.00742856718436119, -0.00228007999607842, 0.00736457670424265, 0.00438882359425985, 0.0397000546457264, -0.0545926623435965, 0.0271584695282767, -0.0674411898835215, 0.19356039727999, -0.0652473476293612, 0.000724403591411426, 0.00117997939276461, 0.0153905329075907, -0.0265233404201763, 0.0311498025027811, -0.0344250066126228, 0.0104494503526854, 0.00826141494223326, -0.0125944886537102, 0.00790361085687728, -0.0622282391086322, 0.896985621982872, 0.299024122342193, -0.215261263528709, -0.360407082565476, 0.226171733444769, -0.00165982695934244, -0.0156940372993716, 0.0237762510293563, -0.00574170912796191, 0.00630583373704137, 0.00603272639544599, -0.00612097092715925, -0.0578751571051006, 0.0876800683880995, 0.0882304078161745, -0.0968990713114824, 0.0294129801131076, 0.0814105285467183, -0.0894091368997129, 0.13630381334133, -0.0327105924159353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0117698440494141, 0.00930958844834857, -0.00170955493305552, -0.0116539403654931, 0.0063007969271564, -0.00613847546289123, -0.0581932607657197, 0.0456388471838217, -0.0178289300066306, 0.00619513050775209, 0.00155135505195025, 0.00121733460618684, -0.0229736761944516, 0.014783805878625, 0.000390512398712615, 0.000216558881969607, 0.0354164151936628, -0.0239832387341913, -0.0228191073912385, 0.0348355559312483, 0.0456362358439278, -0.0572326192875786, -0.00574410374506496, 0.00619710390792813, 0.00121726495336642, 0.00152574562586508, 0.00579711893708326, -0.0175355170299285, 0.0471372205926179, -0.0344284557477548, -0.00124580290150344, -0.0185903243576042, 0.0186004631507436, -0.00637721311597531, -0.182482550339248, 0.506413169593175, -0.0356502118925021, 0.273447788383992, 0.532275572502243, -0.18249194844047, -0.00486739559083215, -0.0135003025897684, 0.0359792454393944, 0.007293730589739, -0.0141897599063135, -0.00486764626837011, -0.00627193949230212, -0.0173959727313477, 0.0463614773369989, 0.0174054601488659, -0.0338618622572621, -0.00122530056414597, 0.0554961977510381, -0.107966384569833, 0.108025267288504, 0.0583303756759752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00224468746929307, 0.00677269421349489, -0.011422245664625, 0.0118223838397412, 0.0552995939385817, -0.104936601954282, 0.091016399340666, -0.0557239934719333, -0.0217460457985153, 0.0226775867458491, -0.00629687867371574, -0.00148633784230117, -0.0117175620738284, 0.00293737332109396, 0.000940361805028244, 0.00079479332173103, 0.0096727941761986, -0.0153043533659063, 0.00875331817504017, -0.0425334207826391, 0.00521205405512031, -0.00198233611792258, -0.00130720099680845, 0.0227440073355646, 0.000139022218178625, 0.00013714594419779, 0.000282495939903949, -0.00894386721374997, 0.040255293053799, -0.011423157975321, -0.00496853616119718, -0.0475204821291954, 0.0183210544613895, 0.0179273362417273, -0.0271669660730638, 0.0158793811192681, -0.142180891317948, 0.0660584269543608, 0.524279942561052, 0.513013202099966, -0.000724630221544336, -0.00109859912110399, 0.030726357023354, 0.00176199036837838, -0.0362717841321434, 0.0136837094467272, -0.000390457174614212, -0.000591965248075811, 0.0165564810752098, 0.00022822637867507, -0.00469819704416965, -0.00204349462353722, 0.00312773309752881, -0.0643865379587121, 0.0248235963876549, 0.103266475966667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0225257270787523, 0.0040525679656141, 0.0116134748343782, -0.0295941247801588, -0.064816550186493, 0.151531129548398, -0.198356641546219, 0.278748753109168, -0.0182236775617251, 0.0315481269099233, -0.0251644118483799, 0.00743512434099087, -0.00404462887250172, -0.000558857812259051, -0.00034054118705871, -0.000383710664555207, -0.118755279768057, 0.255827607455979, -0.289712660115727, 0.212765404450057, -0.0263569760650683, -0.00453184613547838, -0.00392058013420601, -0.0109803617251885, -0.00070302518705643, -0.00057493029574272, -0.000816247856154016, -0.00308721416081534, 0.0194350005513996, 0.00303184316836334, 0.00248993575190885, -0.0379858317474892, -0.00798650751792754, 0.040836445679899, 0.157600788983965, 0.0349049822683114, 0.0712526331790855, -0.43732301110713, -0.228543925328445, 1.16858608987676, 0.00420371911717641, 0.00442820236576538, 0.0148344905822274, -0.0116648090026967, -0.0289941058569006, 0.0311699434866488, 0.000932988616355316, 0.00098281124000345, 0.00329242046313135, 0.000206635711155651, 0.000513614726283007, 0.000421811946945169, -0.0071860231210129, -0.0178616139374965, -0.00375539793211316, 0.0470512180454069, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0278235382849626, 0.00165731029056243, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660335, 0.700205786033841, -0.00920510912404793, 0.021133146858934, -0.0258282524616005, 0.0186767367580086, -0.000656420170570248, -0.000300087035939448, -0.000253714313457539, -0.000343356021220877, -0.164115051478879, 0.408587395180542, -0.565496681950332, 0.534458237398515, -0.0117031127641388, -0.00580187045310441, -0.00555494811880148, -0.0098255630134691, -0.000312159597513796, -0.000224404254494096, -0.000254123794305392, -0.000501037229845036, 0.00389172137830555, 0.00200434369960687, 0.00226908998258709, -0.0100656565735367, -0.00694151636999116, 0.0164723191745268, 0.0752423816171068, 0.0438841037852118, 0.0649328546150945, -0.220382521134524, -0.198640193522426, 0.471376064563758, 0.0020069559300107, 0.00169734565320872, 0.00297050180073034, -0.00587830951327942, -0.00768298859828463, 0.0125731132868106, 0.000143116864357656, 0.000121038426398586, 0.000211827722239452, 8.34709799703856e-05, 0.000109097111329462, 0.000123507341827496, -0.00108250526785368, -0.00141484139474421, -0.0009757083038552, 0.0048999304383195, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00396719586028161, 0.00700570982272341, -0.0283386095943201, 0.0195251039488212, 0.0724066424646242, -0.168855440911289, 0.180838102102828, -0.0944993352356274, -0.00114511302775302, -0.000673043912201758, -0.000641631662811089, -0.000957221224723049, -0.0331231875874076, 0.0614263985245277, -0.0546792511962839, 0.0212151322982277, 0.000881675779232968, 0.000801959357219178, 0.00164117293051704, -0.0273920854159158, 0.0255030826818181, -0.0731920669423043, 0.139859224732049, 0.607097608174252, 0.000258330833524054, 0.000259692769779414, 0.000557467377202875, -0.00960126525101323, 0.00579356513688948, -0.0121650083715785, 0.0147231629685926, 0.00385553391728589, -0.0110070831616925, 0.00499744607324125, -0.00690326988915846, 0.0311157999146772, 0.421321766809783, -0.00986172950072123, -0.314981484277462, 0.143008184695501, -6.99259570603708e-05, -0.000110401968427902, 0.00167935394144966, -9.98933671548623e-05, 0.00111758579171963, 0.00144858658908353, -0.00202265674810734, -0.0031934534160672, 0.0485764761033609, 0.00911692338278994, -0.101998203955028, 0.123447196538075, 0.000859882570604534, -0.00962018371015529, 0.0274644613171976, -0.0087044874030531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00163104362451016, 0.00630096536900619, -0.019592966199785, 0.0197079603842468, 0.097663716224066, -0.196492083346238, 0.196789453010076, -0.0984800038037924, -0.00522532202805492, -0.00120559810201169, -0.000822987370205929, -0.000997542994527334, -0.0265321488636245, 0.0418649924033502, -0.0285354595072402, 0.00502315034416617, -0.00176946150425581, -0.000595996850338331, -0.000775277112656202, -0.0285459434103635, -0.00898463593005264, 0.020696286407709, -0.0268812006793818, 0.143743744633529, -9.10089387108342e-05, -8.65533292724592e-05, -0.000164932469374611, -0.00769075132780622, 0.0235366042308362, -0.0420202768766607, 0.0388570541739818, 0.00614426323170689, -0.0148820249349665, 0.00569033110762529, 0.0116355043739908, -0.0395842756636926, 1.11194332036726, 0.00578806775186331, -0.425867801143152, 0.162835958625975, 0.000117860635943563, 0.000165544232334143, 0.00682244665408587, 5.86296325617575e-05, 0.00178100917684939, 0.00164942997065799, 0.000598450377074356, 0.00084056909645292, 0.0346417252885991, -0.00203594308727194, -0.0618464275405144, 0.0571907222901659, -0.00114461233433236, -0.0347702174190687, 0.0842169716874292, -0.0123143225387023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0126104679035144, 0.00513339611045784, 0.0107306055922191, -0.0116539403654933, -0.0616020791184596, 0.199029865952139, -0.142163327346853, 0.0628400509032689, -0.009769679837199, 0.00336641557499374, 0.000832405683526143, 0.00063653178445448, -0.0173335456893195, 0.0196253949660864, -0.0067938567600304, -0.00110709786801747, -0.0295896009607123, 0.0136392839755107, 0.00544335694053353, 0.0182151550335337, -0.0524984143521605, 0.0795137525688741, -0.0444271201886012, -0.0316809934644761, -0.000531777248558544, -0.000465575059279364, -0.000751445762370898, -0.00502439475260479, 0.0352681842662438, -0.0451290574006878, 0.0211211319918735, -0.013734493942751, 0.0237601277454768, -0.00459137662910275, 0.14289168101562, -0.295112794978876, 0.604407671559529, -0.0898140827333987, 0.679925843563979, -0.131387998461278, 0.00144740647712975, 0.00172796720790325, 0.0102230255215698, -0.000909762444964251, -0.00398115426194389, -0.00133088111664939, 0.0025680151980844, 0.00306579120779297, 0.0181378799422368, -0.0053036967391553, -0.0232091739926475, 0.0108622704650949, -0.00953110774137406, -0.0417084816104069, 0.072154012755323, 0.0219592189204033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0253972624653879, 0.00367511242526291, -0.0036644845302725, 0.0118223838397412, 0.0220838867907562, -0.0613915956629152, 0.29971631803346, -0.0767262716388462, -0.01174846789109, 0.0121800061564549, -0.003352220481887, -0.000777190818575108, -0.00871645838744103, 0.00519517947069492, 0.000292876250127097, 0.000165965533133618, -0.0936105122386034, 0.117950744221066, -0.0442674609131464, -0.0222402896394522, -0.0694517908308397, 0.0503099322824038, 0.00386755227615413, 0.00474931180199906, -0.000703504718975623, -0.000562698709720083, -0.000767316927101967, -0.00252659949488245, 0.0297697731931807, -0.0200255369950434, -0.00151991921677785, -0.03483292545168, 0.031546510726741, 0.0129070725951027, 0.288289419424248, -0.264445516332456, -0.0434943939143443, -0.459983218363609, 0.902742954379208, 0.369352063935649, 0.00292019780295708, 0.0029577291020033, 0.00862922652404659, -0.0046593523492651, -0.0100968590612784, 0.00374131346123191, 0.00216656187585747, 0.00219440720934264, 0.00640222151602395, -0.00198736941186268, -0.00430664765188665, -0.000326870461831387, -0.0113881603082125, -0.0246782473142257, 0.0223499055425406, 0.0388759908814476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0300055156673334, 0.0021646482732958, -0.00428139506100088, -0.0295941247801588, 0.0263560489909357, -0.0712908034861194, 0.124137438646549, 0.383808683073226, -0.0097093743841582, 0.016751655815595, -0.0132940824930264, 0.00388775028686306, -0.00296712446719286, 0.000185712664972401, 8.46394591314278e-05, 8.15846378215415e-05, -0.145766077772663, 0.280164836849329, -0.262749987106195, 0.111252848540127, -0.044545207418481, 0.00310597107865735, 0.00167285081968815, 0.00233464669412085, -0.000451216062995052, -0.000332623551692749, -0.000393080450660113, -0.000860066651710805, 0.0142092312312, -0.00100238451978055, -0.000612533599599077, -0.027630903596213, 0.00261350337251305, 0.0294008525198293, 0.237643788379266, -0.0198115605033999, -0.0175284168873222, -0.54610911038394, 0.0747886755596979, 0.841342254771774, 0.00240718813093282, 0.00212165260149867, 0.00411876416494408, -0.00553175564855325, -0.00800924228238432, 0.00852228919405508, 0.000735621731929481, 0.000648363848762942, 0.00125866873032939, -6.13263008015822e-05, -8.8792280897515e-05, -5.42588740760524e-05, -0.004692192580246, -0.00679366725474102, 0.000642587464437393, 0.0177130351991931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0191690324088709, 0.000873918129073724, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.00484906798185403, 0.0111175665009624, -0.013560134503665, 0.00976587416141814, -0.000476116367454441, -0.00017948522686239, -0.000140724751873928, -0.000181253151723545, -0.109706187629544, 0.262185091653747, -0.340572586312384, 0.279462732628028, -0.0107717424744165, -0.00423279236974628, -0.00353440393167901, -0.00518678617406009, -0.000109111249280836, -7.56002252732565e-05, -8.0513836682063e-05, -0.000138009650255301, 0.00281896164772188, 0.00119640185951797, 0.00125348284008024, -0.00727633935672327, -0.00412667615030109, 0.0118595097748234, 0.0664794510482459, 0.0300484980775645, 0.035869982963235, -0.182750526031733, -0.118090011664295, 0.339374740501439, 0.000673396711126706, 0.000536684303255552, 0.000817119380216468, -0.00185115251774766, -0.00210915884939895, 0.00343766126960435, 6.61189319590008e-05, 5.26955245615983e-05, 8.02306572190406e-05, 2.98855446086229e-05, 3.40508738614952e-05, 3.56754594919057e-05, -0.000469376814715587, -0.000534796702578482, -0.000303302620946379, 0.00184464173156589, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0302387678330058, 0.00234316248688222, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.000380508993873417, -0.00022170412581743, -0.000208599314241447, -0.000303030395125595, -0.013263085883049, 0.0312018466643444, -0.0394682247241067, 0.0302540966567125, -0.00535611326543933, -0.00351055389355507, -0.00396473437419381, -0.00867159466642664, -0.186693590381844, 0.494062814074891, -0.750151206494617, 0.865758905462842, -0.0004968107215617, -0.000369581508087825, -0.000443618433201049, -0.00100999427280182, 0.00229970513974527, -0.00609865929245053, 0.0103483935384558, 0.00151045400183994, -0.00537329878448927, 0.00190641688386355, 0.0364144726787388, -0.115913919569765, 0.296132254907867, 0.028708382496437, -0.153763681235287, 0.054554509211011, 9.69026328636493e-05, 8.67088960805262e-05, 0.000175124329341963, 7.63959394305888e-05, 0.000115022243288406, 0.000145175123742096, 0.00337765456969342, 0.00302233995531936, 0.00610416325940206, -0.010751691602952, -0.0161878196213959, 0.0274679925437241, -0.000792444136599933, -0.00119310925359817, 0.00424437453528164, -0.0010512035833943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0298426277029342, 0.00209472514255048, 0.00525730855264606, 0.0197079603842468, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.00172706393075725, -0.000395389812587736, -0.000266770877594788, -0.000315795178772615, -0.0105672909703008, 0.0213868154213814, -0.0217703682626921, 0.0112777292031753, -0.0265751876169891, -0.00675219580951283, -0.00535145363896152, -0.00903687495372642, -0.16260413707782, 0.365229353082629, -0.43671602204642, 0.32272636006408, -0.000432706224703941, -0.000317855761650279, -0.000373373839063189, -0.000804707400158995, 0.00930170605810025, -0.0212166270111514, 0.0289520555433683, 0.00239999837307283, -0.00733851328906417, 0.00217073744055723, 0.158848151032726, -0.425607910612667, 0.828499366632536, 0.0481442357685089, -0.210000758077652, 0.0621183733200974, 0.000422711162026642, 0.000370402667393228, 0.000708332127892716, 0.000128116731068459, 0.000182761736817305, 0.000165303339060827, 0.00258641951000188, 0.00226636240431702, 0.00433403278578905, -0.00692989245680942, -0.00988566575807101, 0.0134899078897133, -0.00301399817492368, -0.00429954414710334, 0.0131467846872074, -0.00148714787906026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0280378223106105, 0.00169002122151249, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169526, -0.227302951843895, 0.075723802663307, -0.00320141581283998, 0.00109628782576182, 0.000268548259483189, 0.000201508776833715, -0.00684455236573056, 0.0102186321500794, -0.00632708254785052, 0.000743550878447724, -0.0564738728270904, 0.0210073440323391, 0.00584313287859441, 0.00576642628111637, -0.120739823396356, 0.195812008554932, -0.137666072131894, 0.0212776405782485, -0.000321301008031941, -0.000231343120081939, -0.000262683898321667, -0.000521217969199393, 0.0138399924095759, -0.0232788254452493, 0.0193014916091432, -0.0053394417644465, 0.0120265244814157, -0.0017515102309489, 0.265205427918547, -0.506505871964672, 0.552336380720341, -0.116176763860625, 0.344154075717301, -0.0501216611310331, 0.00070573874409262, 0.000598414007520878, 0.00105392615206964, -0.000309158240324479, -0.000406602630006284, -0.000133378862024167, 0.00150885298032611, 0.00127939519584917, 0.00225326954047066, -0.00288170155665653, -0.00378999256368308, 0.00314244848128991, -0.00390294190895943, -0.00513312031819335, 0.0115618073754217, 0.00265192061850326, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0235888506057286, 0.00119584539165621, 0.00832487477036386, 0.0118223838397412, -0.0614326220634957, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.00381032346110895, 0.0039330342087917, -0.0010753656842843, -0.00024603762929408, -0.00340656404721311, 0.00290253459641739, -0.000401013389645514, -0.000146155552097639, -0.0784456611970352, 0.0857621692652027, -0.0255955981627659, -0.00704067522019342, -0.0701331978298503, 0.0632915073048819, -0.0095448252899039, -0.00418242435882056, -0.000186631606087948, -0.000131248572870963, -0.000143263535890369, -0.000259412493288198, 0.0115838154219249, -0.0111148703955161, 0.00205374017223559, -0.0134650954278909, 0.0172791285751941, 0.00492376721147812, 0.252592041211183, -0.26455350066724, 0.0587703498073266, -0.320492997714484, 0.494463927062683, 0.140899771694796, 0.00067217323314707, 0.000548608666298348, 0.000882116525256754, -0.000852864616960582, -0.00102537745625838, 0.000374948690527947, 0.000600946663166341, 0.000490475566622494, 0.000788643397617852, -0.000629404405193009, -0.000756716922147753, 0.000139821688128063, -0.0025119095787861, -0.0030200050547621, 0.00387543154955237, 0.00469488656026245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0161601125382386, 0.000696217557866054, -0.0107414954878784, -0.0295941247801587, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.00311691852162233, 0.0053640568002266, -0.00424076416664745, 0.00123075677298999, -0.0011477990315343, 0.000243419538752938, 8.31834643459835e-05, 7.02142929647871e-05, -0.0741443373095676, 0.131860036949592, -0.109561390037619, 0.0352196480617273, -0.0273035043961884, 0.00598377507353513, 0.00214906927708259, 0.00200927002101692, -7.26574152465553e-05, -4.99388244906008e-05, -5.24846012753695e-05, -8.74057861344252e-05, 0.00548279610120566, -0.00130887565395687, -0.00059742330548216, -0.0106212767903118, 0.00338668826964587, 0.0112157851875389, 0.134778903993248, -0.0338151876404035, -0.0170960168773581, -0.274403811056705, 0.0969143307348483, 0.320953754397271, 0.000358660436103903, 0.000282211597182957, 0.000417519173892726, -0.000730216581574204, -0.000808818462207817, 0.000854090737576828, 0.00013207599055083, 0.000103923858030993, 0.000153750603397619, -3.31370434910434e-05, -3.67039769225859e-05, -1.67531660863988e-05, -0.000746380729285704, -0.000826722549057942, 0.00026360781424163, 0.0021391272354126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00734348804657594, 0.000278404956314804, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.00154360799326991, 0.00353550741513591, -0.00430576776528913, 0.00309161208448705, -0.000182636570873247, -5.79074942608703e-05, -4.27474677586908e-05, -5.2981968925783e-05, -0.0411121542477164, 0.0953904978590433, -0.118457806464408, 0.088470355758825, -0.00486430680960219, -0.00156238526998174, -0.00117604374843836, -0.00151614546442362, -1.29444174866676e-05, -8.73387187585268e-06, -8.9056687601341e-06, -1.39079164692274e-05, 0.00108025695398478, 0.000385414218265771, 0.000379616920950065, -0.00278416799838713, -0.00132537357759348, 0.00452414480070645, 0.0291460988640958, 0.0106032943169844, 0.0108632141195973, -0.0765964287661009, -0.0379272265467478, 0.129464075403039, 7.75607474139545e-05, 5.92733532530608e-05, 8.22624045642498e-05, -0.000203830924064327, -0.000212016551629515, 0.000344517134121841, 9.17683051880787e-06, 7.01310308717697e-06, 9.73312106864735e-06, 3.33851316914159e-06, 3.47258421623531e-06, 3.42035053576975e-06, -6.22795393422915e-05, -6.47806177063136e-05, -3.08381243869886e-05, 0.000222769464589115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0125131983511539, 0.0112128454303619, 0.0208770933958505, 0.0195251039488212, -0.00350519620229005, -0.00213578148775561, -0.00215103292273919, -0.00360148326124416, -0.00226985035225311, -0.0017969233795521, -0.00280290297783902, -0.020199909014669, -0.00250226696008475, -0.00195073523785067, -0.00302124952471538, -0.0216728867138269, 0.110772181805886, -0.208071106282044, 0.201984382314542, -0.0990472496003532, 0.12211446906808, -0.225881439142981, 0.217718994875169, -0.10626977667799, 0.684912572298822, -0.294334759695953, 0.183176207073003, -0.0688168296738453, 0.000589501209135734, 0.000632108757277316, 0.0039298861731213, 0.000641888290245476, 0.0027629082188111, 0.00401918370631311, 0.0682600995319011, -0.0455513793747795, 0.0192696123733749, -0.0462561176199209, 0.0135475095344602, 0.01970746954651, 0.382855534749969, -0.0593557148961152, 0.0162123406290089, -0.259440152714044, 0.0176530793253, 0.110534761061572, 0.422057231279378, -0.0654333199232, 0.0178723695424865, -0.281647539217126, 0.019164135927162, 0.119145434915934, 0.0851123010939679, -0.00579129401155795, -0.0249277235077292, -0.0253133873528487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0273770165770782, 0.0164398153896086, 0.0192875795853982, 0.0197079603842468, -0.0163810014243475, -0.00390242657177209, -0.00279689872237266, -0.00375319132544456, -0.016455224270786, -0.0049261659299401, -0.00514129646939605, -0.0210508054013365, -0.00318431349806172, -0.00243126567889085, -0.00354041384624249, -0.0177795380457136, 0.180416762354003, -0.246495727242803, 0.220428635877593, -0.103219493481903, 0.0349131389634356, -0.121655788733429, 0.151792179115676, -0.0871793205263414, 0.195819938431223, -0.223629290575918, 0.191612435862306, -0.0875743328428927, 0.00366524434684612, 0.00373089742608173, 0.0162853332138365, 0.00146285721496208, 0.00446348462723339, 0.00457643479011305, 0.18340167254765, -0.159958997720859, 0.0798527093604434, -0.0627187368589137, 0.0218860330331136, 0.0224398673581591, 1.02865870250385, -0.294038759305839, 0.100800793821525, -0.351775278729851, 0.0402311973122856, 0.125860165397376, 0.199059686904237, -0.0569005669447605, 0.0195063478381803, -0.173615581371305, 0.0198557520467498, 0.0866701764653483, 0.261733439364735, -0.0299334554728394, -0.0913332599904381, -0.0358110939767408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00769851183855557, 0.0241754756606097, 0.0163965439250799, -0.0116539403654934, -0.0318063021955916, 0.0112436886986538, 0.00289018334287352, 0.00239490987846134, -0.053345643375107, 0.0225203407828077, 0.00770119898836352, 0.0134325104780699, -0.00360710415218154, -0.00266909142798132, -0.00355083307641811, -0.0120625997765332, -0.0489992445747002, 0.267079884396059, -0.160437252917034, 0.0658643173647256, -0.0033132111148485, -0.0316540782798461, 0.0739736637383714, -0.0591471639811747, -0.0185830554278955, -0.084345637181598, 0.148164197799285, -0.0992018341832287, 0.00899172423205331, 0.00848823481059479, 0.0251793692370999, -0.00484271172850328, -0.0101935082532455, -0.00369260335515099, 0.106637314753757, -0.17683338363082, 0.123463292225494, 0.100887065451002, -0.0499823516793692, -0.0181061313655987, 0.598104697243668, -0.471191240681805, 0.247288544676478, 0.565852843131987, -0.133183258819301, -0.101553215623276, 0.0404424016727429, -0.0318608188635712, 0.0167210568633936, -0.067064392482707, 0.0157847653325304, 0.0468236851945559, 0.225928762376926, -0.0531762439644613, -0.11193160198611, 0.0638592703693535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000692705759854005, 0.0299005753431563, 0.0123418011338162, 0.0118223838397412, -0.0399845505836983, 0.0422013001459018, -0.0119330872043855, -0.00292413044299188, -0.105804882736616, 0.125936349182971, -0.0430093491732373, -0.0164007895111112, -0.00299169409535076, -0.00213868376258161, -0.0025830413608493, -0.00634120372040321, 0.00436230428657873, -0.0132065134800397, 0.346278038065547, -0.0804188321427701, 0.000123346670198571, 0.000224276439036625, 0.0207966526318348, -0.0310931493406901, 0.000691823711102646, 0.000808339326836062, 0.0620609909795397, -0.0822769537703659, 0.0117309116645637, 0.010229558537387, 0.0220482695108047, -0.0170322841176118, -0.0265051855745517, 0.0103804813719163, -0.00123018051608071, -0.0823604990239468, 0.108110410393762, 0.137130787640276, -0.129964235452736, 0.0508991465589968, -0.00689980563393331, -0.296844513069608, 0.32262111230204, 0.769135723398207, -0.468418363737865, 0.285481857011572, -0.000195095984610725, -0.00839344984860782, 0.00912229806172777, -0.0130616624471412, 0.00795480220858004, 0.0171453755662002, 0.0716446307025766, -0.0436329501586936, -0.0679004315061573, 0.113054677471619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00630648166263267, 0.0274659679169433, 0.0076323699375308, -0.0295941247801588, -0.0344990911194154, 0.0601371945948343, -0.048470472808498, 0.0146274102792548, -0.130480475709523, 0.243240342500803, -0.217371432971372, 0.0820418520171364, -0.00151964692640032, -0.00105291633395801, -0.0011674186668964, -0.00225357922813276, 0.0395383094710885, -0.109983778158357, 0.203317202134925, 0.402280019603826, 0.000460484759395091, 0.000476087623058937, 0.00109193877884041, -0.011050090579167, 0.00258275537263015, 0.00213506992707098, 0.00441662708652168, -0.0417930162395376, 0.00786323208030576, 0.0063996014174333, 0.0109037695623235, -0.0172183619845816, -0.0215344921497769, 0.0236455632872441, -0.00355544628755483, -0.00598583280785776, 0.0534650123740606, 0.0161051023871777, -0.10559117951605, 0.115942502867309, -0.019941697990938, -0.0268441585068063, 0.216252986347212, 0.0903298944614693, -0.473535838844076, 0.650295403023376, -0.000232251912743017, -0.000312641740036449, 0.00251860045911447, -0.000391011706139555, 0.00204979821318791, 0.00349248740788522, 0.00292009506579971, -0.0153079960375443, -0.0191452543972817, 0.0515110081076787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0287678230747218, 0.0152327680704991, 0.00320507108782464, 0.192230415140459, -0.0178382131382483, 0.0410650708630083, -0.0503948504088264, 0.0367434731025109, -0.0864392103719315, 0.204225002221374, -0.260674168295516, 0.206085870657986, -0.000323458282952951, -0.000218849807463798, -0.000227625898028604, -0.000374392247516164, -0.179978494886957, 0.485949924576903, -0.76622985466315, 1.01051141642987, -0.000673485269868858, -0.000520749400289016, -0.000669087236009444, -0.00183577670380734, -0.00377742729515856, -0.00269364658708965, -0.00332750776727577, -0.00889568296255176, 0.0019735175282232, 0.00152661443863664, 0.00222573096474404, -0.00533088841509628, -0.00578037173244191, 0.00953798155162816, 0.00469595144355317, 0.00448735510346736, 0.0109135407614039, -0.01566969938845, -0.0283431930980594, 0.0467680739919016, 0.0263385347136999, 0.0232114501770194, 0.0542752718892441, -0.0878878170391836, -0.146608993334405, 0.262311600776789, 9.85596371985307e-05, 8.68579870971871e-05, 0.000203099798998061, 9.41815724236597e-05, 0.00015710784485068, 0.000229055736824683, -0.000849299280487156, -0.00141674826781034, -0.00153620391228609, 0.00536437454800381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0251141783214144, 0.0170982512251827, 0.0160091858217586, 0.0195251039488212, -0.00316207558373234, -0.00241577235429517, -0.00353354291864182, -0.0181912548602127, -0.00335839069175039, -0.00254526063085152, -0.00367028490867606, -0.0177284701790032, -0.0187003136617075, -0.00453904348042354, -0.00447483985261502, -0.0171592587463127, 0.0293790293907044, -0.114578371119061, 0.148172383047726, -0.0869289168370505, 0.163589384055957, -0.204331219412855, 0.180652919655244, -0.0841378732334323, 0.159427677701374, -0.212238483655012, 0.190336131394753, -0.0893615104409751, 0.00421763175802401, 0.00135971169586784, 0.00390122508841162, 0.00424553498359221, 0.00398337890666877, 0.0178172618556884, 0.189862433322843, -0.0548926656233985, 0.0191290770071514, -0.171395695833932, 0.019531906036562, 0.0873642936180387, 0.185032341811612, -0.0570169166961805, 0.0201544183268209, -0.167035397269227, 0.02028775696638, 0.0851417500342237, 1.03030384104418, -0.317483677185369, 0.112224567947569, -0.297879486990314, 0.0361797962355783, 0.103805482586356, 0.276786505750101, -0.0336178884956979, -0.0315420290818589, -0.0984861631531847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00383082689433906, 0.021438292355929, 0.0205403356838658, 0.0197079603842468, -0.0201247738104086, -0.00584323645333997, -0.00577935460978674, -0.0189575391547739, -0.0209027123750645, -0.00602728243276173, -0.00589038572642255, -0.0184752602365971, -0.0204312959399314, -0.006146777995273, -0.00607356716536536, -0.0191704752937161, 0.013585892958652, -0.128120058977522, 0.160325430484326, -0.0905906908173126, 0.0132794918987445, -0.130660138804077, 0.16531129124443, -0.0939995744532918, 0.0129416622398115, -0.133170339698606, 0.170518145142878, -0.0976332000889083, 0.022651485919203, 0.00883256817957504, 0.0214011552624068, 0.00846553253191374, 0.00809465779372021, 0.0202875864800227, 0.481495556956455, -0.240406207919515, 0.104937381919501, -0.230416174847411, 0.0396909506048684, 0.09947716301179, 0.469246332285472, -0.245024815275157, 0.108242622668801, -0.224554398029832, 0.040453480482955, 0.0969464685915432, 0.458663474463193, -0.23949879918387, 0.105801439419834, -0.229006363638902, 0.0412555021999973, 0.0999613464691266, 0.843911139358477, -0.152030613093807, -0.145370156280727, -0.139329327795018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.011516222386443, 0.0272195064369147, 0.0267098865309275, -0.0116539403654934, -0.0579732173172458, 0.0239119304978304, 0.00786274267358239, 0.0120967981262487, -0.0588573409883908, 0.0241488423712536, 0.00787093469350962, 0.0117890561421181, -0.020102108874697, -0.00778634204845769, -0.00771798708392565, -0.0192964308978001, -0.056836811610785, 0.109442245504125, -0.114072987754541, 0.0578058834528901, -0.0194120182105404, -0.0352876028153144, 0.111856327157735, -0.0946171790250353, -0.0189181773662324, -0.0353243681982649, 0.112964564404558, -0.0960601434065918, 0.048701865326189, 0.0236011963360776, 0.0469972581018548, -0.0249998751193354, -0.0243385216796773, -0.0163695132433425, 0.220716232256438, -0.3420507329146, 0.23044406538496, 0.362321701221159, -0.119340321283624, -0.0802654736153619, 0.215101221529171, -0.342407108105343, 0.232727232578611, 0.353104253921159, -0.119464659358852, -0.0782235236836697, 0.073465571186993, -0.116945564495709, 0.0794855508053783, -0.113851854988648, 0.0385191424984336, 0.0767034880809724, 0.712118434341345, -0.240928805691316, -0.234555210079491, 0.248455666275406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00801784374588162, 0.0302616520385567, 0.0302516266319403, 0.0118223838397411, -0.105865563934372, 0.12409022809239, -0.0413394531163359, -0.0147699151361857, -0.105632026424745, 0.123383715498899, -0.040873117613714, -0.0143941691791134, -0.0150864946514282, -0.00725880667245082, -0.0072180187587036, -0.0147352005106211, 0.0450891617645782, -0.110330824686386, 0.228755234415405, -0.0705796677815741, 0.00643968899227128, 0.00649089001066451, 0.0403972016220281, -0.0722518641953719, 0.00627586360252864, 0.00641766861494211, 0.0401671985659732, -0.0720924778963433, 0.0580523449520113, 0.0336777988542346, 0.0568994552709836, -0.0817577714486636, -0.0805869296995665, 0.0460172433773115, -0.0519109273670001, -0.188485078243954, 0.278998016488917, 0.457575033785653, -0.395146024404499, 0.225638708936901, -0.0505903157787714, -0.186358845866078, 0.277409530310442, 0.44593434611638, -0.390688524219839, 0.219898470630842, -0.007225370507819, -0.0266159973122155, 0.0396199669450187, -0.0262348332920277, 0.02298465769968, 0.0388331348008335, 0.209813218721952, -0.183819922143654, -0.181187462435566, 0.439859006441802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000295237250846717, 0.0258677865545683, 0.0261981528295215, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.121961990153498, 0.2250337245264, -0.197896745384657, 0.0720041127838627, -0.00717468642842238, -0.00405343007898562, -0.00404133581582018, -0.00709146953368325, 0.00176428765404602, -0.00456258703054669, 0.00724460448462892, 0.353061458146974, 0.000103788161143004, 8.21838039893621e-05, 0.000147945230318779, -0.034771966172023, 0.000101147795129592, 8.06363412486129e-05, 0.000145593936764071, -0.0342850300686168, 0.0367446701898163, 0.0242440923895317, 0.036388205229727, -0.0791788655558158, -0.0786453959092754, 0.104822079207859, -0.000745002803480525, -0.00088752778682321, 0.178424152469219, 0.00289858008214561, -0.385626002220497, 0.513979475619877, -0.000726049966661006, -0.000870816268068807, 0.175588457403319, 0.00282484033908921, -0.378364938100431, 0.500903861562423, -4.27115106568033e-05, -5.12277116192757e-05, 0.0103293831195581, -5.08825635930827e-05, 0.0068153154561942, 0.0102291763923664, 0.000461254537812717, -0.0617813836177234, -0.0613651299539456, 0.200412591091127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0299453386201053, 0.013710902622998, 0.014002682081672, 0.192230415140459, -0.0792712548026676, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.0775772130015773, 0.182572154863326, -0.231653156327065, 0.180871468758637, -0.00146630027813794, -0.000920673795231179, -0.000919650531979695, -0.00146020247167458, -0.184439512927778, 0.48729939001709, -0.741538613135987, 0.886876346755305, -0.00348612303332075, -0.00245735051523503, -0.00294386828509704, -0.00715988564968112, -0.0033974362247954, -0.00240040868105158, -0.00287885247894111, -0.00700687753076344, 0.00891143980381057, 0.00638415719932293, 0.0088808686042026, -0.0239288085613584, -0.0238732528442573, 0.0422823954558636, 0.0237853312506588, 0.0204361518344431, 0.0435460183840246, -0.0765978577452832, -0.117058944746748, 0.207325437623335, 0.0231802335251373, 0.0199626044256033, 0.04258429754058, -0.0746492117914782, -0.114346449732259, 0.202051088091408, 0.000438133590394814, 0.000377316628029515, 0.000804893149832283, 0.000376440608824062, 0.000576625608242179, 0.00080213191823702, -0.00364366602223475, -0.00558130841108475, -0.00556835024016858, 0.0208710379051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0107425993815028, 0.0254129579368256, -0.0100835618309505, 0.0195251039488213, 0.00276855422334102, 0.00354739278284631, 0.018497012182256, -0.0413981115341341, -0.00476624355041156, -0.00338273614995181, -0.00435470127501957, -0.0137973375736296, -0.0603965005827018, 0.0315784943674164, 0.00779631465864186, 0.0116923912438849, -0.00527925397357789, -0.028919560674281, 0.0792937759693211, -0.0676531927685028, -0.0668972246841803, 0.26996967643304, -0.141961339914384, 0.057331901500994, -0.0222957897716069, -0.0635582267339032, 0.135372028365772, -0.0987005432142832, 0.0127562315865692, -0.0084449413101165, -0.00445839259329846, 0.0114632796231688, -0.0162280695445271, 0.0315560665716392, 0.109055095339958, 0.15377203670886, -0.0218610650020315, -0.208732280105511, -0.0795719254745861, 0.154730479224275, 0.0363463430762803, -0.036202132415786, 0.02084635657388, -0.0695671764823022, 0.0187334020168056, 0.0515692280558871, 0.460570658542209, -0.458743261526413, 0.26415917979114, 0.649423009457742, -0.174879920823444, -0.0923254899097835, 0.262336456257311, -0.0706432910926393, 0.10000665415058, -0.135750409459011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0106226666604083, 0.0277849136316368, -0.0118196797021562, 0.0197079603842469, 0.0153251463175157, 0.00682473684164847, 0.0170656692030985, -0.0431419561966857, -0.026019057404776, -0.0070876321849268, -0.00629024608249967, -0.0143785334928046, -0.057876558781076, 0.0213437702446785, 0.00757530613557611, 0.0113613654920691, -0.0217181624512599, -0.0244158730639453, 0.0837575252759869, -0.0705030005191933, -0.048309686479901, 0.0735262174169137, -0.1008686920674, 0.0557087659591239, -0.0161008564820601, -0.0271010761760104, 0.104754249861408, -0.0945824300406852, 0.0606169663210656, -0.0278519033674186, -0.0194533184251785, 0.0205729256103858, -0.0186022939508756, 0.0359312466038148, 0.208816727025423, 0.370860928123472, -0.0953864536822706, -0.273937984971186, -0.0912135817420507, 0.176183523808719, 0.0695953213086699, -0.13669587008386, 0.0990608304482567, -0.0912992093798988, 0.0336204732668519, 0.0587191894223526, 0.154807210805021, -0.304065071880222, 0.220350026027013, 0.27493940115423, -0.101245047457608, -0.0707151723594292, 0.780836385935845, -0.28753905994854, 0.259996376636918, -0.19204741754843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00262086915298639, 0.0300547935497049, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690788, -0.00648860340814751, 0.027528864934527, -0.0629779646757724, 0.0247338267998054, 0.00750215134912611, 0.00917493645108301, -0.0489494116020339, 0.00658120841508749, 0.00337457711054276, 0.00506138536202277, 0.00953046266998899, -0.00904585198043104, -0.0556826593749888, 0.0449879363356469, 0.00740752011267537, -0.00240693191785941, -0.0250468724285157, 0.0248177503627264, 0.00246880960967885, 0.00278290510283709, 0.0564773593641097, -0.0799936001014608, 0.113516362413504, -0.0185639631595196, -0.0167784696518061, -0.0542269556656959, 0.015631310584595, -0.0289919659842307, -0.0415161074774567, 0.137785921551927, -0.0822707305417841, 0.402484695490357, 0.0766458066681745, -0.14215779334252, -0.0138366637603087, -0.159308678962163, 0.185509533264766, 0.134141800340848, -0.0886182134630819, -0.0473789501690625, -0.0107545004524868, -0.123822135860403, 0.144186661900358, 0.0356926225918723, -0.0235796481027299, -0.0213117429016787, 0.615646310841459, -0.406714954274355, 0.117238515266376, 0.342463929443952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0112132650061803, 0.0291131058185437, 0.00962857943557113, 0.0118223838397412, -0.0386200930353357, 0.0549301045311347, -0.0255353246076023, -0.0336121174078452, -0.0994794309404827, 0.112846675863042, -0.0356794946677952, -0.0112023885451424, -0.0323328431907147, -0.00410083987857553, -0.0027891494071221, -0.0041834894607706, 0.0538868521712184, -0.101042221662702, 0.0849937731483473, -0.0549292461438857, 0.0175143255728482, 0.00367186688349686, 0.00664416170108435, -0.020513118376943, 0.00583724844800679, 0.00513055372915007, 0.0136495564365597, -0.0528386438915603, 0.120828272253817, 0.0181593912005342, 0.0196022074155316, -0.162415639580523, -0.0387405065266482, 0.0815009178862219, -0.108188894132857, -0.0432583250009813, 0.0961165087027927, 0.386897800957663, -0.189958312030145, 0.399627629543894, -0.0360576518771373, -0.0604431390604196, 0.197458726781111, 0.128946934255838, -0.265421203189447, 0.133189585327345, -0.0117194719847802, -0.0196452524780155, 0.0641781118900006, -0.00468592208119778, 0.00964538694945466, 0.0104117408727183, 0.138067294932718, -0.284194329656931, -0.067788005584599, 0.606288622857957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0122972972658716, 0.0224445447174005, 0.0280757815135754, -0.0295941247801589, -0.14266986579011, 0.291843625603676, -0.302869456861528, 0.168138269227149, -0.104568501634171, 0.189850631265638, -0.162829463999105, 0.0560378329736123, -0.0139990053434684, -0.00513509550091869, -0.00424389085237565, -0.00636565806912736, -0.0683914171489398, 0.159071760349637, -0.206289585296183, 0.274773179699455, -0.00915583372768228, -0.00430258606700036, -0.00537660975155931, -0.0312130576026595, -0.00305149496021577, -0.00231316749585608, -0.00349760168066442, -0.0228773094223896, 0.0705466934159364, 0.0299544723214314, 0.0361434486839319, -0.148259144018291, -0.0919091466194166, 0.185649879114551, 0.0591095569907133, 0.037949493422076, 0.177224025148591, -0.187830363035947, -0.45066283116216, 0.910306571261336, 0.0197002829695773, 0.0204025052145794, 0.115288086146479, -0.0626008972232352, -0.242286521734026, 0.303390821313914, 0.0026373560130351, 0.00273136532565333, 0.0154340791804501, 0.0016932342207212, 0.00655338578226118, 0.0079073989414835, -0.0232618994971411, -0.0900313728410427, -0.0558124539406071, 0.276242777973244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0299283676160425, 0.0111030516956888, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.0625327818570342, 0.146258539859399, -0.18384166808212, 0.140764808621599, -0.0026897651654424, -0.00148258887390951, -0.00138523266460875, -0.00207782821502187, -0.179896704701628, 0.459596310372117, -0.662594871472995, 0.690219303679269, -0.0077380195685296, -0.004658821132104, -0.00499260080123145, -0.0101883216251351, -0.00257895986512167, -0.00179668352082445, -0.00206072672104519, -0.00439564015111291, 0.0162462241769462, 0.0101844496336546, 0.0131181816702361, -0.0432160109691647, -0.0373477023700653, 0.0748861467390761, 0.0510514100330863, 0.0367063907025695, 0.0643230528044012, -0.155757438084703, -0.183128903994627, 0.367193083012778, 0.0170146296952578, 0.0141558916760702, 0.0265497360935653, -0.0519114972451435, -0.0706240215419469, 0.122379662580787, 0.000731861863459579, 0.000608897016658701, 0.00114200189365344, 0.000526214799611827, 0.000715899315482366, 0.000922121235404261, -0.00576626720337998, -0.00784483208536737, -0.00677958116209442, 0.0287680203061012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00674620730936916, 0.0302500012368685, 0.0100401662714877, 0.0195251039488213, -0.00508376488671077, -0.0317222402070977, 0.0822967853898159, -0.068632037336036, -0.0053880427370123, -0.00355870072593558, -0.00406902438226485, -0.00918403835795026, -0.113191271384467, 0.147807356790049, -0.0651442148090811, -0.014291379808519, 0.00197276041282748, 0.00282759490804088, 0.0246420043988715, -0.0450325661822801, 0.0414434833137073, -0.117441550053527, 0.394513248650746, -0.0700756553903234, 0.00554578525152277, 0.00580669741102546, 0.0442577376376678, -0.0742698835373354, 0.0222480575010767, -0.0351083038449272, 0.0265381887482213, 0.0177577186477457, -0.048060307798489, 0.0348231154916578, -0.0176773769273058, 0.212615825443168, 0.130126061606394, -0.107540712446678, -0.235656571469201, 0.170749967708241, -0.00236550908394925, -0.0105124273528508, 0.0145979510551169, -0.0143906266881722, 0.011651637796144, 0.022849012122038, -0.0496942941533091, -0.220843648702357, 0.306671776781995, 0.597701424519648, -0.483940043727635, 0.365807823698724, 0.0899663991696789, -0.072842963663977, 0.197145552539167, -0.0997158754837055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0108682780791433, 0.0300983577029971, 0.0110939404354586, 0.019707960384247, -0.0231802053744833, -0.0276298646655862, 0.0870824133797189, -0.0715230777133199, -0.0269350059128869, -0.00688995031957079, -0.00551966637194169, -0.00957090470710663, -0.099328660248408, 0.105874942979701, -0.0269115200303895, -0.0114388293177886, 0.014843250115547, 0.00721310365350023, 0.0237118389394893, -0.0469295077882569, 0.0547376953425484, -0.11084070314001, 0.115608731683717, -0.056088598307651, 0.00732475842426724, 0.00702557127231322, 0.028828893208499, -0.0651740009484615, 0.0976912073872444, -0.124711701733311, 0.0524233707828873, 0.029928683173966, -0.0631847155811981, 0.0396512647545376, -0.102273132930751, 0.535746834338048, 0.257050201911992, -0.128570110450796, -0.309816855637988, 0.194424079547109, -0.0136857422900748, -0.0339579907193818, 0.0640995944875301, -0.0172046885375794, 0.0196375549684065, 0.026016977982559, -0.0504691348713493, -0.125227435768643, 0.236381119183879, 0.264377148370073, -0.301761974485488, 0.126847598555409, 0.243941787386094, -0.278436906801433, 0.587829296106843, -0.141069013725581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0100304424671003, 0.0286160770881658, -0.00170955493305559, -0.0116539403654932, 0.00630079692715642, -0.00613847546289112, -0.0581932607657199, 0.0456388471838218, -0.0578628584901556, 0.0216383431733446, 0.00606898946781369, 0.00610719045242122, -0.0745598627704426, 0.0516368564971356, 0.00152770678244041, 0.00108644437579405, 0.0278670398224952, -0.0165823879066067, -0.0112119814106071, 0.0299457000850141, 0.0359083999511923, -0.0395715317875219, -0.00282231830132802, 0.00532721841410366, 0.00480510466139413, 0.00412692477588717, 0.00994877186000785, -0.0489220790330339, 0.164640818162663, -0.134686083023702, -0.00625001174450559, -0.0727264094622995, 0.0933158150499534, -0.0319935495606554, -0.126171301109485, 0.24882196074617, -0.0306460030495001, 0.134356329875994, 0.457560220603033, -0.15687561199579, -0.0168836903877483, -0.0259497034408977, 0.108028244942132, 0.0179789750546523, -0.0477190678644035, -0.020992406664865, -0.0217556766329358, -0.0334377937414927, 0.139201057956504, 0.0429042901956703, -0.113874830422634, -0.00528428039161075, 0.136797588383317, -0.36308262200192, 0.465874103411457, 0.251557919288668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00537863848136876, 0.0243807773710823, -0.0114222456646251, 0.0118223838397412, 0.0552995939385817, -0.104936601954282, 0.0910163993406658, -0.0557239934719332, -0.0812967864767636, 0.0892023530796907, -0.0267723918023991, -0.00745674051607525, -0.0438056716503966, 0.0115541664574629, 0.00399812922953625, 0.00398736235826665, -0.0220790357715204, 0.0324894082074784, -0.0161003738189838, -0.0365630181088649, -0.0118969892080665, 0.00420827497900502, 0.00240439388633129, 0.019551438299029, -0.0015920029402018, -0.00123786029074273, -0.00204387781190549, -0.0287428711768687, 0.15834431170101, -0.0485677550391045, -0.0249264224083987, -0.202042477253413, 0.0919140623426248, 0.0899388353673571, 0.0576723909467998, -0.0292076635307708, -0.122223005070746, -0.121504250912767, 0.450686934679817, 0.441001702974336, 0.00771746652451479, 0.00859140789289696, 0.103896823889261, -0.0162591661904661, -0.132569155480525, 0.0590129145694343, 0.00415845224881602, 0.00462936371142377, 0.055983395532035, -0.00210601072884674, -0.0171713641699444, -0.0088128569311849, -0.0288618673204911, -0.235325313207767, 0.107055238101477, 0.445351148958013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0265225731168816, 0.0168888172596302, 0.0116134748343782, -0.0295941247801589, -0.064816550186493, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.0776057232015646, 0.138298675897829, -0.115271030719205, 0.0373009361247858, -0.0172240947344066, -0.00244988539799068, -0.00155992255535774, -0.00192502052858169, -0.136406455745618, 0.28376541171853, -0.302860847075891, 0.182899592666262, -0.0302745418665174, -0.00502674905678547, -0.00409850995120558, -0.00943905186116202, -0.00405120647096809, -0.00292119558198622, -0.00374060763022851, -0.011301503148731, 0.0851979215757079, 0.0138880133222227, 0.0124916450858427, -0.174002317425163, -0.0400671452317115, 0.204870501421384, 0.174811675791853, 0.0364890940310545, 0.0612509238451517, -0.457170278774762, -0.196463287614661, 1.00455203413528, 0.0233925320915247, 0.0212049137663461, 0.055902187824698, -0.0611765225010697, -0.114170745608983, 0.134424749317638, 0.00519182313107984, 0.00470629521224723, 0.0124071336395171, 0.00108370863424559, 0.00202247231023188, 0.0018191231322438, -0.0376873641955267, -0.0703340806951784, -0.0161956798487158, 0.202914971390713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.026012438120785, 0.00773818110957636, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660334, 0.700205786033841, -0.0433476663950504, 0.10065772823538, -0.125149498779014, 0.0936984686307278, -0.00309114016851053, -0.00142932235848186, -0.00122935995028981, -0.00172256715936886, -0.152061844875105, 0.37398651422484, -0.507825635341389, 0.459436505525797, -0.0108435935745075, -0.00531054391871742, -0.00498843785959924, -0.0084463518753211, -0.00145104215453643, -0.000995259096535893, -0.00108695820213267, -0.00202823607778972, 0.0185363701620088, 0.00971194662742151, 0.0113836940204543, -0.0487726328729606, -0.0348245768128834, 0.0826392266190672, 0.0688705436214519, 0.0394086713457852, 0.0558182505772272, -0.197907251068728, -0.170757133079533, 0.405209157119218, 0.00921595422346878, 0.00738565375592561, 0.0121625460717835, -0.0264830807255863, -0.0320019178067209, 0.0542233129952796, 0.000657193539132855, 0.000526674049477552, 0.000867316232694196, 0.000376055172972315, 0.00045442170648298, 0.000532642719457561, -0.00487692496111058, -0.00589323248953571, -0.00420787879224329, 0.0211316366719474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00349338776214517, 0.02488002151319, -0.0283386095943201, 0.0195251039488212, 0.0724066424646242, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.00422947460640298, -0.00262076359232629, -0.00270891496297771, -0.00480223949501902, -0.122340482894467, 0.239188061792397, -0.23085120375936, 0.106433229417867, -0.000737780502525813, -0.000621569734380834, -0.00109018984479863, -0.0235470671456199, -0.0213408121217796, 0.0567285276972919, -0.0929049606346424, 0.521879511054613, -0.00108449112971505, -0.000849780857684139, -0.00144195494716536, -0.0304844426488357, 0.0225595452321249, -0.0513596430982685, 0.0738639646439447, 0.0162777402116469, -0.0552209333838474, 0.025071459227295, 0.00535047517400644, -0.0206694422318363, 0.362180965134431, 0.0065508985396514, -0.270767634055307, 0.122934171541447, 0.000271898877739571, 0.00030962369482512, 0.00562132130380538, 0.000332901640170602, 0.00405603955611882, 0.00624723266456584, 0.00786486339244141, 0.00895607985992328, 0.162600612797479, -0.0303827855030737, -0.37018075297663, 0.532383334467843, -0.00286561887202117, -0.0349144074259299, 0.118444338190401, -0.0375393217377867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00932686977392242, 0.0233014374907499, -0.0195929661997851, 0.0197079603842468, 0.097663716224066, -0.196492083346238, 0.196789453010076, -0.0984800038037924, -0.0200092686815667, -0.00483826550316644, -0.00354803175299696, -0.00500452794251923, -0.101599268420437, 0.168011170718831, -0.123020984383692, 0.0252004138115011, -0.00968427887924628, -0.00305739080499757, -0.00351420065220264, -0.0245389584623717, -0.0491729940243784, 0.106169413017207, -0.121847957868655, 0.123566481166194, -0.00249885878459802, -0.00191419023133737, -0.00300028765102167, -0.0253162076693629, 0.0944563035738691, -0.18115621457333, 0.19494018247284, 0.0264889132374167, -0.0746609519959469, 0.0285475625477054, 0.0596887115499924, -0.1794288585119, 0.955860192068402, 0.0262363368356128, -0.366088874082171, 0.139978727185895, 0.0030332434328499, 0.00323502747564234, 0.0235363446423736, 0.00133327046843705, 0.00660042969678832, 0.00711339789299553, 0.0154016280466348, 0.0164262087773373, 0.119508385589292, -0.0462984786883526, -0.229203196864413, 0.246643004355891, -0.0260291213928499, -0.128858614879586, 0.363197492232307, -0.0531072416281616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0190977808372875, 0.0202336576842803, 0.010730605592219, -0.0116539403654933, -0.0616020791184595, 0.199029865952139, -0.142163327346853, 0.062840050903269, -0.0395959199906358, 0.0141639916635128, 0.00370744537983246, 0.00319338727160609, -0.0702518096504062, 0.0825726724762284, -0.0302591072534671, -0.00555414878956787, -0.0433432647799657, 0.0190435548721708, 0.0069770474474959, 0.0156582995463821, -0.0769004177114554, 0.111019355037724, -0.0569446628060182, -0.0272339425429257, -0.00390790286721723, -0.00289524874373837, -0.00405247587042991, -0.0175051398490236, 0.148388770431383, -0.200999967524955, 0.105961643569101, -0.0611719587217119, 0.119201100977506, -0.0230342679574022, 0.19950941508979, -0.378262163481965, 0.519567159982301, -0.115119607905565, 0.58448487033195, -0.112945107132979, 0.0101386109265572, 0.00986461372661289, 0.0369750785261229, -0.00585011446225275, -0.0152426492298344, -0.00573961131991808, 0.0179881100148821, 0.0175019791423129, 0.0656018645113009, -0.0341047634675221, -0.0888609872432729, 0.0468450635759486, -0.0612886051163674, -0.159689304474723, 0.31117429138268, 0.0947022088715306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0283483789400613, 0.015605997316105, -0.00366448453027254, 0.0118223838397411, 0.0220838867907562, -0.0613915956629152, 0.29971631803346, -0.0767262716388461, -0.0508705214556543, 0.0541344006325364, -0.0155002588937239, -0.00389905316318794, -0.0377420092156797, 0.0230901301043676, 0.00135422408082117, 0.000832624912028887, -0.102213293977142, 0.124878367918977, -0.044513047634374, -0.0191184272948393, -0.0758343923526159, 0.0532647951908284, 0.00388900865659893, 0.00408265242310384, -0.00385372990326833, -0.00275466521408062, -0.00342928295650841, -0.0094044431423382, 0.132312644844221, -0.0925956420784965, -0.00762521338174627, -0.161063201374778, 0.158264250550675, 0.0647529036970646, 0.305221577224944, -0.265912605385222, -0.037389099749376, -0.462535110161497, 0.776025214555274, 0.317506232833687, 0.0155106605694832, 0.0137520514519181, 0.0329692767107086, -0.0235049735356564, -0.0401332560488798, 0.0161349385942963, 0.0115077156161064, 0.0102029630870851, 0.0244606642480474, -0.0100256563422968, -0.0171181742635496, -0.00140967467297019, -0.0574497025764956, -0.0980917344976779, 0.0963870996787595, 0.167658158602434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0290142634016864, 0.00987675823579526, -0.00428139506100088, -0.0295941247801588, 0.0263560489909356, -0.0712908034861193, 0.124137438646549, 0.383808683073226, -0.0448012227061955, 0.0784639261814983, -0.0636937172730276, 0.0195042770596187, -0.0136909752155197, 0.000869868924945477, 0.000405518905339028, 0.000409298247693925, -0.139268112846256, 0.263309019711056, -0.24058162956109, 0.0956363217673716, -0.0425594697223879, 0.00291910365757991, 0.00153171149747967, 0.00200693308424851, -0.00216277464680907, -0.0014977638098849, -0.00168582891470651, -0.00341147704251068, 0.0665553353467776, -0.00480255754658161, -0.00307299187277458, -0.132383333906543, 0.0131115658446456, 0.147499795774797, 0.223346204549639, -0.0181400485021896, -0.0150679586141467, -0.500033591404991, 0.0642906130875654, 0.723243311516806, 0.011349941900401, 0.00930748316716357, 0.0165840632254415, -0.0254105603546723, -0.0329868908038957, 0.0367535664289518, 0.00346847170388685, 0.0028443090090686, 0.00506798665030015, -0.000281707249352496, -0.00036570017124215, -0.000233998998075163, -0.0215539605020867, -0.0279804196188502, 0.00277124849002811, 0.0763899465305748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0171539738450265, 0.00422403562884657, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0235420783828847, 0.054296528623332, -0.0668187951761436, 0.0489939685728517, -0.00231153056297314, -0.000876578948905448, -0.000693434004591445, -0.000909320668327831, -0.0977269276576106, 0.232125215917278, -0.298701660335598, 0.240234638216594, -0.00959553257924186, -0.00374749699368091, -0.00309987463794521, -0.00445871865745578, -0.000487622959599539, -0.00032981625820266, -0.000344874274678669, -0.000575980404938965, 0.0137673862153516, 0.00589537889744869, 0.00628854087800187, -0.0358548234884833, -0.0207029333243843, 0.0594974335725777, 0.0588574919775215, 0.0263542534751372, 0.0308349249253133, -0.160282676136513, -0.101513754490212, 0.291736816703684, 0.00299100276046883, 0.0023194311519256, 0.00343051691130162, -0.00814519801426007, -0.00893419973878658, 0.0148253959652973, 0.000293678161388806, 0.000227738431127631, 0.000336832821567272, 0.000131498445572722, 0.000144236318875112, 0.000153855418475621, -0.00206529017058804, -0.00226534884361146, -0.00130803505644981, 0.00795527596810684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0296266593660007, 0.0106036055567762, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198177, -0.113874016814714, -0.00174302461810518, -0.00103224751682468, -0.000995395188472145, -0.00152025936541926, -0.0607551610563966, 0.145274827975367, -0.188334660306985, 0.151780397361144, -0.0051793298283753, -0.00333411005738363, -0.00365885144162144, -0.00745436569613299, -0.18053159698292, 0.469230738890094, -0.692276345467663, 0.744232604758411, -0.00241016220156675, -0.00167493200389371, -0.00190612042688969, -0.00397712490619114, 0.0107073556307269, -0.0291016110858971, 0.0519163834616727, 0.00720759150771045, -0.0269570575484029, 0.00956421589618282, 0.0345842460403177, -0.106971053214144, 0.25456426498465, 0.0264935041720337, -0.132179922471373, 0.0468967101986918, 0.000461712209768474, 0.00038183611104057, 0.000700919724644822, 0.000353697875660541, 0.000471819861894249, 0.000626088065400448, 0.0160935189181038, 0.0133093441036109, 0.0244313765371237, -0.0497781754902048, -0.0664022418603692, 0.118459567099648, -0.00366885739980123, -0.00489411984295746, 0.0183044599731062, -0.00453346276486155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0287142087112328, 0.00958841840105428, 0.00525730855264604, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.00799167084001682, -0.00185631097078638, -0.00128014616296269, -0.00158429842618397, -0.0488981962979721, 0.100408707642263, -0.104468874747729, 0.0565787251628145, -0.0252758904406241, -0.00632110314145245, -0.00488566882918293, -0.0077683717063151, -0.154654198992136, 0.341911353913746, -0.398704725867906, 0.277425364104441, -0.00206468956655653, -0.00142790422348565, -0.00160037367631385, -0.00320095002602272, 0.0436704701359279, -0.10181165164742, 0.145248246697174, 0.0115168069922353, -0.0368162525456528, 0.0108902736390701, 0.148706520787247, -0.388563452590705, 0.71220317547873, 0.0439538129017003, -0.180523018821064, 0.0533988371215844, 0.00198528590849256, 0.00162273463193132, 0.00285873514978321, 0.000586799320677437, 0.000753907637346639, 0.000712893814650169, 0.0121472595661697, 0.00992893703459032, 0.0174915853413357, -0.0317402430744735, -0.0407792081924058, 0.0581771181962354, -0.0138046925395082, -0.0177359836148668, 0.0566973513015144, -0.00641353363141414, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.026266017636219, 0.00787931986789122, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169526, -0.227302951843895, 0.075723802663307, -0.0150561962143098, 0.00521607980877961, 0.00130030386482764, 0.0010109401899062, -0.0321897964657498, 0.0486197142564779, -0.0306355733076924, 0.00373028648217878, -0.0524224823609096, 0.0192586102361636, 0.00525321344488696, 0.00495699486804387, -0.112078045039237, 0.179511848166741, -0.123767382336513, 0.0182909049745174, -0.00149628249178247, -0.00102691121281143, -0.00112365340857551, -0.0021071928544526, 0.0658499558828104, -0.112715482697028, 0.096832772742812, -0.0258534416707462, 0.060335322035068, -0.00878707177583326, 0.243128686850451, -0.455369321869514, 0.474805099586672, -0.10444762263269, 0.295845278163648, -0.0430860995861488, 0.00324585602164082, 0.00260497492156465, 0.00431063789576666, -0.00139441358919924, -0.00169240546797375, -0.000575215033661144, 0.00693956449600749, 0.00556937564641004, 0.00921604331712917, -0.0129974986479507, -0.0157751171905971, 0.0135522494457503, -0.0176036557524683, -0.0213656288798231, 0.0498619145320431, 0.0114367792968677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.021469848095818, 0.0056992874500779, 0.00832487477036385, 0.0118223838397412, -0.0614326220634957, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.0182709161061164, 0.0190137982809258, -0.00526293094004171, -0.00123433495846104, -0.0163348457295087, 0.0140319672776632, -0.00196259356847567, -0.000733241121875036, -0.0709478783134304, 0.0769033452699533, -0.0226501029881937, -0.00605237789102644, -0.0634299145349292, 0.0567537957659611, -0.00844642404705089, -0.00359533878904313, -0.000846812331002474, -0.000575990819905359, -0.000612888851787795, -0.00106930375395286, 0.0560006137916718, -0.0543971191883839, 0.0103033153809035, -0.0658993199929187, 0.0866868718955921, 0.0247018231068585, 0.226500485285503, -0.234109161969772, 0.0505207745986586, -0.283611242802991, 0.425056183742285, 0.121121715799415, 0.00302386350863126, 0.00237595963988643, 0.0036658850375872, -0.00378631280488709, -0.00431386934521652, 0.00161701877171306, 0.00270344101158925, 0.00212419201925488, 0.00327743098393707, -0.0027942558659871, -0.00318358660367865, 0.000603000624105263, -0.0111516824754383, -0.0127054746021773, 0.0167133416449521, 0.0202473562137974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0143344773818665, 0.00339108928439712, -0.0107414954878784, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.0152353726346625, 0.0263431259843046, -0.0209745648569956, 0.00617452750875327, -0.00561039559867237, 0.00119544438383659, 0.000411420418441728, 0.000352254883283627, -0.0655314248951066, 0.115979237022268, -0.095656884604359, 0.030275877325964, -0.0241318165707194, 0.00526310839581187, 0.00187632953337014, 0.0017272294306981, -0.000322168490867562, -0.000217247209951019, -0.000225042499060171, -0.000367264997427107, 0.0269262600713353, -0.00647362037001924, -0.00299718572753333, -0.0525321970635773, 0.0169905218832951, 0.0562679610565774, 0.118546565081049, -0.0295236807499628, -0.014696254455307, -0.239579049519497, 0.0833104971211989, 0.275901578528233, 0.00158263957699841, 0.00121865954262184, 0.00176263378613846, -0.00319846707772647, -0.0034388372228091, 0.00368338599466492, 0.000582803868995825, 0.000448768946986867, 0.000649086377665744, -0.000145145625740712, -0.000156053562033304, -7.22503764696632e-05, -0.00326926866673852, -0.00351495966953611, 0.00113684563986334, 0.00922528597146977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00638882353038123, 0.00138044771170159, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.00766460049150907, 0.0175880306956051, -0.0214801029408943, 0.0155101676309959, -0.00090686000395606, -0.000288071461031635, -0.000213253491124327, -0.000265802822928633, -0.0357169332052307, 0.0827155276170134, -0.102424732574838, 0.0760518002123163, -0.00422595518496717, -0.00135478401778089, -0.00101686811553693, -0.00130332461042076, -5.64180322035167e-05, -3.77810915963453e-05, -3.83065599431423e-05, -5.93644300409327e-05, 0.0053739365343952, 0.0019227086862346, 0.00190448281304161, -0.0138893267054971, -0.0066492062394604, 0.0226969756645599, 0.025273323859613, 0.00916815545757849, 0.00933834822750578, -0.0662292251284659, -0.0326033938848811, 0.111291244539186, 0.000337408026586009, 0.000255673905629857, 0.000351786028768959, -0.000884184141232966, -0.000909216372900104, 0.0014857784201566, 3.99214342172282e-05, 3.02508185953477e-05, 4.16226103098802e-05, 1.44819065756884e-05, 1.48919053796354e-05, 1.47507410000213e-05, -0.000270158128668922, -0.000277806604307328, -0.000132993732949987, 0.000960724534063873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00337366876311383, -0.00634204581202929, 0.0208770933958505, 0.0195251039488212, -0.00350519620228997, -0.00213578148775578, -0.00215103292273897, -0.0036014832612442, 0.00186672700723241, 0.00270775846140369, 0.0252970714511431, -0.0453962493417858, 0.00205786663823844, 0.0029395353782773, 0.0272677169715597, -0.0487065445939728, -0.00203791177178548, -0.0492117221773474, 0.0992013086517275, -0.0738509092732364, -0.00224657951086666, -0.0534241146055902, 0.106929104926151, -0.0792361187978446, -0.0283178557954037, 0.628290543629044, -0.135565454749909, 0.0421979810464192, -0.000888311046095951, -0.00570497820444077, 0.00883182654289648, -0.00579324153221604, 0.00620921957215416, 0.00903250928257824, 0.0161444667353693, -0.022371811092961, 0.0143676720035996, -0.0227179316958211, 0.0101011981811169, 0.014694143970245, 0.203498998675296, 0.263102111421653, -0.0182154333959, -0.286356708329364, -0.118794431005032, 0.185217860295404, 0.224335855573074, 0.290041905135055, -0.0200805648288413, -0.310868080347518, -0.128962918095965, 0.199646358368677, 0.0939425841553133, 0.0389718679788598, -0.0417702048278293, -0.0424164434544873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0115772632577273, -0.0106853276693849, 0.0192875795853982, 0.0197079603842468, -0.0163810014243474, -0.00390242657177229, -0.00279689872237234, -0.00375319132544454, 0.0146717000428919, 0.00719541733809642, 0.0244226254420096, -0.0473085106547024, 0.00283917689101551, 0.00355123466570278, 0.0168179761255123, -0.0399568305836849, -0.0274010505067604, -0.0481217403864266, 0.105826965373029, -0.0769617882285367, -0.0053024822727362, -0.0237500598790077, 0.07287485865535, -0.0650020279883701, -0.0668371306827621, 0.207386421256723, -0.134368965523375, 0.058219289048321, -0.00535364888165083, -0.0177228274895517, 0.0365988305517867, -0.00694898923818481, 0.010031008601275, 0.010284847059337, 0.0358043028635583, -0.0767957177864585, 0.059539212022493, -0.0301110314791141, 0.0163185090590719, 0.0167314550889352, 0.451308792072928, 0.670583112662057, -0.109780279168362, -0.379545813158115, -0.142493838383863, 0.210897913990534, 0.0873344935774069, 0.129767107520561, -0.0212440024532162, -0.187321483324288, -0.0703265751992809, 0.145229106953919, 0.282395714198688, 0.106020532605796, -0.153042815009205, -0.0600069529033935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0031861443597021, -0.0102352418729337, 0.0163965439250798, -0.0116539403654933, -0.0318063021955915, 0.0112436886986537, 0.00289018334287377, 0.00239490987846133, 0.0285443214023187, -0.0170879000112391, -0.0117215303676542, 0.0301875416619842, 0.00193009838737015, 0.00202524321821207, 0.00540450880422626, -0.0271088739443334, -0.0126571512820066, 0.0143537935251024, -0.0723998288978304, 0.0491092861808115, -0.000855846139544357, -0.00170119926809102, 0.0333817769889972, -0.0441008898133744, -0.0107878343256712, 0.00689944426242858, -0.0507328584660814, 0.0395780045482836, -0.00682270690696091, -0.0129194301108831, 0.0565868352835749, 0.00737079936166076, -0.0229083726068188, -0.00829856919202048, 0.00573105683907222, -0.0797988402663336, 0.0920558261790191, 0.0455268719942116, -0.0372674873257957, -0.0135001655287293, 0.0722392598788916, 0.323635014986764, -0.139904331697434, 0.573860568794342, 0.151143347183348, -0.170167910286463, 0.00488464507640107, 0.0218834216346688, -0.00945999455336031, -0.0680134612436616, -0.0179133795644634, 0.0784602300632858, 0.229126016875703, 0.06034719059046, -0.187558480429118, 0.10700595273598, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.011801561675532, 0.00496641091476391, 0.0123418011338162, 0.0118223838397412, -0.0399845505836983, 0.0422013001459018, -0.0119330872043853, -0.0029241304429919, -0.0204347654762903, 0.0301742710270643, -0.0150525237472738, -0.0368583011689747, -0.000577804782105061, -0.000512427300870451, -0.000904019525330695, -0.0142508991010521, 0.0594964820405093, -0.120624902691672, 0.125434652322349, -0.0599613204849068, 0.00168229735160592, 0.0020484833999342, 0.00753331313448511, -0.0231834539600412, 0.02120514924013, 0.00258397885603963, 0.00538637983819945, -0.011848287343186, 0.00281071914707341, 0.00358016746981991, 0.049550160822038, -0.00596100303954837, -0.0595664075674239, 0.0233285664952788, -0.0112361529233053, -0.0298340045411955, 0.0806085190825287, 0.0496738192420155, -0.0969030134598642, 0.0379510614356346, -0.141630312498688, -0.0376329322111704, 0.0576357432941006, 0.626132323960991, -0.12223449693311, 0.478368417328807, -0.00400467878859447, -0.00106409286769033, 0.0016296838901411, -0.0106331416082054, 0.00207581794703548, 0.0287296932280313, 0.0583239313380664, -0.0113860858694689, -0.113777534921342, 0.189440364791817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00800383521292137, 0.0263496071105022, 0.00763236993753084, -0.0295941247801589, -0.0344990911194155, 0.0601371945948343, -0.048470472808498, 0.0146274102792548, -0.135681023269177, 0.282736312981598, -0.302623682224074, 0.184376690406239, -0.00158021534532769, -0.00122388284394236, -0.00162527582784919, -0.0050645794729812, -0.0455282927907742, 0.109434345863474, -0.150804331564209, 0.299945181214723, -0.000530247378601926, -0.000473709291275902, -0.000809912274627226, -0.00823909033431861, -0.00668370237087944, -0.00295758720151028, -0.0038078199674849, -0.0324034103825531, 0.00914001856619199, 0.0089095007528663, 0.0245045777907789, -0.0239713380659701, -0.0483955236813239, 0.0531398377109131, 0.00353768478630559, 0.00443980886007479, 0.0398642041456055, -0.0119454683360232, -0.0787301479845028, 0.08644822844364, 0.044592077486515, 0.0277197895493029, 0.187422412635166, -0.150571145206206, -0.491548893679025, 1.08966918597521, 0.000519343703536367, 0.000322839817682227, 0.00218282384204094, 0.000651778469724248, 0.0021277714616434, 0.0058521956223056, -0.00486751435712158, -0.01589030417437, -0.0320807954006473, 0.0863145549122681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0302224845101158, 0.0261153899063016, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630083, -0.0503948504088265, 0.0367434731025109, -0.15273114932588, 0.375858140305486, -0.510844558915113, 0.463146916325963, -0.000571524833484989, -0.00040277380705034, -0.000446079687283155, -0.000841390117526194, -0.183081952923273, 0.47275516724247, -0.693290980381532, 0.753450370761892, -0.00068509850885292, -0.000506609750046522, -0.000605395551988326, -0.00136877883379726, -0.00863558164111836, -0.00513542221486795, -0.0055410313811158, -0.01171951264617, 0.00363208529783321, 0.00299171446345439, 0.00500199470056428, -0.0104469704798228, -0.0129905137821951, 0.0214351751990887, 0.00456844460258414, 0.00406019525351262, 0.00813727702558357, -0.0141780709602841, -0.0211330510483063, 0.0348708803444412, 0.0575846769898419, 0.0411575515467008, 0.0744784252336854, -0.178712824081337, -0.21422236704193, 0.439543117114766, 0.000215483698467197, 0.000154012870971922, 0.000278700643370751, 0.000191510670662804, 0.000229563095955764, 0.000383817842058131, -0.00172698194151808, -0.00207012653542065, -0.00257414408714927, 0.00898882818456473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0117859544381793, -0.0110271230805098, 0.0160091858217586, 0.0195251039488212, -0.00316207558373228, -0.00241577235429527, -0.00353354291864163, -0.0181912548602127, 0.00295045175569077, 0.00361626834907029, 0.0160892124049081, -0.0398420632543444, 0.0164288131844465, 0.00644900529020188, 0.0196160926625838, -0.0385628463970881, -0.00533638736500277, -0.021589474677939, 0.0708866405450281, -0.0648153237617094, -0.0297142669526364, -0.0385011904458152, 0.0864255424365171, -0.0627342855826571, -0.0650794963063691, 0.175306723361566, -0.129373925944914, 0.0585357554359558, -0.00599234830794822, -0.00596048830774325, 0.00876741507713471, -0.0186109023749109, 0.00895204339478104, 0.040041609157811, 0.0357749037316647, -0.0262610115094853, 0.014262887018428, -0.0819968258027644, 0.0145632415484495, 0.0651399463159162, 0.078353362005419, 0.119573754125016, -0.0213506983799166, -0.179587540573384, -0.0663105251505074, 0.142667995223337, 0.436290050931204, 0.665814943251966, -0.118885738214352, -0.320264119644222, -0.11825364884818, 0.173941927289884, 0.297586072438545, 0.109880054473008, -0.0528534831921603, -0.165028595825849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00868942826669705, -0.0116958193796848, 0.0205403356838658, 0.0197079603842469, -0.0201247738104086, -0.00584323645334007, -0.00577935460978634, -0.0189575391547739, 0.0148427436855897, 0.0063815168699526, 0.0144742293073117, -0.0415203612920179, 0.0145079970177743, 0.00650803540571892, 0.0149243543543369, -0.043082752293691, -0.016722944588233, -0.0161405937908933, 0.074458681419119, -0.0675455897618918, -0.0163457939686737, -0.0164605936176504, 0.0767742256020673, -0.070087297453317, -0.0358001777363248, 0.0412250887240755, -0.0838466866383686, 0.0516918998203714, -0.0239827552691316, -0.0217039465904848, 0.0480958691343097, -0.0208020433238822, 0.0181915227080133, 0.0455932912233093, 0.0606589183534293, -0.111649968396047, 0.0782426680475981, -0.107010375739816, 0.0295940856905751, 0.0741714582685036, 0.132853752011542, 0.279624171526345, -0.0854504023725404, -0.23437163581397, -0.0741175462222494, 0.162448602623015, 0.129857516831937, 0.273317840187487, -0.0835232494105542, -0.239018235798383, -0.0755869842279402, 0.167500490591787, 0.880805880216167, 0.278545525839862, -0.243589881034135, -0.233467551046818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00515804432869896, -0.00575929267843161, 0.0267098865309275, -0.0116539403654933, -0.0579732173172457, 0.0239119304978303, 0.00786274267358271, 0.0120967981262487, 0.0151788194266245, -0.00831999241146459, -0.00467132225531164, 0.026494125876669, 0.00518416692938206, 0.00268262576567058, 0.00458054935471411, -0.0433658185196248, 0.0180568823364594, -0.0159481203670527, -0.0486788032710563, 0.0431008137183392, 0.00616713919741507, 0.00514217279233482, 0.0477328791988057, -0.0705477914032106, 0.0135071248184836, -0.0030550085641488, -0.0166083283299719, 0.0184711533395947, -0.0167792370213337, -0.0140070776838755, 0.105619250345273, 0.0148371797724692, -0.0546971571990117, -0.03678801247366, -0.0321631653551499, -0.145964620231555, 0.171822073141542, 0.154614928229379, -0.0889816857642899, -0.0598469743850444, -0.0704430166245737, 0.0867188215718507, -0.0597843133070971, 0.338634019363569, 0.0528647758526339, -0.131075451218334, -0.0240590751445703, 0.0296179059986185, -0.0204187065694204, -0.109186198802953, -0.0170452571090386, 0.128528399601262, 0.682935776066139, 0.106614352543001, -0.393033048742583, 0.416325384375381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0103543496131472, 0.0114965700457507, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163357, -0.0147699151361857, -0.0456650504879512, 0.0640339164783741, -0.0289985647742542, -0.0323487245733812, -0.00652193812105335, -0.00376718935977031, -0.0051210232234846, -0.0331151410630413, 0.0487160015083047, -0.0883080091353924, 0.0683057070994252, -0.0526251123873066, 0.00695767866119337, 0.0051952623030589, 0.0120624974055016, -0.0538719236429518, 0.0152385459635856, 0.00364434309255459, 0.0062245751600149, -0.0232376234689826, 0.0301281169318006, 0.0238936466936195, 0.127872945220575, -0.0580053142400195, -0.181106971901399, 0.10341681503917, -0.0415491378876407, -0.0562811451289639, 0.208024526539325, 0.136630693123354, -0.294625982202666, 0.168239137275043, -0.0909999553413715, -0.0394797780221851, 0.107346286348629, 0.299245365959432, -0.20667256059336, 0.368473445107362, -0.012996724440536, -0.00563854997513987, 0.0153313273413632, -0.0176049509478884, 0.0121587857504658, 0.0650708434821411, 0.140795688796734, -0.0972399536775845, -0.303607243389941, 0.737050889895456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0142799617871943, 0.0286331249853375, 0.0261981528295215, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.144761735858263, 0.294022599521717, -0.301560576395922, 0.161818385181665, -0.00851593238442533, -0.00529609529109965, -0.00615830015627283, -0.0159370083754822, -0.0786155180524534, 0.180183183238993, -0.227528563330549, 0.263247185749171, -0.00462473340853488, -0.00324555768787781, -0.00464646010384096, -0.025926427330224, -0.0101289835370483, -0.00485254778273584, -0.00597444597327712, -0.0303422121712233, 0.0480095304404495, 0.0369438237145966, 0.0817770038721055, -0.120654962207571, -0.176743667493169, 0.235571815733862, 0.0294212418863076, 0.0278742507862943, 0.13303535382684, -0.0910346124745032, -0.287527730636603, 0.383229739093874, 0.0644377196220501, 0.0416757755850922, 0.17105764737271, -0.199381890716992, -0.429892852309206, 0.839340860388866, 0.0037906927549226, 0.00245167056644538, 0.0100628481015949, 0.00359137526936535, 0.00774346432721709, 0.0171405460669788, -0.0325561061198114, -0.0701951279005209, -0.102826639852128, 0.335821880299531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0296919171784483, 0.0243834140019697, 0.014002682081672, 0.192230415140459, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.141645882360695, 0.345411287467402, -0.462849575846567, 0.406481350416947, -0.00267727324386314, -0.00174183802117235, -0.0018374878434761, -0.00328158485493622, -0.17784500213963, 0.452155668420225, -0.646858537591111, 0.661266465096995, -0.0033614790479452, -0.00228012796141589, -0.00256799349356265, -0.00533850326641945, -0.00736223322060804, -0.00445019405091754, -0.00475113027769321, -0.00953910730364736, 0.0168597007475028, 0.0127557271340277, 0.0199584129431104, -0.0478104381081747, -0.0536515356544619, 0.0950233075549248, 0.0220699483121883, 0.0178268522440295, 0.0324684740451168, -0.0668177993242807, -0.0872806619365436, 0.154584525524274, 0.0483370874319138, 0.0347932015858053, 0.0600710050445716, -0.146342789854297, -0.170348282676651, 0.338567432066033, 0.000913627623414949, 0.000657632301918498, 0.0011354124232728, 0.000737976565159953, 0.000859031324028495, 0.00134409443819907, -0.00714306605782547, -0.00831478638071599, -0.00933062058445992, 0.0349726090309802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-4.16214011086512e-06, -0.00888246788236123, -0.0100835618309505, 0.0195251039488213, 0.00276855422334103, 0.00354739278284632, 0.018497012182256, -0.0413981115341341, 0.00207617681188816, 0.00204132940906999, 0.00495444159751798, -0.031007435542924, 0.0263087298629871, -0.0190562037323707, -0.00887004256151609, 0.0262768860950638, 1.34764571110791e-06, 2.34589687822702e-06, 0.0351417498325349, -0.0504430947992084, 1.70769882252997e-05, -2.1899399798087e-05, -0.0629150249458778, 0.0427474066498151, 1.27907673086741e-05, -5.86577422600001e-06, -0.0362041359827394, 0.0320568669764367, -0.00769781311112095, 0.00960799969344603, -0.0100195650228905, -0.0130420310882865, -0.0364701390904392, 0.0709175009299217, -8.84633105629031e-06, 0.068149339329645, -0.0162998925724395, -0.0925068516383988, -0.0593298559286742, 0.115369044865993, -6.62595538413911e-06, 0.0182538627477391, -0.00937969153956921, -0.069288190527517, -0.0158915560681605, 0.0864121113201357, -8.39622469954253e-05, 0.231307825632447, -0.11885681869661, 0.646818621763509, 0.148350740803414, -0.154705447658132, 0.261284405700932, 0.0599267458324434, 0.167576410526232, -0.227470527214668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00681295111639288, -0.00438186087957981, -0.0118196797021562, 0.019707960384247, 0.0153251463175156, 0.0068247368416486, 0.0170656692030986, -0.0431419561966857, 0.00496290698942569, 0.00178381589036753, 0.00264840080550217, -0.0323135857262809, 0.0110394459580145, -0.00537180196847258, -0.00318945341855541, 0.0255329556369081, 0.0101073362006732, 0.00568346715796629, 0.0351451051021589, -0.052567948285717, 0.0224826683241416, -0.0171152528866812, -0.0423250421086929, 0.0415371758142848, 0.0168396543479753, -0.00265609563809114, -0.0110627097316331, 0.0134514304724192, -0.0152560834038924, 0.0117265687773733, -0.0437183995785949, -0.00866187936743291, -0.0418058504080336, 0.0807500582702355, -0.0486078465011177, 0.155615226861536, -0.0711213725288543, -0.114945842078815, -0.0680100252848929, 0.131364712142299, -0.0364075705728993, 0.0241497410540252, -0.0185893518541936, -0.0860951298768102, -0.0105543945334427, 0.0983929627081788, -0.0809846746389744, 0.0537184681949511, -0.0413499881472977, 0.259267781302797, 0.0317836149105708, -0.118494062764006, 0.736328501815995, 0.0902664474228089, 0.435663605754062, -0.321804755462983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0117909391625214, 0.00649963867312386, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690787, -0.00648860340814748, 0.027528864934527, -0.0157527489567285, 0.00761282852421954, 0.00331676160313948, 0.0206192860832164, -0.0122437712383399, 0.0020256311953557, 0.00149192775061593, 0.0113747003386201, 0.0347177461769004, -0.0226829837593202, -0.0194855585338847, 0.0335435867035136, 0.02698425165464, -0.00603551746377228, -0.00876488846392625, 0.018504435386129, 0.0202113674476523, 0.00308515890396074, 0.00608305867108557, -0.0149188861614175, 0.034939219423738, -0.00820727779862287, -0.0377070803306021, -0.0239741743450799, 0.0351290133199048, -0.0651550715289332, -0.104103979779745, 0.0482167279666837, -0.0613421198629882, 0.140845268185823, 0.0571481039328647, -0.105994687797817, -0.0779745095406278, -0.0246468125557042, 0.0425730134126712, 0.105493956438009, -0.0292122395057675, -0.0793906612641801, -0.060605425748845, -0.0191566523097156, 0.0330897317403691, 0.0280699674769361, -0.00777283022214886, -0.0357110775063414, 0.484166493457687, -0.13407012159853, 0.196451023490723, 0.57385057542787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000396180986240135, 0.0218166735098089, 0.00962857943557113, 0.0118223838397411, -0.0386200930353357, 0.0549301045311348, -0.0255353246076024, -0.0336121174078452, -0.0821315304265295, 0.106627813860814, -0.0421122676094755, -0.0251756789225905, -0.026694421843679, -0.00387484689204712, -0.00329201428801497, -0.00940176168823127, 0.00168506853674352, -0.00261416436528543, 0.00143665582940386, -0.0409559557664376, 0.000547681628745762, 9.49985402428899e-05, 0.000112306740668442, -0.0152948461494824, 0.000410216847388376, 0.000156669398596337, 0.000218004723301986, -0.0325268279583357, 0.114169552842125, 0.0214334073109032, 0.0440530051317887, -0.191698087141148, -0.0870634463072912, 0.183161022520475, -0.00279906307588785, -0.000731198562915532, 0.0716657109865357, 0.00653976121473003, -0.141635372249502, 0.29796752490964, -0.00209651514742707, -0.00120587578307144, 0.139114209894574, 0.00489832064355598, -0.233581784872353, 0.223179475587968, -0.000681410165577654, -0.000391934214267949, 0.0452149544041173, -0.000178004610942367, 0.00848834483592489, 0.0174464607140271, 0.00524477673604107, -0.250102923105532, -0.113589148133034, 1.01592911016151, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0236731291383542, 0.0302602001667236, 0.0280757815135755, -0.0295941247801589, -0.14266986579011, 0.291843625603676, -0.302869456861528, 0.168138269227149, -0.148692369932632, 0.290316139028518, -0.279210915864665, 0.125936579040831, -0.0199060448288922, -0.0078524948241205, -0.00727718818584325, -0.0143058565620667, -0.123983018812676, 0.264604231380492, -0.294894932128271, 0.204874433632237, -0.0165981047421912, -0.00715703702973174, -0.00768596711021485, -0.0232728591097202, -0.0124320806881215, -0.00659796760180498, -0.00764573936306593, -0.024255273227939, 0.10787872295819, 0.0513642644623307, 0.0812269504449895, -0.254226540885044, -0.206551947025893, 0.417220107102282, 0.0983244220117464, 0.0542495311672541, 0.132140523387534, -0.268507118668092, -0.336020030755683, 0.678736343273605, 0.0736455858695549, 0.0500118481387931, 0.131448910284485, -0.201113453401184, -0.309771944349812, 0.508377620011562, 0.0098592303992033, 0.00669528699742786, 0.0175975936224402, 0.00543973324107439, 0.00837873704784131, 0.0132500536336067, -0.0747318512681791, -0.115108315633292, -0.0935222838266846, 0.462886930472143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0273991946635944, 0.0208837824772988, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.120035982431373, 0.28854446919111, -0.378174407346313, 0.316347679887784, -0.00516318952324453, -0.00292490831688951, -0.00284951473428292, -0.00466960557446215, -0.161228140099431, 0.400101823491237, -0.550948270007868, 0.514636432413085, -0.00693501587567287, -0.00405573932646482, -0.00415135234621329, -0.00759654426569485, -0.0051943687715511, -0.00321746450671829, -0.00338045124712304, -0.00629128356187371, 0.0320511755142853, 0.0209500829955218, 0.0294811350675107, -0.0888981780171578, -0.0839333290017821, 0.16829532188209, 0.044442833384582, 0.0305213990124248, 0.0479600994071265, -0.129512458891892, -0.13654327736291, 0.273783907869764, 0.0332879505960335, 0.0242129757642645, 0.039053967076737, -0.0970056138378367, -0.108321347400084, 0.205065800379851, 0.00143183730650071, 0.00104148922898348, 0.0016798549032329, 0.000983323393772454, 0.00109802835866266, 0.00154515485006029, -0.0107752678944204, -0.0120322060831623, -0.0113602228338171, 0.0482052081612838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.010943732272892, 0.0101644112236962, 0.0100401662714876, 0.0195251039488213, -0.00508376488671082, -0.0317222402070977, 0.0822967853898158, -0.068632037336036, -0.00206888955864436, -0.0016509237082731, -0.00261316748166393, -0.020639741246323, -0.0434629513771954, 0.0685695955840055, -0.0418362555160873, -0.0321177209637212, 0.00265561165013045, 0.00277042286983628, 0.00774815294057066, -0.0335768632939074, 0.0557887295356487, -0.115066962106936, 0.124046280414075, -0.0522493142351214, 0.0167773679286114, 0.00365371796926715, 0.00645575293301409, -0.0212633870913165, 0.0103211392078776, -0.0225468980583686, 0.0596405772233313, 0.0114041815824651, -0.108008294229385, 0.0782597007030629, -0.0173199524369121, 0.0668525135558674, 0.0970236731312838, -0.0338138843694442, -0.175708585038306, 0.127313382496836, -0.00520863652853855, -0.00212276595816218, 0.00504941268934663, -0.0101688635658782, 0.00557926969439222, 0.038287006679738, -0.109422330078203, -0.0445947794744637, 0.106077377249782, 0.422354381832924, -0.231729827781458, 0.612966832642401, 0.0635730506039554, -0.034880121295448, 0.330347458639909, -0.167089166495659, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00766332463985556, 0.0155122697307477, 0.0110939404354585, 0.019707960384247, -0.0231802053744833, -0.0276298646655861, 0.0870824133797187, -0.0715230777133199, -0.015600616015244, -0.00470230194600554, -0.00496770894873694, -0.0215091650261775, -0.0575306459131931, 0.0722582786979662, -0.0242204129508016, -0.0257070439035826, 0.00895970133038225, 0.00338168273878045, 0.00558144257295922, -0.034991247469186, 0.0330408366068705, -0.0519648837128467, 0.0272127142256648, -0.0418203837218571, 0.0099363845894425, 0.00296439209504603, 0.00463130748587523, -0.028145727680784, 0.0666729850431343, -0.112240739741459, 0.117813620332084, 0.0269358648165764, -0.141998119943556, 0.0891102380811219, -0.0479481933002696, 0.126107477245156, 0.191659952362795, -0.0302636455110632, -0.231003451275631, 0.144965106220525, -0.0144194801926217, -0.00719393524937935, 0.0326184358075964, -0.00910119875154589, 0.0131778377235277, 0.0435954169258845, -0.0531749520918536, -0.0265291922543358, 0.120287537290538, 0.139854259344908, -0.202498240605752, 0.212552508933873, 0.129044050170326, -0.186845886872036, 0.984997691207882, -0.236382660307924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0024221724630117, 0.0235602360807905, -0.00170955493305567, -0.0116539403654933, 0.00630079692715646, -0.00613847546289097, -0.0581932607657202, 0.0456388471838219, -0.0521782100505411, 0.0221414434455208, 0.00763849492268663, 0.013724989570723, -0.0672348425655044, 0.0528374343948943, 0.00192278806264412, 0.00244161989758014, -0.00601102036289154, 0.00300848299556, 0.00140208737896742, 0.0223279009667123, -0.00774557056222397, 0.00717932068418056, 0.000352938229631996, 0.00397204289231752, -0.00232932866944801, -0.000942363494894066, -0.00127304603535341, -0.0328933134587859, 0.168468784091727, -0.169517341690776, -0.0140459588870734, -0.0915342352082088, 0.209713222196366, -0.0719006779748152, 0.0228908053564658, -0.0311158320724681, -0.0228500559069325, -0.0168016078072764, 0.34116281345662, -0.11696848358163, 0.00688396145322242, 0.004084289523792, 0.0824200118822443, -0.00505275453162591, -0.0447813094524679, -0.0351759809093125, 0.00887040900954796, 0.0052628590144837, 0.106203269866522, -0.0120576866063496, -0.106864283990075, -0.00885461820277448, -0.0384451634488724, -0.340729942564746, 0.780643154897168, 0.421523682717848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0189589162037067, 0.0297613960356095, -0.0114222456646251, 0.0118223838397411, 0.0552995939385817, -0.104936601954282, 0.0910163993406657, -0.0557239934719332, -0.105570386298514, 0.126084042471054, -0.0432981721365902, -0.0167578998251391, -0.0568851719559671, 0.0163313630643682, 0.00646605237524127, 0.00896099560153855, -0.0724739320858045, 0.0961639620233353, -0.0394468229313443, -0.027261858799801, -0.0390515961300792, 0.0124558869364592, 0.00589090048204167, 0.0145778050557571, -0.0117440028107332, -0.00592549409332422, -0.00707806935557156, -0.0278299423469547, 0.223813500790995, -0.0785471478787505, -0.0560183754307316, -0.326757131883804, 0.206562994372508, 0.202123969612012, 0.170701958539411, -0.0715604211734564, -0.0911310520484133, -0.297692260133122, 0.336038002649934, 0.328816568729681, 0.0513352712705216, 0.0340426061301113, 0.109496317042074, -0.0895251176953564, -0.159859447182854, 0.0988851440159855, 0.0276613152231208, 0.0183433969642295, 0.0590006065325077, -0.0115959733825858, -0.0207062100805646, -0.0147672866726002, -0.158917255565657, -0.283768681645197, 0.179387388583809, 0.746253812808758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0300889454319044, 0.0277086251948064, 0.0116134748343782, -0.0295941247801589, -0.064816550186493, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.131811378803804, 0.246174341648927, -0.220629172869922, 0.0838282289179192, -0.0292546938798929, -0.0043608438117746, -0.00298569745566065, -0.00432619334275631, -0.149068120911646, 0.294363584413147, -0.288327136953213, 0.136372299873129, -0.0330847176025077, -0.0052144898891641, -0.00390183033368204, -0.00703787904698736, -0.00994958093958393, -0.00580000035399221, -0.00633883292814324, -0.0143122788603934, 0.151653962827898, 0.0265817081097541, 0.0280730885764982, -0.333041069655042, -0.0900448667383325, 0.460415557245728, 0.181340605155926, 0.0347380525200546, 0.0456694803544962, -0.43523155552094, -0.14648556610804, 0.749006978310935, 0.0545346359098207, 0.0386386245243295, 0.0741936940166861, -0.130887367428771, -0.162933739126997, 0.225249181345676, 0.0121036142241398, 0.00857559599677633, 0.0164668166434046, 0.00231859812224148, 0.00288628206839869, 0.00304821841502321, -0.0806322373880537, -0.100374178118915, -0.0271383331252475, 0.34001500036677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0220003110095953, 0.0154943147771694, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660335, 0.700205786033841, -0.0879689972569602, 0.207984322071836, -0.265754984143154, 0.210573178414572, -0.00627310588132703, -0.00295334145686075, -0.00261054608514561, -0.00387120992564318, -0.126842853448363, 0.306175461989327, -0.403856272644197, 0.342561795741952, -0.0090452167784401, -0.00434763868718115, -0.00396713316558068, -0.00629770910904675, -0.00272017181873589, -0.00173022626023838, -0.00178611135162369, -0.00306899265680013, 0.0383008284550469, 0.0206233204859012, 0.0255831356372874, -0.103568695058546, -0.0782629848021484, 0.185719199739326, 0.0563829702642085, 0.0313403617540297, 0.0416188089603941, -0.157388834244543, -0.127318725090268, 0.302129183998959, 0.0169560741910449, 0.0124724984787893, 0.0187379208165116, -0.0473316098422472, -0.0506689302910032, 0.0908594356622285, 0.00120914472199046, 0.000889419068102542, 0.00133620894796064, 0.000672100686121853, 0.000719490060176158, 0.000892524160294768, -0.00871623327667443, -0.0093308091097666, -0.00705094305896755, 0.0354092820333485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0174985944065183, 0.029466788535953, -0.0283386095943202, 0.0195251039488212, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356274, -0.00534222456151996, -0.00361590696451072, -0.00430211705354466, -0.0107923090820133, -0.154527546186846, 0.330011368059035, -0.366622398302526, 0.239192632867617, -0.00342995289485344, -0.00259182591384804, -0.00371794677692978, -0.0175569975586256, -0.099213763531364, 0.236547019598299, -0.316839952784664, 0.389120107604863, -0.0113307209892054, -0.00562742560967802, -0.00678487933658822, -0.0287096173150645, 0.0311257440235668, -0.0815659404066919, 0.165998121769477, 0.0258512152336891, -0.124100720402198, 0.0563443238094874, 0.0223104495607474, -0.0704903705473225, 0.270046808008898, 0.0223409640327254, -0.201887847036956, 0.0916613069592545, 0.00254796784356058, 0.0016769575754001, 0.00578284080485394, 0.00255145275286997, 0.00480288799507128, 0.0104681916872639, 0.0737017349409976, 0.0485071595553235, 0.167272676255486, -0.232862300323701, -0.438343036323648, 0.892089521161031, -0.0219629172026517, -0.0413432822734826, 0.198471563814311, -0.0629028622529029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0217651615841542, 0.0301544408087981, -0.0195929661997852, 0.0197079603842469, 0.097663716224066, -0.196492083346238, 0.196789453010075, -0.0984800038037924, -0.0274091197540592, -0.00716343427876989, -0.0059403136438699, -0.0112469218624479, -0.139172828321605, 0.24875381038015, -0.205968627929981, 0.0566341297909967, -0.0211833561662757, -0.00609264721184798, -0.00592810457681623, -0.018296564542443, -0.10756082710638, 0.211570198073955, -0.205545302674772, 0.0921327651866989, -0.0122839984890329, -0.00638648725849467, -0.007493483920297, -0.0258568697967752, 0.139850019066564, -0.303301889052388, 0.438098662911986, 0.0443492233638008, -0.167789230656524, 0.0641563418218739, 0.118945298523638, -0.302678515721804, 0.712701711629256, 0.0442580728498248, -0.272960595421594, 0.104369947911727, 0.0135841635533057, 0.009136695534981, 0.025982684822101, 0.00505449906476698, 0.00823962628291245, 0.0119195837084822, 0.0689750885493811, 0.0463925792045309, 0.131929947642522, -0.175519988457197, -0.286125111813636, 0.413287992708297, -0.0986777798289386, -0.160860258909837, 0.60859282392127, -0.0889892877687579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0274003458448222, 0.029840904927402, 0.0107306055922189, -0.0116539403654934, -0.0616020791184594, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0610854342286922, 0.0232306873822274, 0.00669126628283959, 0.0071766563265923, -0.108378901130757, 0.135429332788424, -0.054612198797409, -0.0124821118327561, -0.0591659989897216, 0.0242282398847583, 0.00787120988341591, 0.0116750304913959, -0.104973403820014, 0.141244824496284, -0.0642425604898808, -0.0203059794997373, -0.0119885014703204, -0.00664803468950714, -0.00749836629912163, -0.0201356771221163, 0.243375823624968, -0.362768474720545, 0.238132814788185, -0.110404287296158, 0.267886498788715, -0.0517660436411063, 0.253826662117954, -0.426739376810483, 0.387395988763217, -0.129873073436884, 0.435799472520742, -0.0842133314492747, 0.0289883075262093, 0.0200855372261041, 0.0452167068747917, -0.0148321715329214, -0.0205119728904676, -0.0096175946588452, 0.0514315884793257, 0.0356361296383093, 0.0802243131397707, -0.0864680007722811, -0.11957987970927, 0.0784960528037532, -0.155388943236062, -0.214893266576778, 0.521420011906788, 0.158688002977296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0302582156650971, 0.0265020693494891, -0.00366448453027259, 0.0118223838397411, 0.0220838867907563, -0.0613915956629151, 0.29971631803346, -0.0767262716388461, -0.0891206073830918, 0.0989156565214032, -0.0302223496874193, -0.00876253400272344, -0.0661206272102359, 0.0421908315553681, 0.00264046129850602, 0.0018711989290251, -0.105520857724536, 0.123094447614705, -0.0406925701304418, -0.0142549464553037, -0.0782883499269332, 0.0525038935933196, 0.00355522180364805, 0.0030440784061077, -0.0089409313602637, -0.00529430977445573, -0.00572826125448666, -0.0122845275854092, 0.241764792404171, -0.180542653746288, -0.0171365171848401, -0.314040457459371, 0.355675036688131, 0.145522386249459, 0.300861406780796, -0.243089788685928, -0.0278777959462824, -0.422836525655092, 0.578614428417818, 0.236736750281292, 0.0343599167627111, 0.0245123276814269, 0.0449173939628028, -0.0482901013499828, -0.0583454638191476, 0.0270365518840592, 0.025492412068917, 0.018186259365489, 0.0333252470857065, -0.0205973412450426, -0.0248862892142954, -0.00236212503770406, -0.118028295404669, -0.142605118785308, 0.161511294647257, 0.280936830180622, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0257416392900367, 0.0190269258810565, -0.00428139506100089, -0.0295941247801589, 0.0263560489909356, -0.0712908034861193, 0.124137438646549, 0.383808683073226, -0.0878504334226812, 0.157568839051332, -0.132636080114132, 0.043832921424881, -0.026846546455891, 0.00174684397405049, 0.000844454371940369, 0.000919836089062749, -0.121303800469527, 0.223660496831054, -0.196471909613941, 0.0713076774021095, -0.0370696875098224, 0.00247955111857585, 0.00125087806345192, 0.0014963952428797, -0.00423354856605205, -0.0026493050315545, -0.00276472412449655, -0.0049878102254195, 0.133654373845705, -0.0100008671933939, -0.00690608582347842, -0.275675643274785, 0.0294662669971703, 0.331483547871064, 0.189715199007309, -0.0148141401162539, -0.0112348646634429, -0.408354348391796, 0.0479359119350407, 0.53925955942054, 0.0216664494002772, 0.0158283391111048, 0.0248315981213803, -0.0466361623797639, -0.0512176787686349, 0.0615862093229063, 0.00662113227785809, 0.00483704205785059, 0.00758838205535277, -0.000517019099184897, -0.000567810831510618, -0.000392101030648739, -0.0395581202410412, -0.0434442928364937, 0.00464364975090462, 0.128003012885621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0136019878329512, 0.00894945296698988, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0502269898723961, 0.116925136398513, -0.145927351620368, 0.110106556022686, -0.00493164708263807, -0.00188767340681872, -0.00151440904534089, -0.0020435610755013, -0.0769454525440012, 0.181036347722611, -0.229609921292738, 0.17912205076676, -0.00755505789865035, -0.00292270344760497, -0.00238285241145375, -0.0033244782502823, -0.000862826386782988, -0.00056176357920832, -0.000570886316972387, -0.000916248940524125, 0.0296474480394176, 0.0128750754489872, 0.0141325473043704, -0.0783043067552677, -0.0465267206212468, 0.133711509675399, 0.0459034376839122, 0.0202583342166779, 0.0229909184989447, -0.123208195799601, -0.0756899671933491, 0.217522740600862, 0.00524240817331119, 0.00389379030147013, 0.0055081887248166, -0.0140710083006512, -0.0145481290329094, 0.0248422133666614, 0.000514737336232584, 0.000382320334733678, 0.000540833582190832, 0.000227166450212476, 0.000234869226072765, 0.0002578082327336, -0.00356783408859096, -0.00368881245606527, -0.00219181234952917, 0.0133302788979787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0267678423103473, 0.0201430117194883, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198177, -0.113874016814714, -0.00337553010430037, -0.00205150924371624, -0.00205803437210198, -0.00341655366698139, -0.117658048548053, 0.288722082265174, -0.389392282440996, 0.341103554416912, -0.00458647086152874, -0.00287261154019161, -0.00301923029022293, -0.00555807139457087, -0.159866804506469, 0.404281086211672, -0.571256238409762, 0.554909447702642, -0.0047964718593699, -0.00298367308690573, -0.00312601768238469, -0.00574276601693963, 0.0212800115225836, -0.0601691836488125, 0.116674242781905, 0.0149020923897653, -0.0605819216858598, 0.0214941329323061, 0.029797188027501, -0.0882709367117854, 0.189806405664418, 0.0218620492158883, -0.0985550583339163, 0.0349667931625685, 0.00089400281880555, 0.00065145668992522, 0.00103865505607174, 0.000655925438529138, 0.000727355508725231, 0.00104910609763176, 0.0311615135421644, 0.0227072846284332, 0.0362035364034467, -0.0923126030276815, -0.102365415934278, 0.198497082175758, -0.00680382061772609, -0.00754475450407273, 0.0306719160336637, -0.00759650869077099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0252996401097377, 0.0185719699093625, 0.00525730855264604, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0157466541584317, -0.00374279051726947, -0.00267315597091042, -0.00356047179888876, -0.096348185690996, 0.202449247313066, -0.218148211810368, 0.127152152668921, -0.0218777468924621, -0.00534047574345146, -0.00397432758405993, -0.00579219833361036, -0.133862165186805, 0.28886877039115, -0.324332910255171, 0.206851936598334, -0.0040162565977032, -0.00251913179137713, -0.00262485806158831, -0.0047026539485232, 0.0880506682779472, -0.212599492451485, 0.326423530855205, 0.0240489893012457, -0.0827389756646381, 0.0244742477384673, 0.125636862646552, -0.316083324879609, 0.531027891320699, 0.0357549512968219, -0.134600295702078, 0.0398148630221872, 0.00376947345663155, 0.00275646118252991, 0.00429766082129845, 0.00107275314758293, 0.00117380595892329, 0.00119456237747497, 0.023064069668563, 0.0168658072497396, 0.0262958606114857, -0.0580257073642748, -0.0634917000508116, 0.0974846396461407, -0.02523695384663, -0.0276142623090699, 0.0950050643944833, -0.0107468543355463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0222798637815404, 0.0157384636757173, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0304886776317668, 0.0107584088389607, 0.00275781261113255, 0.00227193562591235, -0.0651840819226078, 0.100280437182775, -0.0649749437055039, 0.00838325633735857, -0.0438437190827521, 0.0158018985425534, 0.00418435023440399, 0.00369599943203772, -0.0937368491673824, 0.147291418079094, -0.0985846245778222, 0.0136379351193378, -0.00281237972201518, -0.00178705171664094, -0.00184603177137807, -0.00318156671073522, 0.135818617311492, -0.239058106385728, 0.217617054249946, -0.0548325275417145, 0.135594537640337, -0.0197476187160159, 0.199489724091347, -0.362716030615442, 0.354020818079538, -0.0831958264843426, 0.22058606255838, -0.0321255526459663, 0.00598527537215419, 0.00440074726428653, 0.00662916434183088, -0.00249611820153089, -0.002676318192213, -0.000963860569483065, 0.0127963791968913, 0.00940869504609353, 0.014172998801565, -0.0232666213244206, -0.0249462873527775, 0.0227088620848716, -0.0315120319233671, -0.033786951378502, 0.083551246966671, 0.0191640690194888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0174601641969978, 0.0118031792992787, 0.00832487477036382, 0.0118223838397412, -0.0614326220634957, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.0382036012222131, 0.040270790609051, -0.0113654215697484, -0.00277398168006038, -0.0341553717751246, 0.0297193862963568, -0.00423826638234881, -0.0016478488478394, -0.0571355455781429, 0.06111926211102, -0.0176401553036291, -0.00451273116942705, -0.0510812001582027, 0.0451053215830694, -0.00657817017555928, -0.0026807310630787, -0.00153258545360964, -0.000988567458496887, -0.00101096290126251, -0.00166708789365999, 0.118608021325499, -0.117471841982964, 0.023155147567194, -0.142311111700305, 0.194815672108919, 0.0555136223703438, 0.180012228074643, -0.182326851992763, 0.0376689424123681, -0.220879630062071, 0.316927383528958, 0.0903099165359298, 0.00540089350611567, 0.00399603386838149, 0.00578913319241678, -0.00662703513197385, -0.00694605618732156, 0.00270956171685511, 0.00482858996842364, 0.00357259572485573, 0.00517568999039126, -0.0048906766941494, -0.00512611061131823, 0.00101041956648684, -0.0195183534360827, -0.0204579539645001, 0.0280057544625234, 0.0339275351802632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0112160500006486, 0.0072737451295291, -0.0107414954878784, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.0328603051059602, 0.0572391342198021, -0.0460842819145467, 0.013876319450327, -0.0121007418432333, 0.00259749741088062, 0.000903952700718187, 0.000791639729753244, -0.0509893480914857, 0.0895677407263748, -0.0730358568886415, 0.0225740853843904, -0.0187767257796369, 0.00406456138455516, 0.00143261340615433, 0.00128784458422849, -0.000563356708674931, -0.000368625559680182, -0.000373344867856775, -0.000590624525008085, 0.0585061854534173, -0.0142235201623365, -0.00673572294369968, -0.115421158702177, 0.0381836357431629, 0.126453757203726, 0.0915504212460303, -0.0225418936754915, -0.0109577172391407, -0.182923176377682, 0.0621173832613312, 0.205715782381084, 0.0027467804875168, 0.00204438250187349, 0.00285562558404524, -0.00548823047180296, -0.00563358576833739, 0.00617207533649834, 0.00101149643840154, 0.000752839780526489, 0.00105157842819885, -0.000249054508513109, -0.00025565069504817, -0.000121066531530308, -0.00560971849366731, -0.00575829138967044, 0.00190495835770911, 0.015458374468255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00485293934295222, 0.00304595863694752, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0169490283234976, 0.0390069530753064, -0.0478485849051354, 0.0348567628001826, -0.00200537469754973, -0.00063888846666641, -0.000475038588244001, -0.000597351761171395, -0.0270708836687132, 0.062508320966162, -0.0770601206703531, 0.0567052050431295, -0.00320297211812925, -0.00102381350470722, -0.000765049394996884, -0.000971775672177995, -9.60985345168607e-05, -6.3600134020399e-05, -6.39179461700591e-05, -9.78802368935341e-05, 0.0119183832377098, 0.00428298179362938, 0.00428003792419057, -0.0309395457727483, -0.0149430883155113, 0.0510080300769956, 0.0190991109554805, 0.00689773991227524, 0.00696279311635679, -0.0498281220951642, -0.0243095118088301, 0.0829801901267499, 0.000573029207156392, 0.000428493256672904, 0.000581723792626533, -0.00149498944557373, -0.00151012679740921, 0.00248964847991304, 6.77996550038935e-05, 5.06984541302049e-05, 6.88283807440972e-05, 2.44861861606401e-05, 2.47341183557855e-05, 2.4717117579657e-05, -0.000456786694266104, -0.000461411837892337, -0.000222851295041539, 0.00160984056801367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00634204581202913, 0.00337366876311365, 0.0208770933958504, 0.0195251039488212, -0.00350519620228996, -0.00213578148775578, -0.00215103292273895, -0.00360148326124415, -0.00203791177178512, -0.0492117221773469, 0.0992013086517272, -0.0738509092732365, -0.002246579510867, -0.0534241146055895, 0.106929104926151, -0.0792361187978446, 0.00186672700723213, 0.00270775846140316, 0.0252970714511434, -0.0453962493417859, 0.0020578666382389, 0.0029395353782767, 0.0272677169715596, -0.0487065445939727, 0.0421979810464191, -0.135565454749909, 0.628290543629044, -0.0283178557954034, 0.0161444667353694, -0.0223718110929614, 0.0143676720035995, -0.022717931695821, 0.0101011981811167, 0.0146941439702451, -0.000888311046095925, -0.00570497820444046, 0.00883182654289643, -0.00579324153221628, 0.00620921957215439, 0.00903250928257812, -0.0182154333959, 0.263102111421653, 0.203498998675296, -0.118794431005032, -0.286356708329364, 0.185217860295404, -0.0200805648288415, 0.290041905135055, 0.224335855573075, -0.128962918095965, -0.310868080347518, 0.199646358368677, 0.0389718679788594, 0.0939425841553137, -0.0417702048278292, -0.0424164434544872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0106853276693847, 0.0115772632577271, 0.0192875795853981, 0.0197079603842469, -0.0163810014243474, -0.00390242657177239, -0.00279689872237215, -0.0037531913254445, -0.0274010505067601, -0.0481217403864261, 0.105826965373029, -0.0769617882285367, -0.00530248227273642, -0.0237500598790071, 0.0728748586553499, -0.06500202798837, 0.0146717000428917, 0.00719541733809589, 0.0244226254420099, -0.0473085106547024, 0.00283917689101593, 0.00355123466570231, 0.0168179761255124, -0.039956830583685, 0.0582192890483208, -0.134368965523375, 0.207386421256723, -0.066837130682762, 0.0358043028635584, -0.076795717786459, 0.0595392120224928, -0.0301110314791138, 0.016318509059072, 0.0167314550889353, -0.00535364888165098, -0.0177228274895513, 0.0365988305517866, -0.00694898923818526, 0.0100310086012752, 0.0102848470593369, -0.109780279168362, 0.670583112662058, 0.451308792072928, -0.142493838383863, -0.379545813158116, 0.210897913990534, -0.0212440024532164, 0.129767107520561, 0.0873344935774069, -0.0703265751992813, -0.187321483324288, 0.145229106953919, 0.106020532605796, 0.282395714198688, -0.153042815009205, -0.0600069529033936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0102352418729334, 0.00318614435970197, 0.0163965439250798, -0.0116539403654933, -0.0318063021955914, 0.0112436886986537, 0.00289018334287387, 0.00239490987846137, -0.0126571512820065, 0.0143537935251025, -0.0723998288978304, 0.0491092861808113, -0.000855846139544607, -0.00170119926809053, 0.033381776988997, -0.0441008898133744, 0.0285443214023184, -0.0170879000112391, -0.011721530367654, 0.0301875416619843, 0.00193009838737048, 0.0020252432182117, 0.0054045088042264, -0.0271088739443335, 0.0395780045482834, -0.0507328584660814, 0.00689944426242849, -0.010787834325671, 0.00573105683907241, -0.0797988402663339, 0.0920558261790193, 0.0455268719942122, -0.0372674873257956, -0.0135001655287294, -0.00682270690696131, -0.0129194301108828, 0.0565868352835746, 0.00737079936166037, -0.0229083726068186, -0.00829856919202067, -0.139904331697434, 0.323635014986764, 0.0722392598788915, 0.151143347183347, 0.573860568794342, -0.170167910286463, -0.00945999455336047, 0.0218834216346689, 0.00488464507640125, -0.0179133795644636, -0.0680134612436615, 0.0784602300632858, 0.0603471905904595, 0.229126016875703, -0.187558480429118, 0.10700595273598, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00496641091476419, -0.0118015616755321, 0.0123418011338163, 0.0118223838397412, -0.0399845505836984, 0.0422013001459019, -0.0119330872043853, -0.0029241304429919, 0.0594964820405093, -0.120624902691672, 0.125434652322349, -0.0599613204849073, 0.00168229735160562, 0.00204848339993469, 0.00753331313448479, -0.0231834539600411, -0.0204347654762905, 0.0301742710270643, -0.0150525237472732, -0.0368583011689747, -0.000577804782104811, -0.000512427300870805, -0.000904019525330459, -0.0142508991010522, -0.0118482873431862, 0.00538637983819946, 0.00258397885603977, 0.0212051492401302, -0.011236152923305, -0.0298340045411958, 0.0806085190825293, 0.0496738192420162, -0.0969030134598643, 0.0379510614356348, 0.00281071914707286, 0.00358016746982017, 0.0495501608220376, -0.00596100303954887, -0.0595664075674237, 0.0233285664952789, 0.0576357432941004, -0.0376329322111707, -0.141630312498688, -0.122234496933111, 0.626132323960991, 0.478368417328807, 0.00162968389014096, -0.00106409286769037, -0.0040046787885942, 0.0020758179470354, -0.0106331416082054, 0.0287296932280313, -0.011386085869469, 0.0583239313380668, -0.113777534921342, 0.189440364791817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0263496071105024, 0.00800383521292125, 0.00763236993753089, -0.029594124780159, -0.0344990911194156, 0.0601371945948343, -0.0484704728084981, 0.0146274102792547, -0.0455282927907743, 0.109434345863475, -0.15080433156421, 0.299945181214723, -0.000530247378602151, -0.000473709291275489, -0.000809912274627555, -0.00823909033431861, -0.135681023269177, 0.282736312981597, -0.302623682224073, 0.184376690406239, -0.00158021534532749, -0.00122388284394269, -0.00162527582784888, -0.00506457947298121, -0.0324034103825531, -0.00380781996748507, -0.00295758720151001, -0.00668370237087948, 0.00353768478630606, 0.00443980886007473, 0.0398642041456059, -0.0119454683360227, -0.0787301479845032, 0.0864482284436404, 0.00914001856619136, 0.00890950075286637, 0.0245045777907787, -0.0239713380659706, -0.0483955236813237, 0.0531398377109132, 0.187422412635165, 0.0277197895493027, 0.0445920774865157, -0.491548893679024, -0.150571145206207, 1.08966918597521, 0.00218282384204083, 0.000322839817682175, 0.000519343703536522, 0.00212777146164352, 0.000651778469724125, 0.00585219562230561, -0.0158903041743698, -0.00486751435712184, -0.0320807954006473, 0.0863145549122682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0261153899063017, 0.0302224845101157, 0.00320507108782467, 0.192230415140458, -0.0178382131382484, 0.0410650708630085, -0.0503948504088265, 0.0367434731025108, -0.183081952923273, 0.472755167242471, -0.693290980381533, 0.753450370761893, -0.000685098508853136, -0.00050660975004617, -0.000605395551988634, -0.0013687788337973, -0.15273114932588, 0.375858140305485, -0.510844558915112, 0.463146916325963, -0.000571524833484781, -0.000402773807050632, -0.000446079687282812, -0.000841390117526141, -0.0117195126461701, -0.00554103138111587, -0.00513542221486784, -0.00863558164111833, 0.00456844460258443, 0.00406019525351247, 0.00813727702558374, -0.0141780709602838, -0.0211330510483064, 0.0348708803444415, 0.0036320852978328, 0.00299171446345449, 0.00500199470056412, -0.010446970479823, -0.0129905137821947, 0.0214351751990884, 0.074478425233685, 0.0411575515467006, 0.0575846769898422, -0.21422236704193, -0.178712824081336, 0.439543117114766, 0.000278700643370784, 0.000154012870971955, 0.000215483698467152, 0.000229563095956124, 0.000191510670662553, 0.0003838178420581, -0.00207012653542038, -0.00172698194151856, -0.0025741440871495, 0.00898882818456476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0110271230805096, 0.0117859544381791, 0.0160091858217585, 0.0195251039488212, -0.00316207558373219, -0.00241577235429526, -0.00353354291864158, -0.0181912548602127, -0.0053363873650024, -0.0215894746779383, 0.0708866405450277, -0.0648153237617093, -0.0297142669526367, -0.0385011904458144, 0.0864255424365171, -0.0627342855826572, 0.00295045175569044, 0.00361626834906969, 0.0160892124049083, -0.0398420632543445, 0.0164288131844469, 0.00644900529020141, 0.0196160926625837, -0.0385628463970882, 0.0585357554359556, -0.129373925944914, 0.175306723361566, -0.065079496306369, 0.0357749037316646, -0.0262610115094857, 0.0142628870184278, -0.0819968258027643, 0.0145632415484492, 0.0651399463159162, -0.00599234830794829, -0.0059604883077429, 0.00876741507713457, -0.0186109023749111, 0.00895204339478135, 0.0400416091578108, -0.0213506983799165, 0.119573754125017, 0.0783533620054189, -0.0663105251505073, -0.179587540573384, 0.142667995223337, -0.118885738214352, 0.665814943251966, 0.436290050931203, -0.118253648848181, -0.320264119644221, 0.173941927289884, 0.109880054473007, 0.297586072438545, -0.0528534831921602, -0.16502859582585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0116958193796846, 0.00868942826669691, 0.0205403356838657, 0.0197079603842469, -0.0201247738104085, -0.00584323645334008, -0.00577935460978619, -0.0189575391547739, -0.0167229445882327, -0.0161405937908927, 0.0744586814191187, -0.0675455897618918, -0.016345793968674, -0.0164605936176498, 0.0767742256020672, -0.0700872974533169, 0.0148427436855893, 0.00638151686995211, 0.0144742293073119, -0.041520361292018, 0.0145079970177747, 0.00650803540571861, 0.014924354354337, -0.0430827522936911, 0.0516918998203713, -0.0838466866383685, 0.0412250887240754, -0.0358001777363246, 0.0606589183534292, -0.111649968396047, 0.0782426680475979, -0.107010375739815, 0.0295940856905749, 0.0741714582685035, -0.0239827552691317, -0.0217039465904844, 0.0480958691343095, -0.0208020433238828, 0.0181915227080135, 0.0455932912233093, -0.0854504023725405, 0.279624171526345, 0.132853752011542, -0.0741175462222497, -0.23437163581397, 0.162448602623015, -0.0835232494105545, 0.273317840187488, 0.129857516831937, -0.0755869842279408, -0.239018235798383, 0.167500490591787, 0.278545525839862, 0.880805880216168, -0.243589881034135, -0.233467551046818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00575929267843141, -0.00515804432869905, 0.0267098865309275, -0.0116539403654933, -0.0579732173172457, 0.0239119304978304, 0.00786274267358276, 0.0120967981262487, 0.0180568823364596, -0.0159481203670525, -0.0486788032710563, 0.043100813718339, 0.00616713919741479, 0.00514217279233536, 0.0477328791988055, -0.0705477914032104, 0.0151788194266241, -0.00831999241146463, -0.00467132225531151, 0.0264941258766691, 0.00518416692938239, 0.00268262576567024, 0.00458054935471427, -0.0433658185196249, 0.0184711533395946, -0.0166083283299718, -0.0030550085641489, 0.0135071248184838, -0.0321631653551498, -0.145964620231555, 0.171822073141542, 0.15461492822938, -0.0889816857642902, -0.0598469743850445, -0.016779237021334, -0.014007077683875, 0.105619250345273, 0.0148371797724686, -0.0546971571990112, -0.0367880124736601, -0.059784313307097, 0.0867188215718506, -0.0704430166245737, 0.0528647758526335, 0.33863401936357, -0.131075451218333, -0.0204187065694205, 0.0296179059986187, -0.0240590751445702, -0.0170452571090388, -0.109186198802953, 0.128528399601263, 0.106614352543, 0.68293577606614, -0.393033048742583, 0.416325384375381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0114965700457509, -0.0103543496131473, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163357, -0.0147699151361858, 0.0487160015083047, -0.088308009135392, 0.068305707099425, -0.052625112387307, 0.00695767866119309, 0.00519526230305947, 0.0120624974055012, -0.0538719236429517, -0.0456650504879515, 0.0640339164783739, -0.0289985647742537, -0.0323487245733811, -0.00652193812105309, -0.00376718935977072, -0.00512102322348429, -0.0331151410630414, -0.0232376234689827, 0.00622457516001486, 0.00364434309255471, 0.0152385459635857, -0.0415491378876404, -0.0562811451289643, 0.208024526539326, 0.136630693123355, -0.294625982202666, 0.168239137275043, 0.0301281169318002, 0.0238936466936199, 0.127872945220574, -0.0580053142400202, -0.181106971901399, 0.10341681503917, 0.107346286348629, -0.0394797780221854, -0.0909999553413712, -0.20667256059336, 0.299245365959432, 0.368473445107362, 0.0153313273413632, -0.00563854997513985, -0.0129967244405358, 0.0121587857504658, -0.0176049509478885, 0.0650708434821412, -0.0972399536775847, 0.140795688796734, -0.303607243389941, 0.737050889895457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0286331249853377, 0.0142799617871943, 0.0261981528295216, -0.029594124780159, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693798, -0.0786155180524535, 0.180183183238994, -0.22752856333055, 0.263247185749171, -0.00462473340853516, -0.00324555768787734, -0.00464646010384137, -0.025926427330224, -0.144761735858263, 0.294022599521716, -0.301560576395922, 0.161818385181666, -0.00851593238442509, -0.00529609529110004, -0.00615830015627244, -0.0159370083754822, -0.0303422121712232, -0.00597444597327729, -0.0048525477827356, -0.0101289835370484, 0.0294212418863082, 0.0278742507862941, 0.133035353826841, -0.0910346124745028, -0.287527730636603, 0.383229739093874, 0.0480095304404489, 0.0369438237145968, 0.0817770038721052, -0.120654962207572, -0.176743667493169, 0.235571815733863, 0.17105764737271, 0.0416757755850921, 0.0644377196220509, -0.429892852309206, -0.199381890716993, 0.839340860388867, 0.0100628481015949, 0.00245167056644537, 0.00379069275492269, 0.00774346432721736, 0.00359137526936511, 0.0171405460669788, -0.0701951279005208, -0.0325561061198117, -0.102826639852128, 0.335821880299532, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0243834140019698, 0.0296919171784482, 0.014002682081672, 0.192230415140458, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.17784500213963, 0.452155668420226, -0.646858537591112, 0.661266465096996, -0.00336147904794545, -0.00228012796141551, -0.00256799349356301, -0.00533850326641948, -0.141645882360695, 0.345411287467401, -0.462849575846566, 0.406481350416946, -0.0026772732438629, -0.00174183802117268, -0.00183748784347572, -0.00328158485493615, -0.00953910730364738, -0.00475113027769328, -0.00445019405091743, -0.007362233220608, 0.0220699483121887, 0.0178268522440293, 0.032468474045117, -0.0668177993242805, -0.0872806619365439, 0.154584525524274, 0.0168597007475024, 0.0127557271340279, 0.0199584129431101, -0.0478104381081749, -0.0536515356544614, 0.0950233075549245, 0.0600710050445713, 0.0347932015858051, 0.0483370874319141, -0.170348282676651, -0.146342789854297, 0.338567432066032, 0.00113541242327279, 0.000657632301918541, 0.000913627623414877, 0.000859031324028863, 0.000737976565159688, 0.00134409443819904, -0.00831478638071584, -0.00714306605782589, -0.00933062058446002, 0.0349726090309803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00888246788236103, -4.1621401110696e-06, -0.0100835618309506, 0.0195251039488213, 0.00276855422334106, 0.00354739278284635, 0.018497012182256, -0.0413981115341341, 1.34764571146093e-06, 2.3458968789053e-06, 0.0351417498325345, -0.0504430947992083, 1.70769882250376e-05, -2.18993997976694e-05, -0.062915024945878, 0.0427474066498151, 0.00207617681188772, 0.0020413294090695, 0.00495444159751826, -0.031007435542924, 0.0263087298629873, -0.0190562037323712, -0.00887004256151601, 0.0262768860950637, 0.0320568669764364, -0.0362041359827393, -5.86577422601205e-06, 1.27907673088466e-05, -8.84633105614372e-06, 0.0681493393296444, -0.0162998925724395, -0.0925068516383987, -0.0593298559286745, 0.115369044865993, -0.00769781311112114, 0.00960799969344683, -0.0100195650228908, -0.0130420310882868, -0.036470139090439, 0.0709175009299217, -0.00937969153956918, 0.018253862747739, -6.62595538389148e-06, -0.0158915560681608, -0.0692881905275169, 0.0864121113201356, -0.11885681869661, 0.231307825632447, -8.39622469952826e-05, 0.148350740803414, 0.646818621763509, -0.154705447658132, 0.059926745832443, 0.261284405700932, 0.167576410526233, -0.227470527214668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00438186087957959, -0.00681295111639307, -0.0118196797021562, 0.019707960384247, 0.0153251463175156, 0.00682473684164875, 0.0170656692030986, -0.0431419561966857, 0.0101073362006735, 0.0056834671579669, 0.0351451051021587, -0.0525679482857171, 0.0224826683241414, -0.0171152528866809, -0.0423250421086932, 0.0415371758142848, 0.00496290698942523, 0.00178381589036714, 0.00264840080550236, -0.0323135857262809, 0.0110394459580147, -0.00537180196847281, -0.00318945341855531, 0.025532955636908, 0.013451430472419, -0.011062709731633, -0.00265609563809118, 0.0168396543479754, -0.0486078465011174, 0.155615226861536, -0.0711213725288543, -0.114945842078814, -0.0680100252848934, 0.131364712142299, -0.0152560834038926, 0.011726568777374, -0.0437183995785951, -0.00866187936743335, -0.0418058504080333, 0.0807500582702356, -0.0185893518541936, 0.0241497410540249, -0.036407570572899, -0.010554394533443, -0.0860951298768103, 0.0983929627081788, -0.0413499881472977, 0.0537184681949509, -0.0809846746389742, 0.0317836149105704, 0.259267781302797, -0.118494062764006, 0.0902664474228084, 0.736328501815995, 0.435663605754063, -0.321804755462983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0064996386731241, -0.0117909391625216, -0.00729939888432001, -0.0116539403654932, 0.0195387056426205, -0.0109690858690785, -0.00648860340814753, 0.027528864934527, 0.0347177461769008, -0.0226829837593198, -0.0194855585338848, 0.0335435867035135, 0.0269842516546398, -0.00603551746377185, -0.0087648884639266, 0.0185044353861291, -0.015752748956729, 0.00761282852421944, 0.00331676160313959, 0.0206192860832164, -0.0122437712383397, 0.00202563119535546, 0.00149192775061615, 0.01137470033862, -0.0149188861614177, 0.00608305867108567, 0.00308515890396074, 0.0202113674476524, -0.104103979779745, 0.0482167279666833, -0.0613421198629881, 0.140845268185824, 0.0571481039328642, -0.105994687797817, 0.0349392194237379, -0.00820727779862233, -0.0377070803306022, -0.0239741743450806, 0.0351290133199052, -0.0651550715289333, 0.0425730134126713, -0.0246468125557046, -0.0779745095406276, -0.0292122395057681, 0.105493956438009, -0.0793906612641799, 0.0330897317403691, -0.0191566523097156, -0.0606054257488449, -0.00777283022214894, 0.0280699674769363, -0.0357110775063413, -0.13407012159853, 0.484166493457688, 0.196451023490723, 0.57385057542787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0218166735098091, -0.000396180986240272, 0.00962857943557116, 0.0118223838397412, -0.0386200930353358, 0.0549301045311349, -0.0255353246076024, -0.0336121174078453, 0.00168506853674374, -0.00261416436528498, 0.0014366558294036, -0.0409559557664379, 0.000547681628745547, 9.49985402433978e-05, 0.000112306740668029, -0.0152948461494823, -0.0821315304265298, 0.106627813860814, -0.0421122676094751, -0.0251756789225904, -0.0266944218436788, -0.00387484689204746, -0.00329201428801461, -0.0094017616882313, -0.0325268279583358, 0.000218004723301912, 0.00015666939859652, 0.000410216847388452, -0.00279906307588769, -0.000731198562915999, 0.071665710986536, 0.00653976121473101, -0.141635372249502, 0.297967524909641, 0.114169552842125, 0.0214334073109036, 0.0440530051317885, -0.191698087141148, -0.0870634463072908, 0.183161022520475, 0.139114209894574, -0.00120587578307177, -0.0020965151474268, -0.233581784872354, 0.00489832064355625, 0.223179475587968, 0.0452149544041173, -0.000391934214267958, -0.000681410165577516, 0.00848834483592521, -0.000178004610942688, 0.0174464607140272, -0.250102923105532, 0.00524477673604125, -0.113589148133034, 1.01592911016151, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0302602001667238, 0.023673129138354, 0.0280757815135755, -0.029594124780159, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.123983018812676, 0.264604231380493, -0.294894932128271, 0.204874433632237, -0.0165981047421915, -0.00715703702973127, -0.00768596711021528, -0.0232728591097202, -0.148692369932632, 0.290316139028517, -0.279210915864664, 0.125936579040831, -0.019906044828892, -0.00785249482412088, -0.00727718818584281, -0.0143058565620666, -0.0242552732279389, -0.00764573936306609, -0.00659796760180477, -0.0124320806881216, 0.0983244220117469, 0.0542495311672537, 0.132140523387534, -0.268507118668092, -0.336020030755683, 0.678736343273606, 0.107878722958189, 0.051364264462331, 0.0812269504449892, -0.254226540885045, -0.206551947025893, 0.417220107102281, 0.131448910284485, 0.0500118481387929, 0.0736455858695552, -0.309771944349812, -0.201113453401184, 0.508377620011561, 0.0175975936224402, 0.00669528699742787, 0.00985923039920333, 0.00837873704784175, 0.00543973324107402, 0.0132500536336067, -0.115108315633292, -0.0747318512681792, -0.0935222838266847, 0.462886930472143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.020883782477299, 0.0273991946635943, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.161228140099431, 0.400101823491238, -0.550948270007869, 0.514636432413085, -0.00693501587567314, -0.0040557393264644, -0.00415135234621372, -0.00759654426569485, -0.120035982431373, 0.288544469191109, -0.378174407346312, 0.316347679887783, -0.00516318952324426, -0.00292490831688987, -0.00284951473428247, -0.0046696055744621, -0.00629128356187374, -0.00338045124712313, -0.00321746450671816, -0.00519436877155106, 0.0444428333845823, 0.0305213990124244, 0.0479600994071268, -0.129512458891891, -0.13654327736291, 0.273783907869764, 0.0320511755142849, 0.0209500829955222, 0.0294811350675104, -0.0888981780171579, -0.0839333290017816, 0.16829532188209, 0.0390539670767367, 0.0242129757642644, 0.0332879505960336, -0.108321347400084, -0.0970056138378363, 0.205065800379851, 0.00167985490323291, 0.00104148922898353, 0.00143183730650063, 0.00109802835866304, 0.000983323393772196, 0.00154515485006024, -0.012032206083162, -0.0107752678944207, -0.0113602228338171, 0.0482052081612838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0101644112236963, -0.0109437322728922, 0.0100401662714875, 0.0195251039488213, -0.00508376488671081, -0.0317222402070976, 0.0822967853898158, -0.068632037336036, 0.0026556116501308, 0.00277042286983689, 0.00774815294057039, -0.0335768632939074, 0.0557887295356482, -0.115066962106936, 0.124046280414075, -0.0522493142351215, -0.00206888955864488, -0.00165092370827348, -0.00261316748166373, -0.020639741246323, -0.043462951377195, 0.068569595584005, -0.0418362555160868, -0.0321177209637212, -0.0212633870913168, 0.00645575293301415, 0.00365371796926729, 0.0167773679286117, -0.0173199524369119, 0.0668525135558671, 0.0970236731312839, -0.0338138843694442, -0.175708585038306, 0.127313382496836, 0.0103211392078775, -0.0225468980583681, 0.0596405772233311, 0.0114041815824648, -0.108008294229385, 0.0782597007030628, 0.00504941268934666, -0.00212276595816234, -0.00520863652853827, 0.00557926969439197, -0.0101688635658782, 0.038287006679738, 0.106077377249782, -0.044594779474464, -0.109422330078203, -0.231729827781458, 0.422354381832925, 0.612966832642401, -0.0348801212954484, 0.0635730506039557, 0.33034745863991, -0.167089166495659, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0155122697307479, -0.00766332463985574, 0.0110939404354584, 0.019707960384247, -0.0231802053744834, -0.0276298646655859, 0.0870824133797185, -0.0715230777133199, 0.00895970133038269, 0.00338168273878089, 0.00558144257295908, -0.0349912474691861, 0.0330408366068701, -0.0519648837128461, 0.0272127142256642, -0.0418203837218572, -0.0156006160152445, -0.00470230194600581, -0.00496770894873677, -0.0215091650261775, -0.0575306459131926, 0.0722582786979657, -0.0242204129508011, -0.0257070439035827, -0.0281457276807843, 0.00463130748587522, 0.00296439209504614, 0.00993638458944269, -0.0479481933002692, 0.126107477245156, 0.191659952362795, -0.0302636455110632, -0.231003451275632, 0.144965106220525, 0.066672985043134, -0.112240739741458, 0.117813620332084, 0.0269358648165762, -0.141998119943555, 0.0891102380811219, 0.0326184358075964, -0.0071939352493796, -0.0144194801926214, 0.0131778377235274, -0.00910119875154587, 0.0435954169258846, 0.120287537290538, -0.0265291922543359, -0.0531749520918536, -0.202498240605751, 0.139854259344908, 0.212552508933873, -0.186845886872037, 0.129044050170326, 0.984997691207882, -0.236382660307924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0235602360807907, 0.00242217246301154, -0.00170955493305571, -0.0116539403654933, 0.0063007969271565, -0.00613847546289085, -0.0581932607657203, 0.0456388471838219, -0.00601102036289116, 0.00300848299556035, 0.00140208737896728, 0.0223279009667123, -0.00774557056222427, 0.00717932068418103, 0.000352938229631503, 0.00397204289231757, -0.0521782100505415, 0.0221414434455206, 0.00763849492268674, 0.013724989570723, -0.067234842565504, 0.0528374343948941, 0.00192278806264456, 0.00244161989758007, -0.0328933134587861, -0.00127304603535352, -0.000942363494893915, -0.00232932866944779, 0.022890805356466, -0.0311158320724686, -0.0228500559069326, -0.0168016078072761, 0.34116281345662, -0.11696848358163, 0.168468784091727, -0.169517341690775, -0.0140459588870734, -0.0915342352082089, 0.209713222196367, -0.0719006779748154, 0.0824200118822442, 0.00408428952379178, 0.0068839614532226, -0.0447813094524683, -0.00505275453162574, -0.0351759809093123, 0.106203269866522, 0.00526285901448367, 0.00887040900954807, -0.106864283990075, -0.0120576866063498, -0.00885461820277454, -0.340729942564746, -0.0384451634488726, 0.780643154897169, 0.421523682717848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0297613960356096, 0.0189589162037066, -0.0114222456646251, 0.0118223838397411, 0.0552995939385818, -0.104936601954282, 0.0910163993406656, -0.0557239934719332, -0.0724739320858042, 0.0961639620233359, -0.0394468229313447, -0.0272618587998011, -0.0390515961300794, 0.0124558869364596, 0.00589090048204124, 0.0145778050557572, -0.105570386298514, 0.126084042471053, -0.0432981721365898, -0.016757899825139, -0.0568851719559668, 0.0163313630643679, 0.00646605237524169, 0.00896099560153851, -0.0278299423469548, -0.00707806935557175, -0.00592549409332399, -0.0117440028107331, 0.170701958539411, -0.0715604211734568, -0.0911310520484136, -0.297692260133122, 0.336038002649934, 0.328816568729681, 0.223813500790995, -0.07854714787875, -0.0560183754307313, -0.326757131883804, 0.206562994372508, 0.202123969612012, 0.109496317042074, 0.0340426061301111, 0.0513352712705218, -0.159859447182854, -0.0895251176953559, 0.0988851440159855, 0.0590006065325076, 0.0183433969642295, 0.0276613152231209, -0.020706210080564, -0.0115959733825863, -0.0147672866726002, -0.283768681645197, -0.158917255565657, 0.179387388583808, 0.746253812808758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0277086251948065, 0.0300889454319044, 0.0116134748343782, -0.0295941247801589, -0.0648165501864931, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.149068120911646, 0.294363584413148, -0.288327136953214, 0.136372299873129, -0.033084717602508, -0.00521448988916373, -0.00390183033368246, -0.00703787904698734, -0.131811378803804, 0.246174341648926, -0.220629172869921, 0.0838282289179195, -0.0292546938798926, -0.00436084381177492, -0.0029856974556602, -0.00432619334275627, -0.0143122788603934, -0.00633883292814341, -0.00580000035399201, -0.00994958093958393, 0.181340605155927, 0.0347380525200541, 0.0456694803544961, -0.435231555520939, -0.14648556610804, 0.749006978310935, 0.151653962827897, 0.0265817081097546, 0.0280730885764982, -0.333041069655043, -0.0900448667383322, 0.460415557245728, 0.0741936940166859, 0.0386386245243293, 0.054534635909821, -0.162933739126997, -0.130887367428771, 0.225249181345676, 0.0164668166434044, 0.00857559599677635, 0.0121036142241399, 0.00288628206839922, 0.00231859812224105, 0.00304821841502317, -0.100374178118915, -0.0806322373880541, -0.0271383331252475, 0.34001500036677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0154943147771695, 0.0220003110095952, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660335, 0.700205786033841, -0.126842853448363, 0.306175461989328, -0.403856272644199, 0.342561795741953, -0.00904521677844041, -0.00434763868718073, -0.00396713316558115, -0.00629770910904674, -0.0879689972569602, 0.207984322071835, -0.265754984143152, 0.210573178414572, -0.00627310588132673, -0.00295334145686112, -0.00261054608514511, -0.00387120992564318, -0.00306899265680018, -0.00178611135162381, -0.00173022626023824, -0.00272017181873582, 0.0563829702642088, 0.0313403617540292, 0.0416188089603943, -0.157388834244543, -0.127318725090269, 0.302129183998959, 0.0383008284550465, 0.0206233204859016, 0.0255831356372871, -0.103568695058546, -0.0782629848021477, 0.185719199739326, 0.0187379208165114, 0.0124724984787892, 0.0169560741910451, -0.0506689302910035, -0.0473316098422466, 0.0908594356622282, 0.00133620894796065, 0.000889419068102588, 0.00120914472199039, 0.000719490060176461, 0.00067210068612165, 0.000892524160294737, -0.00933080910976633, -0.00871623327667485, -0.00705094305896757, 0.0354092820333485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.029466788535953, 0.0174985944065183, -0.0283386095943203, 0.0195251039488213, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.00342995289485286, -0.00259182591384755, -0.00371794677692989, -0.0175569975586256, -0.0992137635313647, 0.2365470195983, -0.316839952784665, 0.389120107604863, -0.00534222456152059, -0.0036159069645112, -0.00430211705354452, -0.0107923090820134, -0.154527546186846, 0.330011368059035, -0.366622398302525, 0.239192632867617, -0.0287096173150647, -0.00678487933658831, -0.0056274256096779, -0.0113307209892052, 0.0223104495607474, -0.0704903705473226, 0.270046808008898, 0.0223409640327253, -0.201887847036957, 0.0916613069592547, 0.0311257440235669, -0.0815659404066918, 0.165998121769477, 0.025851215233689, -0.124100720402198, 0.0563443238094873, 0.00578284080485381, 0.00167695757540006, 0.00254796784356087, 0.00480288799507106, 0.00255145275287009, 0.0104681916872639, 0.167272676255486, 0.0485071595553236, 0.073701734940998, -0.438343036323648, -0.232862300323702, 0.892089521161031, -0.0413432822734827, -0.0219629172026517, 0.198471563814312, -0.062902862252903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0301544408087981, 0.0217651615841542, -0.0195929661997853, 0.0197079603842469, 0.0976637162240659, -0.196492083346238, 0.196789453010075, -0.0984800038037924, -0.0211833561662751, -0.00609264721184761, -0.00592810457681632, -0.0182965645424431, -0.10756082710638, 0.211570198073956, -0.205545302674772, 0.0921327651866989, -0.0274091197540599, -0.00716343427877026, -0.0059403136438697, -0.011246921862448, -0.139172828321605, 0.24875381038015, -0.20596862792998, 0.0566341297909968, -0.0258568697967754, -0.00749348392029719, -0.00638648725849449, -0.0122839984890327, 0.118945298523638, -0.302678515721805, 0.712701711629256, 0.0442580728498246, -0.272960595421595, 0.104369947911727, 0.139850019066563, -0.303301889052387, 0.438098662911986, 0.0443492233638009, -0.167789230656523, 0.0641563418218739, 0.0259826848221011, 0.00913669553498091, 0.0135841635533058, 0.00823962628291221, 0.00505449906476722, 0.0119195837084822, 0.131929947642522, 0.0463925792045309, 0.0689750885493811, -0.286125111813635, -0.175519988457197, 0.413287992708297, -0.160860258909837, -0.0986777798289385, 0.60859282392127, -0.0889892877687579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0298409049274021, 0.0274003458448222, 0.0107306055922188, -0.0116539403654934, -0.0616020791184594, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0591659989897212, 0.0242282398847587, 0.00787120988341571, 0.0116750304913959, -0.104973403820015, 0.141244824496285, -0.0642425604898813, -0.0203059794997371, -0.0610854342286926, 0.0232306873822271, 0.00669126628283981, 0.00717665632659228, -0.108378901130757, 0.135429332788424, -0.0546121987974085, -0.0124821118327562, -0.0201356771221164, -0.00749836629912192, -0.00664803468950688, -0.0119885014703201, 0.253826662117954, -0.426739376810484, 0.387395988763217, -0.129873073436885, 0.435799472520741, -0.0842133314492746, 0.243375823624968, -0.362768474720544, 0.238132814788185, -0.110404287296158, 0.267886498788715, -0.0517660436411064, 0.0452167068747917, 0.020085537226104, 0.0289883075262094, -0.0205119728904679, -0.0148321715329211, -0.00961759465884515, 0.0802243131397706, 0.0356361296383094, 0.0514315884793258, -0.119579879709269, -0.0864680007722815, 0.0784960528037531, -0.214893266576778, -0.155388943236063, 0.521420011906788, 0.158688002977296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0265020693494891, 0.0302582156650971, -0.00366448453027262, 0.011822383839741, 0.0220838867907564, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.105520857724535, 0.123094447614705, -0.0406925701304423, -0.0142549464553037, -0.0782883499269335, 0.0525038935933199, 0.00355522180364761, 0.00304407840610783, -0.089120607383092, 0.0989156565214025, -0.030222349687419, -0.00876253400272335, -0.0661206272102355, 0.0421908315553678, 0.00264046129850653, 0.00187119892902504, -0.0122845275854094, -0.00572826125448691, -0.00529430977445547, -0.00894093136026353, 0.300861406780797, -0.243089788685928, -0.0278777959462829, -0.422836525655092, 0.578614428417818, 0.236736750281293, 0.241764792404171, -0.180542653746287, -0.0171365171848398, -0.314040457459371, 0.355675036688131, 0.145522386249459, 0.0449173939628027, 0.0245123276814267, 0.0343599167627112, -0.0583454638191481, -0.0482901013499821, 0.0270365518840592, 0.0333252470857063, 0.018186259365489, 0.0254924120689171, -0.0248862892142949, -0.0205973412450431, -0.00236212503770406, -0.142605118785308, -0.118028295404669, 0.161511294647257, 0.280936830180622, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0190269258810565, 0.0257416392900367, -0.00428139506100089, -0.0295941247801589, 0.0263560489909356, -0.0712908034861192, 0.124137438646549, 0.383808683073226, -0.121303800469527, 0.223660496831055, -0.196471909613941, 0.0713076774021094, -0.0370696875098228, 0.00247955111857614, 0.00125087806345151, 0.00149639524287972, -0.0878504334226815, 0.157568839051331, -0.132636080114132, 0.0438329214248812, -0.0268465464558907, 0.00174684397405024, 0.000844454371940819, 0.000919836089062767, -0.00498781022541955, -0.00276472412449673, -0.0026493050315543, -0.00423354856605198, 0.189715199007309, -0.0148141401162545, -0.0112348646634433, -0.408354348391796, 0.0479359119350406, 0.539259559420539, 0.133654373845705, -0.0100008671933934, -0.00690608582347818, -0.275675643274785, 0.0294662669971708, 0.331483547871064, 0.0248315981213801, 0.0158283391111047, 0.0216664494002774, -0.0512176787686355, -0.0466361623797633, 0.0615862093229061, 0.00758838205535266, 0.00483704205785062, 0.00662113227785814, -0.000567810831510193, -0.000517019099185257, -0.000392101030648767, -0.0434442928364933, -0.0395581202410417, 0.00464364975090459, 0.128003012885621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00894945296698996, 0.0136019878329511, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0769454525440012, 0.181036347722613, -0.229609921292739, 0.17912205076676, -0.00755505789865066, -0.00292270344760456, -0.00238285241145427, -0.00332447825028227, -0.0502269898723962, 0.116925136398511, -0.145927351620367, 0.110106556022686, -0.00493164708263777, -0.00188767340681912, -0.00151440904534036, -0.00204356107550131, -0.000916248940524205, -0.000570886316972531, -0.000561763579208162, -0.000862826386782888, 0.0459034376839125, 0.0202583342166773, 0.0229909184989449, -0.123208195799601, -0.0756899671933498, 0.217522740600863, 0.0296474480394172, 0.0128750754489878, 0.0141325473043702, -0.0783043067552677, -0.0465267206212462, 0.133711509675399, 0.0055081887248165, 0.00389379030147006, 0.00524240817331128, -0.0145481290329099, -0.0140710083006507, 0.0248422133666613, 0.000540833582190827, 0.000382320334733712, 0.000514737336232554, 0.000234869226072947, 0.000227166450212353, 0.000257808232733576, -0.00368881245606499, -0.00356783408859128, -0.00219181234952919, 0.0133302788979787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0201430117194883, 0.0267678423103473, 0.259211232824318, 0.0195251039488213, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.00458647086152805, -0.00287261154019111, -0.00301923029022306, -0.00555807139457086, -0.15986680450647, 0.404281086211673, -0.571256238409762, 0.554909447702642, -0.00337553010430104, -0.00205150924371678, -0.00205803437210181, -0.00341655366698144, -0.117658048548053, 0.288722082265174, -0.389392282440996, 0.341103554416912, -0.00574276601693985, -0.00312601768238482, -0.0029836730869056, -0.00479647185936965, 0.0297971880275008, -0.0882709367117853, 0.189806405664417, 0.0218620492158883, -0.0985550583339167, 0.0349667931625685, 0.0212800115225837, -0.0601691836488126, 0.116674242781905, 0.0149020923897653, -0.0605819216858594, 0.021494132932306, 0.00103865505607153, 0.000651456689925251, 0.000894002818805768, 0.00072735550872486, 0.000655925438529503, 0.00104910609763177, 0.0362035364034468, 0.0227072846284331, 0.0311615135421645, -0.102365415934278, -0.0923126030276813, 0.198497082175758, -0.0075447545040723, -0.00680382061772664, 0.0306719160336639, -0.00759650869077093, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0185719699093626, 0.0252996401097377, 0.00525730855264603, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0218777468924614, -0.00534047574345093, -0.0039743275840601, -0.00579219833361036, -0.133862165186805, 0.288868770391149, -0.324332910255171, 0.206851936598333, -0.0157466541584324, -0.00374279051727004, -0.00267315597091017, -0.00356047179888883, -0.0963481856909959, 0.202449247313067, -0.218148211810369, 0.127152152668922, -0.00470265394852339, -0.00262485806158852, -0.00251913179137695, -0.00401625659770297, 0.125636862646552, -0.316083324879609, 0.531027891320698, 0.0357549512968219, -0.134600295702079, 0.039814863022187, 0.0880506682779475, -0.212599492451485, 0.326423530855206, 0.0240489893012457, -0.0827389756646374, 0.0244742477384673, 0.00429766082129838, 0.00275646118252991, 0.00376947345663167, 0.00117380595892291, 0.00107275314758336, 0.00119456237747498, 0.0262958606114857, 0.0168658072497396, 0.023064069668563, -0.0634917000508116, -0.0580257073642747, 0.0974846396461408, -0.0276142623090699, -0.0252369538466303, 0.0950050643944833, -0.0107468543355462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0157384636757173, 0.0222798637815404, -0.0132573892568218, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0438437190827516, 0.0158018985425539, 0.0041843502344037, 0.00369599943203776, -0.0937368491673827, 0.147291418079094, -0.0985846245778226, 0.0136379351193379, -0.0304886776317673, 0.0107584088389603, 0.00275781261113285, 0.00227193562591228, -0.0651840819226074, 0.100280437182775, -0.0649749437055034, 0.00838325633735861, -0.00318156671073541, -0.00184603177137833, -0.0017870517166407, -0.00281237972201493, 0.199489724091347, -0.362716030615442, 0.354020818079538, -0.0831958264843426, 0.220586062558379, -0.0321255526459662, 0.135818617311492, -0.239058106385728, 0.217617054249946, -0.0548325275417144, 0.135594537640338, -0.019747618716016, 0.00662916434183087, 0.00440074726428651, 0.0059852753721542, -0.00267631819221339, -0.00249611820153046, -0.000963860569483051, 0.014172998801565, 0.00940869504609354, 0.0127963791968913, -0.0249462873527773, -0.0232666213244206, 0.0227088620848716, -0.0337869513785018, -0.0315120319233677, 0.083551246966671, 0.0191640690194888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0118031792992787, 0.0174601641969977, 0.0083248747703638, 0.0118223838397411, -0.0614326220634956, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.0571355455781427, 0.0611192621110207, -0.0176401553036295, -0.004512731169427, -0.0510812001582031, 0.0451053215830698, -0.00657817017555986, -0.00268073106307862, -0.0382036012222133, 0.0402707906090503, -0.0113654215697481, -0.0027739816800604, -0.0341553717751242, 0.0297193862963563, -0.00423826638234818, -0.00164784884783943, -0.00166708789366014, -0.00101096290126277, -0.00098856745849664, -0.00153258545360944, 0.180012228074644, -0.182326851992764, 0.0376689424123681, -0.220879630062072, 0.316927383528958, 0.0903099165359302, 0.118608021325498, -0.117471841982963, 0.0231551475671938, -0.142311111700304, 0.194815672108919, 0.0555136223703433, 0.00578913319241672, 0.00399603386838144, 0.00540089350611572, -0.00694605618732211, -0.00662703513197324, 0.00270956171685507, 0.00517568999039116, 0.00357259572485575, 0.00482858996842372, -0.00512611061131802, -0.00489067669414958, 0.00101041956648683, -0.0204579539644996, -0.0195183534360833, 0.0280057544625234, 0.0339275351802631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00727374512952923, 0.0112160500006485, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.0509893480914854, 0.0895677407263758, -0.0730358568886419, 0.0225740853843904, -0.0187767257796371, 0.00406456138455539, 0.0014326134061539, 0.00128784458422849, -0.0328603051059606, 0.0572391342198012, -0.0460842819145464, 0.0138763194503271, -0.012100741843233, 0.00259749741088042, 0.000903952700718652, 0.000791639729753269, -0.000590624525008215, -0.000373344867856958, -0.000368625559679985, -0.000563356708674795, 0.0915504212460303, -0.0225418936754921, -0.010957717239141, -0.182923176377682, 0.0621173832613309, 0.205715782381084, 0.0585061854534173, -0.0142235201623358, -0.00673572294369949, -0.115421158702178, 0.0381836357431634, 0.126453757203726, 0.00285562558404519, 0.00204438250187344, 0.00274678048751685, -0.00563358576833797, -0.0054882304718023, 0.00617207533649829, 0.0010515784281988, 0.000752839780526503, 0.00101149643840156, -0.000255650695047915, -0.000249054508513316, -0.000121066531530313, -0.00575829138966999, -0.00560971849366782, 0.00190495835770914, 0.0154583744682551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00304595863694763, 0.00485293934295212, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0270708836687133, 0.0625083209661633, -0.0770601206703545, 0.0567052050431299, -0.00320297211812957, -0.00102381350470684, -0.000765049394997423, -0.000971775672177949, -0.0169490283234975, 0.039006953075305, -0.0478485849051342, 0.0348567628001822, -0.00200537469754942, -0.000638888466666784, -0.00047503858824346, -0.000597351761171435, -9.78802368936556e-05, -6.39179461702391e-05, -6.3600134020219e-05, -9.60985345167288e-05, 0.0190991109554808, 0.00689773991227452, 0.00696279311635696, -0.0498281220951644, -0.0243095118088308, 0.0829801901267502, 0.0119183832377096, 0.0042829817936301, 0.00428003792419041, -0.030939545772748, -0.0149430883155105, 0.0510080300769955, 0.000581723792626429, 0.000428493256672904, 0.000573029207156413, -0.00151012679740979, -0.00149498944557315, 0.00248964847991304, 6.88283807440959e-05, 5.06984541302101e-05, 6.77996550038705e-05, 2.47341183558501e-05, 2.44861861606084e-05, 2.4717117579657e-05, -0.000461411837892146, -0.000456786694266412, -0.000222851295041539, 0.00160984056801368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.011212845430362, -0.0125131983511539, 0.0208770933958504, 0.0195251039488212, -0.00350519620228989, -0.00213578148775581, -0.00215103292273891, -0.00360148326124414, 0.110772181805886, -0.208071106282044, 0.201984382314542, -0.0990472496003534, 0.12211446906808, -0.22588143914298, 0.217718994875169, -0.10626977667799, -0.00226985035225343, -0.00179692337955243, -0.00280290297783895, -0.020199909014669, -0.00250226696008438, -0.00195073523785101, -0.00302124952471526, -0.021672886713827, -0.0688168296738454, 0.183176207073004, -0.294334759695954, 0.684912572298823, 0.0682600995319011, -0.0455513793747798, 0.0192696123733747, -0.046256117619921, 0.0135475095344601, 0.0197074695465101, 0.000589501209135587, 0.000632108757277614, 0.00392988617312117, 0.000641888290245403, 0.00276290821881126, 0.00401918370631303, 0.0162123406290093, -0.0593557148961154, 0.382855534749968, 0.0176530793253001, -0.259440152714044, 0.110534761061572, 0.0178723695424865, -0.0654333199232001, 0.422057231279378, 0.0191641359271617, -0.281647539217126, 0.119145434915934, -0.00579129401155796, 0.0851123010939679, -0.0249277235077291, -0.0253133873528492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0164398153896086, -0.0273770165770783, 0.0192875795853981, 0.0197079603842468, -0.0163810014243473, -0.00390242657177235, -0.00279689872237217, -0.00375319132544443, 0.180416762354003, -0.246495727242802, 0.220428635877593, -0.103219493481903, 0.0349131389634355, -0.121655788733428, 0.151792179115675, -0.0871793205263413, -0.0164552242707864, -0.00492616592994071, -0.00514129646939612, -0.0210508054013364, -0.00318431349806126, -0.00243126567889118, -0.00354041384624233, -0.0177795380457136, -0.0875743328428924, 0.191612435862306, -0.223629290575917, 0.195819938431223, 0.18340167254765, -0.15995899772086, 0.079852709360443, -0.0627187368589134, 0.0218860330331137, 0.022439867358159, 0.00366524434684607, 0.00373089742608197, 0.0162853332138362, 0.00146285721496159, 0.00446348462723385, 0.00457643479011282, 0.100800793821525, -0.294038759305838, 1.02865870250385, 0.0402311973122855, -0.351775278729851, 0.125860165397375, 0.0195063478381803, -0.0569005669447602, 0.199059686904237, 0.0198557520467495, -0.173615581371305, 0.0866701764653483, -0.0299334554728398, 0.261733439364735, -0.0913332599904382, -0.0358110939767411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0241754756606099, 0.0076985118385556, 0.0163965439250798, -0.0116539403654934, -0.0318063021955915, 0.0112436886986539, 0.00289018334287376, 0.00239490987846143, -0.0489992445746999, 0.26707988439606, -0.160437252917034, 0.0658643173647256, -0.00331321111484862, -0.0316540782798455, 0.0739736637383712, -0.0591471639811746, -0.0533456433751076, 0.0225203407828076, 0.00770119898836356, 0.0134325104780701, -0.00360710415218119, -0.00266909142798158, -0.00355083307641792, -0.0120625997765332, -0.0992018341832286, 0.148164197799285, -0.0843456371815979, -0.0185830554278952, 0.106637314753757, -0.176833383630821, 0.123463292225494, 0.100887065451003, -0.049982351679369, -0.018106131365599, 0.008991724232053, 0.00848823481059494, 0.0251793692370994, -0.00484271172850366, -0.0101935082532449, -0.00369260335515135, 0.247288544676479, -0.471191240681805, 0.598104697243667, -0.133183258819302, 0.565852843131988, -0.101553215623277, 0.0167210568633936, -0.0318608188635708, 0.0404424016727428, 0.0157847653325303, -0.067064392482707, 0.046823685194556, -0.0531762439644619, 0.225928762376926, -0.11193160198611, 0.0638592703693537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0299005753431566, -0.000692705759853974, 0.0123418011338163, 0.0118223838397411, -0.0399845505836984, 0.042201300145902, -0.0119330872043853, -0.00292413044299199, 0.00436230428657852, -0.0132065134800388, 0.346278038065548, -0.0804188321427706, 0.000123346670198339, 0.000224276439037207, 0.0207966526318344, -0.03109314934069, -0.105804882736616, 0.125936349182971, -0.0430093491732364, -0.0164007895111114, -0.0029916940953505, -0.00213868376258185, -0.00258304136084903, -0.00634120372040331, -0.082276953770366, 0.0620609909795397, 0.000808339326836378, 0.00069182371110268, -0.00123018051608063, -0.082360499023947, 0.108110410393763, 0.137130787640277, -0.129964235452737, 0.0508991465589974, 0.0117309116645632, 0.0102295585373872, 0.0220482695108044, -0.0170322841176123, -0.0265051855745517, 0.0103804813719167, 0.32262111230204, -0.296844513069609, -0.00689980563393291, -0.468418363737865, 0.769135723398207, 0.285481857011572, 0.00912229806172777, -0.00839344984860779, -0.000195095984610598, 0.00795480220857998, -0.0130616624471412, 0.0171453755662003, -0.0436329501586937, 0.0716446307025768, -0.0679004315061574, 0.11305467747162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0274659679169435, -0.0063064816626328, 0.00763236993753089, -0.029594124780159, -0.0344990911194156, 0.0601371945948343, -0.0484704728084979, 0.0146274102792545, 0.0395383094710884, -0.109983778158356, 0.203317202134924, 0.402280019603825, 0.000460484759394886, 0.000476087623059398, 0.00109193877884002, -0.011050090579167, -0.130480475709523, 0.243240342500803, -0.217371432971372, 0.0820418520171364, -0.00151964692640008, -0.00105291633395826, -0.00116741866689607, -0.00225357922813278, -0.0417930162395377, 0.00441662708652159, 0.00213506992707128, 0.00258275537263015, -0.00355544628755458, -0.00598583280785781, 0.0534650123740614, 0.0161051023871781, -0.10559117951605, 0.115942502867309, 0.00786323208030515, 0.00639960141743347, 0.0109037695623234, -0.0172183619845823, -0.021534492149777, 0.0236455632872447, 0.216252986347211, -0.0268441585068069, -0.0199416979909375, -0.473535838844076, 0.0903298944614691, 0.650295403023376, 0.00251860045911436, -0.000312641740036514, -0.000232251912742863, 0.00204979821318793, -0.000391011706139562, 0.00349248740788516, -0.0153079960375442, 0.00292009506579962, -0.0191452543972817, 0.0515110081076789, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0152327680704992, 0.0287678230747217, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630085, -0.0503948504088266, 0.0367434731025107, -0.179978494886956, 0.485949924576904, -0.766229854663151, 1.01051141642987, -0.000673485269869078, -0.000520749400288628, -0.000669087236009751, -0.00183577670380733, -0.0864392103719313, 0.204225002221373, -0.260674168295515, 0.206085870657986, -0.000323458282952733, -0.000218849807464032, -0.000227625898028226, -0.000374392247516084, -0.0088956829625518, -0.00332750776727578, -0.00269364658708953, -0.00377742729515847, 0.00469595144355348, 0.00448735510346721, 0.010913540761404, -0.0156696993884497, -0.0283431930980595, 0.046768073991902, 0.00197351752822271, 0.0015266144386367, 0.00222573096474376, -0.00533088841509641, -0.00578037173244154, 0.00953798155162805, 0.0542752718892435, 0.0232114501770188, 0.0263385347137, -0.146608993334404, -0.0878878170391831, 0.262311600776787, 0.000203099798998027, 8.68579870972955e-05, 9.85596371984366e-05, 0.000157107844851124, 9.41815724235634e-05, 0.000229055736824614, -0.0014167482678104, -0.000849299280487711, -0.00153620391228646, 0.0053643745480042, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0170982512251827, -0.0251141783214144, 0.0160091858217584, 0.0195251039488212, -0.00316207558373212, -0.00241577235429526, -0.00353354291864157, -0.0181912548602127, 0.0293790293907046, -0.114578371119061, 0.148172383047726, -0.0869289168370505, 0.163589384055956, -0.204331219412854, 0.180652919655244, -0.0841378732334325, -0.00335839069175079, -0.00254526063085197, -0.00367028490867594, -0.0177284701790033, -0.0187003136617071, -0.00453904348042368, -0.00447483985261495, -0.0171592587463129, -0.089361510440975, 0.190336131394752, -0.212238483655012, 0.159427677701374, 0.189862433322843, -0.0548926656233986, 0.0191290770071509, -0.171395695833932, 0.0195319060365617, 0.0873642936180386, 0.00421763175802385, 0.00135971169586803, 0.0039012250884114, 0.0042455349835919, 0.00398337890666903, 0.0178172618556883, 0.0201544183268214, -0.0570169166961804, 0.185032341811612, 0.02028775696638, -0.167035397269227, 0.0851417500342235, 0.112224567947569, -0.317483677185368, 1.03030384104418, 0.0361797962355779, -0.297879486990314, 0.103805482586356, -0.033617888495698, 0.276786505750101, -0.0315420290818586, -0.0984861631531851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.021438292355929, -0.00383082689433894, 0.0205403356838656, 0.0197079603842468, -0.0201247738104084, -0.00584323645333999, -0.00577935460978632, -0.0189575391547738, 0.0135858929586521, -0.128120058977521, 0.160325430484325, -0.0905906908173126, 0.0132794918987443, -0.130660138804077, 0.16531129124443, -0.0939995744532918, -0.020902712375065, -0.00602728243276224, -0.00589038572642261, -0.0184752602365971, -0.0204312959399309, -0.00614677799527313, -0.00607356716536522, -0.0191704752937163, -0.097633200088908, 0.170518145142877, -0.133170339698605, 0.0129416622398116, 0.481495556956455, -0.240406207919515, 0.104937381919501, -0.230416174847411, 0.0396909506048683, 0.0994771630117897, 0.0226514859192028, 0.00883256817957534, 0.0214011552624065, 0.00846553253191301, 0.0080946577937207, 0.0202875864800226, 0.108242622668801, -0.245024815275157, 0.469246332285472, 0.0404534804829547, -0.224554398029832, 0.096946468591543, 0.105801439419834, -0.239498799183869, 0.458663474463193, 0.0412555021999971, -0.229006363638902, 0.099961346469127, -0.152030613093807, 0.843911139358477, -0.145370156280727, -0.139329327795019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0272195064369148, 0.0115162223864431, 0.0267098865309274, -0.0116539403654933, -0.0579732173172457, 0.0239119304978305, 0.00786274267358264, 0.0120967981262487, -0.0568368116107849, 0.109442245504126, -0.114072987754541, 0.05780588345289, -0.0194120182105406, -0.0352876028153137, 0.111856327157735, -0.0946171790250351, -0.0588573409883913, 0.0241488423712535, 0.00787093469350963, 0.0117890561421182, -0.0201021088746967, -0.00778634204845795, -0.0077179870839254, -0.0192964308978001, -0.0960601434065918, 0.112964564404558, -0.0353243681982647, -0.0189181773662323, 0.220716232256439, -0.3420507329146, 0.23044406538496, 0.36232170122116, -0.119340321283624, -0.0802654736153622, 0.0487018653261888, 0.023601196336078, 0.0469972581018544, -0.0249998751193361, -0.0243385216796766, -0.0163695132433428, 0.232727232578612, -0.342407108105343, 0.215101221529171, -0.119464659358852, 0.353104253921159, -0.0782235236836697, 0.0794855508053783, -0.116945564495709, 0.0734655711869929, 0.0385191424984336, -0.113851854988648, 0.0767034880809726, -0.240928805691317, 0.712118434341345, -0.234555210079492, 0.248455666275406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.030261652038557, -0.00801784374588164, 0.0302516266319404, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163357, -0.0147699151361858, 0.0450891617645782, -0.110330824686385, 0.228755234415405, -0.0705796677815746, 0.00643968899227103, 0.00649089001066517, 0.0403972016220276, -0.0722518641953718, -0.105632026424746, 0.123383715498899, -0.0408731176137133, -0.0143941691791135, -0.0150864946514279, -0.00725880667245114, -0.00721801875870324, -0.0147352005106212, -0.0720924778963434, 0.0401671985659732, 0.00641766861494239, 0.00627586360252869, -0.0519109273670001, -0.188485078243954, 0.278998016488917, 0.457575033785654, -0.395146024404499, 0.225638708936902, 0.0580523449520109, 0.033677798854235, 0.0568994552709831, -0.0817577714486643, -0.080586929699566, 0.0460172433773117, 0.277409530310443, -0.186358845866078, -0.0505903157787712, -0.39068852421984, 0.44593434611638, 0.219898470630842, 0.0396199669450188, -0.0266159973122155, -0.007225370507819, 0.02298465769968, -0.0262348332920278, 0.0388331348008337, -0.183819922143654, 0.209813218721953, -0.181187462435566, 0.439859006441802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0258677865545686, -0.000295237250846821, 0.0261981528295216, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693797, 0.00176428765404594, -0.0045625870305456, 0.007244604484628, 0.353061458146974, 0.000103788161142729, 8.2183803989889e-05, 0.000147945230318328, -0.0347719661720229, -0.121961990153499, 0.2250337245264, -0.197896745384656, 0.072004112783863, -0.00717468642842212, -0.00405343007898595, -0.00404133581581977, -0.00709146953368324, -0.0342850300686168, 0.000145593936763986, 8.06363412488768e-05, 0.000101147795129573, -0.000745002803480253, -0.000887527786823468, 0.178424152469219, 0.00289858008214597, -0.385626002220497, 0.513979475619877, 0.0367446701898158, 0.0242440923895321, 0.0363882052297267, -0.0791788655558166, -0.0786453959092752, 0.104822079207859, 0.175588457403319, -0.000870816268069403, -0.000726049966660603, -0.378364938100431, 0.00282484033908918, 0.500903861562423, 0.010329383119558, -5.12277116192705e-05, -4.27115106567879e-05, 0.00681531545619436, -5.08825635931397e-05, 0.0102291763923664, -0.0617813836177235, 0.000461254537812612, -0.0613651299539457, 0.200412591091128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0137109026229981, 0.0299453386201052, 0.014002682081672, 0.192230415140458, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.184439512927778, 0.487299390017091, -0.741538613135988, 0.886876346755306, -0.00348612303332102, -0.00245735051523462, -0.00294386828509739, -0.00715988564968109, -0.0775772130015773, 0.182572154863325, -0.231653156327064, 0.180871468758637, -0.00146630027813769, -0.000920673795231455, -0.000919650531979276, -0.00146020247167451, -0.00700687753076346, -0.00287885247894113, -0.00240040868105144, -0.00339743622479534, 0.023785331250659, 0.0204361518344429, 0.0435460183840247, -0.0765978577452829, -0.117058944746748, 0.207325437623335, 0.00891143980381008, 0.00638415719932314, 0.00888086860420226, -0.0239288085613584, -0.0238732528442567, 0.0422823954558634, 0.0425842975405795, 0.0199626044256028, 0.0231802335251374, -0.114346449732259, -0.0746492117914777, 0.202051088091407, 0.000804893149832258, 0.000377316628029637, 0.000438133590394714, 0.000576625608242609, 0.000376440608823958, 0.000802131918236959, -0.00558130841108468, -0.00364366602223518, -0.00556835024016874, 0.0208710379051665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0254129579368256, 0.0107425993815029, -0.0100835618309506, 0.0195251039488213, 0.00276855422334109, 0.00354739278284642, 0.0184970121822559, -0.0413981115341341, -0.00527925397357761, -0.0289195606742802, 0.0792937759693207, -0.0676531927685028, -0.0668972246841806, 0.26996967643304, -0.141961339914384, 0.057331901500994, -0.00476624355041205, -0.00338273614995218, -0.00435470127501941, -0.0137973375736296, -0.0603965005827015, 0.0315784943674161, 0.00779631465864195, 0.0116923912438847, -0.0987005432142834, 0.135372028365772, -0.0635582267339032, -0.0222957897716068, 0.109055095339958, 0.15377203670886, -0.0218610650020317, -0.208732280105511, -0.0795719254745866, 0.154730479224276, 0.012756231586569, -0.00844494131011607, -0.00445839259329864, 0.0114632796231683, -0.016228069544527, 0.0315560665716392, 0.0208463565738802, -0.0362021324157862, 0.0363463430762807, 0.0187334020168054, -0.0695671764823022, 0.051569228055887, 0.264159179791141, -0.458743261526414, 0.460570658542209, -0.174879920823443, 0.649423009457742, -0.0923254899097836, -0.0706432910926393, 0.26233645625731, 0.10000665415058, -0.135750409459011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0277849136316369, 0.0106226666604083, -0.0118196797021563, 0.0197079603842469, 0.0153251463175157, 0.00682473684164888, 0.0170656692030985, -0.0431419561966856, -0.0217181624512596, -0.0244158730639444, 0.0837575252759867, -0.0705030005191933, -0.0483096864799014, 0.0735262174169141, -0.100868692067401, 0.0557087659591239, -0.0260190574047764, -0.00708763218492721, -0.00629024608249962, -0.0143785334928047, -0.0578765587810756, 0.0213437702446784, 0.00757530613557626, 0.0113613654920689, -0.0945824300406853, 0.104754249861408, -0.0271010761760102, -0.0161008564820601, 0.208816727025424, 0.370860928123472, -0.0953864536822708, -0.273937984971186, -0.0912135817420512, 0.176183523808719, 0.0606169663210656, -0.0278519033674181, -0.0194533184251788, 0.020572925610385, -0.0186022939508753, 0.035931246603815, 0.0990608304482569, -0.13669587008386, 0.0695953213086702, 0.0336204732668515, -0.0912992093798989, 0.0587191894223526, 0.220350026027013, -0.304065071880222, 0.154807210805021, -0.101245047457608, 0.27493940115423, -0.0707151723594293, -0.28753905994854, 0.780836385935845, 0.259996376636918, -0.19204741754843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0300547935497051, -0.00262086915298644, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690784, -0.00648860340814756, 0.027528864934527, 0.00953046266998923, -0.00904585198043033, -0.055682659374989, 0.0449879363356469, 0.00740752011267512, -0.00240693191785884, -0.0250468724285162, 0.0248177503627264, -0.0629779646757729, 0.0247338267998053, 0.00750215134912612, 0.0091749364510831, -0.0489494116020336, 0.00658120841508747, 0.00337457711054299, 0.00506138536202266, -0.0799936001014609, 0.0564773593641097, 0.00278290510283725, 0.00246880960967894, -0.0415161074774566, 0.137785921551927, -0.082270730541784, 0.402484695490358, 0.0766458066681739, -0.14215779334252, 0.113516362413503, -0.0185639631595192, -0.0167784696518064, -0.0542269556656967, 0.0156313105845955, -0.0289919659842308, 0.185509533264767, -0.159308678962164, -0.0138366637603084, -0.0886182134630824, 0.134141800340848, -0.0473789501690622, 0.144186661900358, -0.123822135860404, -0.0107545004524867, -0.0235796481027299, 0.0356926225918725, -0.0213117429016785, -0.406714954274355, 0.615646310841458, 0.117238515266376, 0.342463929443952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0291131058185439, -0.0112132650061805, 0.00962857943557119, 0.0118223838397412, -0.0386200930353358, 0.054930104531135, -0.0255353246076024, -0.0336121174078453, 0.0538868521712186, -0.101042221662701, 0.0849937731483471, -0.054929246143886, 0.017514325572848, 0.00367186688349747, 0.00664416170108387, -0.0205131183769429, -0.099479430940483, 0.112846675863041, -0.0356794946677948, -0.0112023885451423, -0.0323328431907144, -0.00410083987857572, -0.0027891494071217, -0.00418348946077063, -0.0528386438915604, 0.0136495564365597, 0.00513055372915027, 0.00583724844800687, -0.108188894132857, -0.0432583250009817, 0.0961165087027932, 0.386897800957664, -0.189958312030145, 0.399627629543894, 0.120828272253816, 0.0181593912005347, 0.0196022074155314, -0.162415639580524, -0.0387405065266477, 0.0815009178862217, 0.197458726781111, -0.0604431390604203, -0.0360576518771371, -0.265421203189447, 0.128946934255838, 0.133189585327345, 0.0641781118900006, -0.0196452524780154, -0.0117194719847802, 0.00964538694945479, -0.0046859220811979, 0.0104117408727183, -0.284194329656931, 0.138067294932718, -0.067788005584599, 0.606288622857957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0224445447174007, 0.0122972972658715, 0.0280757815135755, -0.0295941247801589, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.0683914171489396, 0.159071760349638, -0.206289585296184, 0.274773179699455, -0.00915583372768258, -0.00430258606699983, -0.00537660975155976, -0.0312130576026595, -0.104568501634171, 0.189850631265637, -0.162829463999104, 0.0560378329736126, -0.0139990053434681, -0.00513509550091901, -0.00424389085237516, -0.0063656580691273, -0.0228773094223896, -0.00349760168066449, -0.00231316749585587, -0.00305149496021576, 0.0591095569907135, 0.0379494934220754, 0.177224025148592, -0.187830363035946, -0.45066283116216, 0.910306571261337, 0.070546693415936, 0.0299544723214318, 0.0361434486839316, -0.148259144018291, -0.091909146619416, 0.185649879114551, 0.115288086146479, 0.0204025052145787, 0.0197002829695776, -0.242286521734026, -0.0626008972232345, 0.303390821313913, 0.01543407918045, 0.00273136532565339, 0.00263735601303504, 0.00655338578226152, 0.00169323422072104, 0.00790739894148344, -0.0900313728410428, -0.0232618994971414, -0.055812453940607, 0.276242777973244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0111030516956889, 0.0299283676160424, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.179896704701628, 0.459596310372119, -0.662594871472996, 0.69021930367927, -0.0077380195685299, -0.00465882113210355, -0.00499260080123185, -0.0101883216251351, -0.0625327818570341, 0.146258539859399, -0.18384166808212, 0.140764808621599, -0.00268976516544214, -0.00148258887390985, -0.00138523266460827, -0.00207782821502181, -0.00439564015111296, -0.00206072672104523, -0.00179668352082431, -0.00257895986512159, 0.0510514100330865, 0.0367063907025691, 0.0643230528044014, -0.155757438084702, -0.183128903994627, 0.367193083012778, 0.0162462241769458, 0.0101844496336549, 0.0131181816702357, -0.0432160109691648, -0.0373477023700645, 0.0748861467390755, 0.026549736093565, 0.0141558916760697, 0.0170146296952578, -0.0706240215419468, -0.0519114972451429, 0.122379662580786, 0.00114200189365339, 0.00060889701665881, 0.00073186186345949, 0.000715899315482776, 0.000526214799611699, 0.000922121235404187, -0.00784483208536721, -0.00576626720338063, -0.00677958116209455, 0.0287680203061015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0302500012368685, -0.00674620730936921, 0.0100401662714875, 0.0195251039488213, -0.00508376488671081, -0.0317222402070976, 0.0822967853898158, -0.068632037336036, 0.00197276041282772, 0.00282759490804166, 0.0246420043988713, -0.0450325661822802, 0.0414434833137067, -0.117441550053526, 0.394513248650746, -0.0700756553903237, -0.00538804273701284, -0.00355870072593596, -0.00406902438226463, -0.00918403835795031, -0.113191271384467, 0.147807356790048, -0.0651442148090804, -0.0142913798085191, -0.0742698835373354, 0.0442577376376679, 0.00580669741102566, 0.00554578525152302, -0.0176773769273056, 0.212615825443168, 0.130126061606394, -0.107540712446678, -0.235656571469202, 0.170749967708241, 0.0222480575010767, -0.0351083038449267, 0.0265381887482211, 0.0177577186477451, -0.0480603077984885, 0.0348231154916577, 0.014597951055117, -0.0105124273528511, -0.00236550908394889, 0.0116516377961438, -0.0143906266881723, 0.022849012122038, 0.306671776781994, -0.220843648702357, -0.049694294153309, -0.483940043727634, 0.597701424519648, 0.365807823698724, -0.0728429636639771, 0.0899663991696789, 0.197145552539168, -0.0997158754837052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0300983577029972, -0.0108682780791434, 0.0110939404354584, 0.019707960384247, -0.0231802053744834, -0.0276298646655859, 0.0870824133797186, -0.0715230777133199, 0.0148432501155473, 0.0072131036535009, 0.0237118389394892, -0.0469295077882569, 0.054737695342548, -0.110840703140009, 0.115608731683716, -0.0560885983076512, -0.0269350059128873, -0.00688995031957114, -0.00551966637194145, -0.00957090470710668, -0.0993286602484076, 0.105874942979701, -0.026911520030389, -0.0114388293177888, -0.0651740009484616, 0.028828893208499, 0.00702557127231335, 0.0073247584242674, -0.102273132930751, 0.535746834338048, 0.257050201911992, -0.128570110450796, -0.309816855637989, 0.194424079547109, 0.0976912073872443, -0.12471170173331, 0.052423370782887, 0.0299286831739652, -0.0631847155811974, 0.0396512647545377, 0.0640995944875302, -0.0339579907193823, -0.0136857422900743, 0.0196375549684062, -0.0172046885375794, 0.0260169779825592, 0.236381119183878, -0.125227435768644, -0.0504691348713494, -0.301761974485488, 0.264377148370073, 0.126847598555409, -0.278436906801433, 0.243941787386094, 0.587829296106843, -0.141069013725581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0286160770881659, -0.0100304424671004, -0.00170955493305569, -0.0116539403654932, 0.00630079692715651, -0.00613847546289083, -0.0581932607657202, 0.0456388471838218, 0.0278670398224956, -0.0165823879066061, -0.0112119814106074, 0.0299457000850141, 0.035908399951192, -0.0395715317875214, -0.00282231830132856, 0.00532721841410365, -0.0578628584901559, 0.0216383431733444, 0.00606898946781382, 0.00610719045242126, -0.0745598627704423, 0.0516368564971356, 0.00152770678244087, 0.00108644437579392, -0.0489220790330341, 0.0099487718600078, 0.00412692477588729, 0.00480510466139435, -0.126171301109485, 0.248821960746169, -0.0306460030495002, 0.134356329875995, 0.457560220603032, -0.15687561199579, 0.164640818162663, -0.134686083023702, -0.0062500117445058, -0.0727264094623, 0.0933158150499539, -0.0319935495606554, 0.108028244942132, -0.0259497034408982, -0.016883690387748, -0.0477190678644039, 0.0179789750546525, -0.0209924066648647, 0.139201057956504, -0.0334377937414927, -0.0217556766329358, -0.113874830422633, 0.0429042901956703, -0.00528428039161087, -0.36308262200192, 0.136797588383316, 0.465874103411457, 0.251557919288668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0243807773710823, 0.0053786384813686, -0.0114222456646251, 0.0118223838397411, 0.0552995939385818, -0.104936601954282, 0.0910163993406656, -0.0557239934719332, -0.0220790357715199, 0.0324894082074788, -0.0161003738189842, -0.036563018108865, -0.0118969892080666, 0.00420827497900543, 0.00240439388633085, 0.0195514382990291, -0.0812967864767637, 0.0892023530796899, -0.0267723918023988, -0.00745674051607505, -0.0438056716503963, 0.0115541664574628, 0.0039981292295367, 0.00398736235826661, -0.0287428711768687, -0.00204387781190556, -0.00123786029074254, -0.00159200294020161, 0.0576723909467993, -0.0292076635307711, -0.122223005070746, -0.121504250912766, 0.450686934679817, 0.441001702974337, 0.15834431170101, -0.048567755039104, -0.0249264224083985, -0.202042477253413, 0.0919140623426248, 0.0899388353673564, 0.103896823889261, 0.00859140789289637, 0.00771746652451489, -0.132569155480525, -0.0162591661904653, 0.0590129145694339, 0.0559833955320348, 0.00462936371142379, 0.00415845224881605, -0.0171713641699439, -0.00210601072884699, -0.00881285693118489, -0.235325313207766, -0.0288618673204912, 0.107055238101477, 0.445351148958011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0168888172596303, 0.0265225731168815, 0.0116134748343782, -0.0295941247801589, -0.0648165501864931, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.136406455745617, 0.28376541171853, -0.302860847075892, 0.182899592666262, -0.0302745418665178, -0.00502674905678505, -0.00409850995120597, -0.00943905186116196, -0.0776057232015649, 0.138298675897828, -0.115271030719205, 0.0373009361247863, -0.0172240947344063, -0.00244988539799092, -0.00155992255535724, -0.00192502052858162, -0.011301503148731, -0.0037406076302286, -0.00292119558198603, -0.00405120647096807, 0.174811675791853, 0.0364890940310539, 0.0612509238451516, -0.457170278774761, -0.196463287614661, 1.00455203413528, 0.0851979215757076, 0.0138880133222231, 0.0124916450858426, -0.174002317425164, -0.040067145231711, 0.204870501421384, 0.0559021878246978, 0.0212049137663456, 0.0233925320915249, -0.114170745608983, -0.0611765225010689, 0.134424749317637, 0.012407133639517, 0.00470629521224732, 0.0051918231310798, 0.00202247231023239, 0.00108370863424536, 0.00181912313224371, -0.0703340806951784, -0.0376873641955271, -0.0161956798487158, 0.202914971390713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00773818110957645, 0.0260124381207849, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435897, -0.667777779660335, 0.700205786033841, -0.152061844875105, 0.373986514224841, -0.50782563534139, 0.459436505525797, -0.0108435935745078, -0.00531054391871699, -0.00498843785959971, -0.00844635187532107, -0.0433476663950504, 0.100657728235379, -0.125149498779012, 0.0936984686307276, -0.00309114016851025, -0.00142932235848221, -0.00122935995028929, -0.00172256715936882, -0.00202823607778979, -0.00108695820213274, -0.000995259096535743, -0.00145104215453635, 0.0688705436214522, 0.0394086713457847, 0.0558182505772274, -0.197907251068728, -0.170757133079534, 0.405209157119218, 0.0185363701620084, 0.0097119466274219, 0.0113836940204539, -0.0487726328729606, -0.0348245768128825, 0.0826392266190666, 0.0121625460717833, 0.00738565375592528, 0.00921595422346878, -0.0320019178067208, -0.0264830807255855, 0.054223312995279, 0.000867316232694188, 0.000526674049477645, 0.000657193539132755, 0.000454421706483315, 0.000376055172972232, 0.000532642719457486, -0.00589323248953554, -0.00487692496111111, -0.00420787879224338, 0.0211316366719473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.02488002151319, 0.00349338776214516, -0.0283386095943202, 0.0195251039488213, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.000737780502525345, -0.000621569734380246, -0.0010901898447988, -0.02354706714562, -0.0213408121217801, 0.0567285276972922, -0.0929049606346427, 0.521879511054613, -0.00422947460640359, -0.00262076359232679, -0.00270891496297749, -0.00480223949501907, -0.122340482894466, 0.239188061792397, -0.230851203759359, 0.106433229417867, -0.0304844426488357, -0.00144195494716542, -0.000849780857684029, -0.00108449112971467, 0.00535047517400638, -0.0206694422318363, 0.362180965134431, 0.00655089853965141, -0.270767634055307, 0.122934171541447, 0.0225595452321249, -0.0513596430982683, 0.0738639646439447, 0.0162777402116466, -0.0552209333838469, 0.0250714592272948, 0.00562132130380532, 0.000309623694825012, 0.000271898877739928, 0.00405603955611858, 0.000332901640170793, 0.00624723266456587, 0.162600612797479, 0.00895607985992322, 0.0078648633924414, -0.37018075297663, -0.0303827855030737, 0.532383334467842, -0.0349144074259301, -0.00286561887202139, 0.118444338190402, -0.0375393217377866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.02330143749075, 0.00932686977392249, -0.0195929661997853, 0.0197079603842469, 0.0976637162240659, -0.196492083346238, 0.196789453010075, -0.0984800038037925, -0.00968427887924579, -0.00305739080499712, -0.0035142006522027, -0.0245389584623718, -0.0491729940243788, 0.106169413017208, -0.121847957868655, 0.123566481166194, -0.0200092686815674, -0.00483826550316691, -0.0035480317529966, -0.00500452794251936, -0.101599268420436, 0.16801117071883, -0.123020984383692, 0.0252004138115013, -0.025316207669363, -0.00300028765102184, -0.00191419023133728, -0.00249885878459769, 0.0596887115499926, -0.1794288585119, 0.955860192068402, 0.0262363368356127, -0.366088874082172, 0.139978727185895, 0.094456303573869, -0.18115621457333, 0.194940182472839, 0.0264889132374164, -0.0746609519959459, 0.0285475625477053, 0.0235363446423737, 0.00323502747564213, 0.00303324343285014, 0.00660042969678809, 0.00133327046843737, 0.00711339789299568, 0.119508385589292, 0.0164262087773374, 0.0154016280466346, -0.229203196864413, -0.0462984786883526, 0.246643004355891, -0.128858614879586, -0.02602912139285, 0.363197492232308, -0.0531072416281617, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0202336576842804, 0.0190977808372876, 0.0107306055922188, -0.0116539403654934, -0.0616020791184593, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0433432647799653, 0.0190435548721712, 0.00697704744749566, 0.0156582995463821, -0.0769004177114557, 0.111019355037725, -0.0569446628060186, -0.0272339425429254, -0.0395959199906361, 0.0141639916635124, 0.00370744537983271, 0.00319338727160606, -0.0702518096504056, 0.0825726724762279, -0.0302591072534664, -0.00555414878956784, -0.0175051398490237, -0.00405247587043015, -0.00289524874373822, -0.00390790286721689, 0.19950941508979, -0.378262163481966, 0.519567159982301, -0.115119607905565, 0.584484870331949, -0.112945107132979, 0.148388770431382, -0.200999967524954, 0.105961643569101, -0.061171958721712, 0.119201100977507, -0.0230342679574023, 0.0369750785261229, 0.00986461372661264, 0.0101386109265573, -0.0152426492298347, -0.00585011446225236, -0.0057396113199179, 0.0656018645113007, 0.0175019791423129, 0.017988110014882, -0.0888609872432723, -0.0341047634675222, 0.0468450635759484, -0.159689304474723, -0.0612886051163678, 0.31117429138268, 0.0947022088715303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0156059973161051, 0.0283483789400613, -0.00366448453027264, 0.011822383839741, 0.0220838867907565, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.102213293977142, 0.124878367918978, -0.0445130476343746, -0.0191184272948392, -0.0758343923526161, 0.0532647951908287, 0.00388900865659855, 0.00408265242310401, -0.0508705214556544, 0.0541344006325357, -0.0155002588937238, -0.0038990531631878, -0.0377420092156793, 0.0230901301043674, 0.00135422408082176, 0.000832624912028898, -0.00940444314233829, -0.00342928295650861, -0.0027546652140804, -0.00385372990326808, 0.305221577224944, -0.265912605385222, -0.0373890997493766, -0.462535110161497, 0.776025214555274, 0.317506232833687, 0.13231264484422, -0.0925956420784959, -0.00762521338174617, -0.161063201374778, 0.158264250550675, 0.0647529036970642, 0.0329692767107085, 0.0137520514519178, 0.0155106605694833, -0.0401332560488802, -0.0235049735356556, 0.0161349385942962, 0.0244606642480472, 0.0102029630870852, 0.0115077156161064, -0.0171181742635491, -0.0100256563422972, -0.00140967467297025, -0.0980917344976773, -0.0574497025764963, 0.0963870996787592, 0.167658158602434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00987675823579537, 0.0290142634016863, -0.00428139506100089, -0.0295941247801589, 0.0263560489909357, -0.0712908034861191, 0.124137438646549, 0.383808683073226, -0.139268112846256, 0.263309019711057, -0.240581629561091, 0.0956363217673716, -0.0425594697223882, 0.00291910365758022, 0.00153171149747929, 0.00200693308424856, -0.0448012227061958, 0.0784639261814975, -0.0636937172730273, 0.0195042770596191, -0.0136909752155194, 0.000869868924945262, 0.000405518905339503, 0.000409298247693979, -0.0034114770425107, -0.00168582891470664, -0.0014977638098847, -0.00216277464680899, 0.223346204549639, -0.0181400485021903, -0.0150679586141472, -0.500033591404991, 0.0642906130875653, 0.723243311516806, 0.0665553353467775, -0.00480255754658115, -0.00307299187277439, -0.132383333906543, 0.0131115658446462, 0.147499795774797, 0.0165840632254413, 0.00930748316716322, 0.011349941900401, -0.0329868908038961, -0.0254105603546715, 0.0367535664289514, 0.00506798665030002, 0.00284430900906867, 0.00346847170388685, -0.000365700171241691, -0.000281707249352727, -0.000233998998075246, -0.0279804196188499, -0.0215539605020873, 0.00277124849002818, 0.0763899465305748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00422403562884665, 0.0171539738450264, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0977269276576106, 0.232125215917279, -0.298701660335599, 0.240234638216595, -0.0095955325792422, -0.00374749699368048, -0.00309987463794571, -0.00445871865745573, -0.0235420783828846, 0.054296528623331, -0.0668187951761428, 0.0489939685728515, -0.00231153056297284, -0.000876578948905824, -0.000693434004590907, -0.000909320668327838, -0.000575980404939055, -0.000344874274678806, -0.000329816258202486, -0.000487622959599417, 0.0588574919775218, 0.0263542534751365, 0.0308349249253134, -0.160282676136513, -0.101513754490212, 0.291736816703684, 0.0137673862153513, 0.00589537889744926, 0.00628854087800163, -0.0358548234884833, -0.0207029333243835, 0.0594974335725771, 0.00343051691130147, 0.00231943115192538, 0.00299100276046881, -0.00893419973878685, -0.00814519801425941, 0.014825395965297, 0.000336832821567229, 0.000227738431127686, 0.000293678161388757, 0.000144236318875347, 0.000131498445572652, 0.000153855418475581, -0.00226534884361098, -0.0020652901705885, -0.00130803505644983, 0.00795527596810677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0106036055567763, 0.0296266593660007, 0.259211232824318, 0.0195251039488213, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.00517932982837462, -0.00333411005738314, -0.00365885144162158, -0.00745436569613299, -0.18053159698292, 0.469230738890094, -0.692276345467663, 0.744232604758411, -0.00174302461810584, -0.00103224751682528, -0.000995395188471927, -0.00152025936541933, -0.0607551610563963, 0.145274827975367, -0.188334660306985, 0.151780397361144, -0.00397712490619136, -0.0019061204268898, -0.00167493200389358, -0.00241016220156645, 0.0345842460403174, -0.106971053214143, 0.25456426498465, 0.0264935041720338, -0.132179922471373, 0.0468967101986917, 0.010707355630727, -0.0291016110858971, 0.051916383461673, 0.00720759150771042, -0.0269570575484026, 0.00956421589618274, 0.000700919724644604, 0.000381836111040625, 0.000461712209768727, 0.000471819861893912, 0.000353697875660922, 0.000626088065400451, 0.0244313765371237, 0.0133093441036106, 0.016093518918104, -0.0664022418603691, -0.0497781754902043, 0.118459567099648, -0.00489411984295713, -0.00366885739980179, 0.0183044599731069, -0.00453346276486149, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00958841840105442, 0.0287142087112329, 0.00525730855264603, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0252758904406234, -0.00632110314145195, -0.00488566882918307, -0.00776837170631515, -0.154654198992136, 0.341911353913745, -0.398704725867905, 0.277425364104441, -0.00799167084001756, -0.001856310970787, -0.00128014616296236, -0.00158429842618409, -0.0488981962979721, 0.100408707642264, -0.104468874747729, 0.0565787251628152, -0.0032009500260229, -0.00160037367631408, -0.00142790422348552, -0.00206468956655627, 0.148706520787247, -0.388563452590705, 0.71220317547873, 0.0439538129017002, -0.180523018821064, 0.0533988371215841, 0.0436704701359281, -0.101811651647421, 0.145248246697174, 0.0115168069922353, -0.036816252545652, 0.0108902736390701, 0.00285873514978317, 0.00162273463193134, 0.00198528590849269, 0.000753907637346287, 0.000586799320677924, 0.000712893814650208, 0.0174915853413358, 0.00992893703459021, 0.0121472595661699, -0.0407792081924058, -0.0317402430744735, 0.0581771181962355, -0.017735983614867, -0.0138046925395086, 0.0566973513015152, -0.00641353363141411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00787931986789135, 0.026266017636219, -0.0132573892568218, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0524224823609091, 0.019258610236164, 0.00525321344488666, 0.00495699486804389, -0.112078045039237, 0.179511848166741, -0.123767382336513, 0.0182909049745176, -0.0150561962143104, 0.00521607980877912, 0.00130030386482798, 0.00101094018990614, -0.0321897964657496, 0.048619714256478, -0.030635573307692, 0.00373028648217898, -0.00210719285445275, -0.00112365340857579, -0.00102691121281125, -0.00149628249178218, 0.24312868685045, -0.455369321869514, 0.474805099586671, -0.10444762263269, 0.295845278163647, -0.0430860995861488, 0.0658499558828106, -0.112715482697028, 0.0968327727428123, -0.0258534416707464, 0.0603353220350696, -0.00878707177583357, 0.00431063789576671, 0.00260497492156458, 0.00324585602164089, -0.00169240546797412, -0.0013944135891988, -0.000575215033661109, 0.00921604331712921, 0.00556937564641009, 0.00693956449600757, -0.015775117190597, -0.0129974986479508, 0.0135522494457503, -0.021365628879823, -0.0176036557524691, 0.0498619145320433, 0.0114367792968678, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.005699287450078, 0.0214698480958179, 0.00832487477036378, 0.0118223838397411, -0.0614326220634956, 0.26203544501963, 0.518569562880659, -0.0924570392473858, -0.0709478783134301, 0.076903345269954, -0.0226501029881942, -0.00605237789102634, -0.0634299145349295, 0.0567537957659614, -0.0084464240470514, -0.00359533878904298, -0.0182709161061168, 0.0190137982809252, -0.00526293094004145, -0.00123433495846102, -0.0163348457295084, 0.0140319672776629, -0.00196259356847501, -0.000733241121875035, -0.001069303753953, -0.000612888851788037, -0.000575990819905128, -0.000846812331002241, 0.226500485285503, -0.234109161969773, 0.0505207745986584, -0.283611242802992, 0.425056183742284, 0.121121715799415, 0.0560006137916715, -0.0543971191883832, 0.0103033153809034, -0.0658993199929187, 0.0866868718955926, 0.0247018231068582, 0.00366588503758718, 0.00237595963988629, 0.00302386350863129, -0.0043138693452171, -0.00378631280488643, 0.001617018771713, 0.00327743098393695, 0.00212419201925493, 0.00270344101158933, -0.00318358660367839, -0.00279425586598723, 0.000603000624105221, -0.0127054746021768, -0.0111516824754391, 0.0167133416449521, 0.0202473562137974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00339108928439731, 0.0143344773818663, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414865, 0.462498877065499, -0.0655314248951062, 0.115979237022268, -0.0956568846043593, 0.0302758773259639, -0.0241318165707196, 0.0052631083958121, 0.00187632953336971, 0.0017272294306981, -0.015235372634663, 0.026343125984304, -0.0209745648569957, 0.00617452750875351, -0.0056103955986722, 0.00119544438383642, 0.000411420418442218, 0.000352254883283672, -0.000367264997427229, -0.000225042499060368, -0.000217247209950826, -0.000322168490867422, 0.118546565081049, -0.0295236807499634, -0.0146962544553073, -0.239579049519496, 0.0833104971211984, 0.275901578528231, 0.0269262600713356, -0.00647362037001869, -0.0029971857275332, -0.0525321970635785, 0.016990521883296, 0.0562679610565785, 0.00176263378613842, 0.00121865954262175, 0.00158263957699846, -0.00343883722280963, -0.00319846707772573, 0.00368338599466484, 0.000649086377665672, 0.000448768946986919, 0.000582803868995866, -0.00015605356203308, -0.000145145625740818, -7.2250376469691e-05, -0.00351495966953588, -0.00326926866673902, 0.00113684563986326, 0.00922528597146994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00138044771170169, 0.00638882353038111, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0357169332052307, 0.082715527617015, -0.102424732574839, 0.0760518002123166, -0.00422595518496749, -0.0013547840177805, -0.00101686811553745, -0.0013033246104207, -0.00766460049150903, 0.0175880306956037, -0.0214801029408928, 0.0155101676309956, -0.000906860003955772, -0.000288071461032006, -0.000213253491123779, -0.000265802822928669, -5.9364430041068e-05, -3.83065599433049e-05, -3.77810915961584e-05, -5.64180322033814e-05, 0.0252733238596133, 0.0091681554575778, 0.00933834822750593, -0.066229225128466, -0.0326033938848818, 0.111291244539186, 0.00537393653439483, 0.00192270868623531, 0.00190448281304146, -0.0138893267054969, -0.00664920623945957, 0.0226969756645593, 0.000351786028768911, 0.000255673905629774, 0.000337408026586029, -0.00090921637290052, -0.000884184141232383, 0.0014857784201566, 4.16226103098303e-05, 3.02508185953789e-05, 3.99214342172122e-05, 1.48919053797034e-05, 1.44819065756759e-05, 1.47507410000144e-05, -0.00027780660430704, -0.000270158128669245, -0.000132993732949987, 0.0009607245340639, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0224419087355455, 0.310703073843137, 0.0208770933958504, 0.0195251039488213, -0.00350519620228986, -0.00213578148775586, -0.00215103292273889, -0.00360148326124412, 0.354215091736513, -0.393270742690669, 0.286443388274844, -0.115220749339439, 0.390484209646641, -0.426933671469901, 0.308757369600584, -0.123622648285321, -0.0037844525075111, -0.00231961445844546, -0.00235756395016134, -0.00402640927558312, -0.00417195365419277, -0.00251816728181541, -0.00254121852244856, -0.00432001510649606, -0.13347157028838, 0.33533302108994, -0.467925628811811, 0.436556032512804, 0.129016952515557, -0.0645985164753277, 0.0224161618429519, -0.0655979383537513, 0.0157596925360571, 0.0229255170425749, 0.000760975979021739, 0.000531676205177792, 0.000783336703543932, 0.000539901917789506, 0.000550725217214338, 0.000801136210248134, 0.0243455865742153, -0.0708009310625635, 0.144239197195842, 0.0172728564941386, -0.0733376023953637, 0.025630416073592, 0.0268384022973471, -0.0780504452045672, 0.159008269921432, 0.0187513670337179, -0.079615105952797, 0.0276270291882517, -0.00566655757523464, 0.024059236904103, -0.00578015385508159, -0.00586958024656284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0208311675729531, 0.0168212127674997, 0.019287579585398, 0.0197079603842469, -0.0163810014243472, -0.00390242657177244, -0.00279689872237219, -0.00375319132544437, 0.762426252400217, -0.486472830393036, 0.315036567668793, -0.120074282056387, 0.147540025395148, -0.240094368128955, 0.21694135572351, -0.101414897218028, -0.0177608566866902, -0.00425338581439355, -0.00307308040887649, -0.00419601682685217, -0.00343697142949098, -0.00209922099594037, -0.00211619316158206, -0.00354396135402686, -0.109957591036383, 0.236451671291947, -0.263802651514286, 0.164947740605517, 0.361953254691465, -0.228613371439198, 0.0928919182149797, -0.0896376076996027, 0.0254598197962892, 0.0261040901440182, 0.00316467178184311, 0.00223004992142923, 0.00324612435929931, 0.000874386037654317, 0.000889697864058712, 0.000912212004253402, 0.101246022171265, -0.251187955916101, 0.404658813134064, 0.0279738671992904, -0.10021362558217, 0.0291840175456562, 0.0195925056820642, -0.0486083437947557, 0.0783070774100662, 0.0138062550459613, -0.0494595496579402, 0.0200967791728537, -0.0208135617171245, 0.0745625360302079, -0.0211780387674474, -0.00830375195874445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.017839608305958, -0.0155588635177619, 0.0163965439250798, -0.0116539403654934, -0.0318063021955914, 0.0112436886986538, 0.00289018334287377, 0.00239490987846142, 0.161426388204999, 0.609621358264413, -0.233929227326291, 0.076619351189609, 0.0109152642713775, -0.0722517992667376, 0.107859002109445, -0.0688053487876893, -0.0347130258988219, 0.0123225323775475, 0.00318776431988758, 0.00267747665318691, -0.0023472113547107, -0.0014604559432355, -0.00146979957328503, -0.00240441497001847, -0.0750933522468875, 0.118208186061103, -0.0796910370126105, 0.0122031169159269, 0.243404271380665, -0.257835982891349, 0.143623705893241, 0.147100706594461, -0.0581440074053681, -0.0210626951480255, 0.00492003269613198, 0.00351354277547276, 0.00501895556935238, -0.00200454808179236, -0.00203185252724577, -0.000736039572724698, 0.157404550542626, -0.284383462616917, 0.272122663056646, -0.0641306693151908, 0.164456588164784, -0.023547806545544, 0.0106433172778929, -0.0192293260314469, 0.0184002802424233, 0.00760071179165149, -0.0194912534396818, 0.0108573133203488, -0.0256055314109388, 0.0656627847324156, -0.0259543106904594, 0.0148074655791841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0135427001430303, 0.00894872042728923, 0.0123418011338163, 0.0118223838397411, -0.0399845505836983, 0.0422013001459019, -0.0119330872043851, -0.00292413044299211, -0.0670830605102295, 0.297174981210494, 0.535772970512815, -0.0935504836114051, -0.00189681223432852, -0.00504670264847026, 0.032177277021455, -0.0361703730372399, -0.0439702312640466, 0.0465429183672365, -0.0132189650130179, -0.00326913804247676, -0.00124328365422671, -0.000790403917701118, -0.000793900257330035, -0.00126398002385333, -0.0397758545272403, 0.0354876359854277, -0.00559052193272502, -0.00212061026536665, 0.0276817096582155, -0.127430920717603, 0.125763840462251, 0.212173344440879, -0.151186193020126, 0.059210506409102, 0.00433545094422054, 0.00314406469764711, 0.0043948394423159, -0.00523488897578156, -0.00528322800716246, 0.00206912152181282, 0.13870227078189, -0.141162538552778, 0.0309477746936239, -0.167477615955912, 0.237206911741455, 0.0661965404040852, 0.00392188671994374, -0.00399145221042687, 0.000875066182395582, 0.0028441483349687, -0.00402830933090306, 0.00397561007306054, -0.015600461116402, 0.0220957122063315, -0.0157445159727613, 0.0262147255291867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00844321113047151, -0.0109738205691143, 0.00763236993753087, -0.029594124780159, -0.0344990911194155, 0.0601371945948342, -0.0484704728084979, 0.0146274102792544, 0.0736287355315529, -0.227812559637076, 0.539364215954557, 0.46796862598466, 0.000857520491375143, 0.000986133972089327, 0.00289671851242861, -0.0128544681648157, -0.0382116443014458, 0.0667196416010179, -0.0539112807906318, 0.0163532456363013, -0.000445033691819308, -0.000288809823713089, -0.000289536829614038, -0.000449201642484057, -0.0142377769749929, 0.00321378511702105, 0.00109682745775005, 0.000958696239860519, -0.007364498046737, -0.0158793451087473, 0.0621953543792271, 0.0427239595603112, -0.122833242483405, 0.134874841195124, 0.00215684627323624, 0.00158719434401893, 0.0021734275571577, -0.00427040450999794, -0.00429242918242228, 0.00471322495943037, 0.0690030817265088, -0.0176618007484959, -0.00823340859708788, -0.136621267387051, 0.0477648053829506, 0.150788237023003, 0.000803647599287571, -0.000205698983515808, -9.58907759979505e-05, 0.000591393526743218, -0.000206759878969865, 0.000809825837014503, -0.00441655656921467, 0.00154409316372154, -0.00443933502297762, 0.0119441934599614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00356846422868555, 0.0261188035535262, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630085, -0.0503948504088265, 0.0367434731025107, -0.166915283235762, 0.464278848231276, -0.769187724303446, 1.17551858417977, -0.000624602315103913, -0.000497526431336783, -0.000671670106945992, -0.00213554205983534, -0.0198704873172244, 0.0457735732543994, -0.0562285998280994, 0.0410787029080855, -7.4355997485169e-05, -4.90514755036109e-05, -4.90999381118689e-05, -7.46268914880465e-05, -0.00237884036290431, -0.00074868349663016, -0.000555120501094694, -0.000698296888437269, 0.00448653414127223, 0.00450467759663949, 0.0126956210248063, -0.0157301889762824, -0.0329713743754392, 0.0544048679014512, 0.000442330508822652, 0.00032929765508909, 0.000443650701341412, -0.00114989679790922, -0.00115219045506158, 0.001901187642079, 0.0141512951707223, 0.00502614278802633, 0.00501588411531288, -0.0367881678484816, -0.0175861372125044, 0.0608239019496669, 5.29545980090087e-05, 1.88079866667813e-05, 1.87695983851926e-05, 3.9422614092417e-05, 1.88455022700749e-05, 5.31126478445338e-05, -0.000355500518010057, -0.000169942708606756, -0.000356209621911054, 0.00124387251864966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0206121464512044, 0.00186778322923232, 0.0160091858217584, 0.0195251039488212, -0.00316207558373207, -0.00241577235429528, -0.00353354291864161, -0.0181912548602126, 0.132011178619608, -0.227738706732715, 0.212018681376458, -0.101123604922342, 0.735069464402223, -0.406133611428701, 0.258494822208368, -0.0978768097135354, -0.00345830596482646, -0.00210523271754555, -0.00211720616941654, -0.00353378209371144, -0.0192566655330659, -0.0037543278379912, -0.00258131419735604, -0.00342032226620991, -0.107046130267054, 0.22526615807223, -0.243344599888121, 0.142792530306416, 0.377375106660751, -0.0785454775264239, 0.0222526783512815, -0.245248734459552, 0.0227212856352967, 0.101630074704722, 0.00348848218525236, 0.000784350551183495, 0.000777623744280587, 0.00244903953872512, 0.000793999307934268, 0.00355148076900435, 0.0193921693138193, -0.0470623884943941, 0.0733078286670003, 0.0136139979708023, -0.0476413305733009, 0.0197423729662323, 0.107980185164328, -0.262054509821076, 0.408195327988219, 0.0242782715384184, -0.0849602859197405, 0.0240700543779735, -0.022559116146823, 0.0789442096360898, -0.00731385603414916, -0.0228366290826987, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0190287287217083, -0.029511852567589, 0.0205403356838656, 0.0197079603842468, -0.0201247738104083, -0.00584323645334003, -0.00577935460978643, -0.0189575391547736, 0.228014045330251, -0.271715104548499, 0.231653750460452, -0.105383312724627, 0.222871671150234, -0.27710206784794, 0.238857806241638, -0.109348835528473, -0.016151178736553, -0.0038444737534587, -0.00275184717215812, -0.00368263832928268, -0.0157869230855836, -0.00392069343601961, -0.00283742515434069, -0.00382121421853466, -0.0877581335269883, 0.157153073341714, -0.131942507994804, 0.0432944250827255, 1.02114857456486, -0.347362233990544, 0.122072685786528, -0.332927664119839, 0.0461721157239616, 0.115720863634552, 0.0144481437637406, 0.00412636436673912, 0.00426585139537855, 0.00395489410044148, 0.00161349267462809, 0.00404388585725967, 0.0803159756186611, -0.16539697697435, 0.198365455024693, 0.0219849126185116, -0.0646735932737133, 0.0224796100611511, 0.0785046187846286, -0.161666798236395, 0.193891742045087, 0.0224207806119903, -0.0659557975662854, 0.0231786894608936, -0.0826227979472465, 0.243053648758977, -0.0337079263968619, -0.0323072000911189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0161577642134769, 0.00567780449458311, 0.0267098865309274, -0.0116539403654934, -0.0579732173172456, 0.0239119304978305, 0.00786274267358258, 0.0120967981262489, -0.0380248596464323, 0.301987998765445, -0.169129303002115, 0.0672450495550815, -0.0129869928834947, -0.0973703756382157, 0.165842790839071, -0.110067289214354, -0.0313276643913112, 0.0110671468330954, 0.00284192495165227, 0.00234989003992698, -0.0106996359300071, -0.00356839426992876, -0.00278670080802753, -0.00384632070848103, -0.0594783463215327, 0.076756935940108, -0.0351937372957312, -0.00252281677407682, 0.609030388285102, -0.507138483772254, 0.268073449809222, 0.537193055045898, -0.138827491931281, -0.0933720830549347, 0.0223195251484257, 0.00852158369598157, 0.0093678736775922, -0.00902659870223843, -0.00485135103201975, -0.00326290380377054, 0.124072300702037, -0.183301116519789, 0.118308533258758, -0.0501780777616424, 0.104353614600789, -0.0181381986942386, 0.0423755958927613, -0.0626045781079556, 0.0404070414401214, 0.0161789816165831, -0.0336468690624244, 0.0177857381237389, -0.10119598893832, 0.210453801737449, -0.0543878465817414, 0.0576110360335698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0121457494920628, 0.000689573107347394, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163356, -0.0147699151361859, -0.0044336067745949, 0.0139910499734398, 0.368517130449206, -0.0821046747156994, -0.000633213118741905, -0.000823109650176448, 0.0650785581277397, -0.084049925337174, -0.0393358416198604, 0.0414974536399692, -0.0117258358154833, -0.00286916224498864, -0.00561799280287571, -0.00244134318822852, -0.00207073274119965, -0.00293713936881893, -0.0312299337797293, 0.0217631516226339, -0.000233473059959214, -0.000123006202579583, 0.00658282380308211, -0.30364323834803, 0.324555812036961, 0.737138272909101, -0.459669715353957, 0.262483423099521, 0.0195246551264624, 0.00966161533660865, 0.0113416597229392, -0.0234549811860999, -0.0160632387501085, 0.00917252921469248, 0.108535861128071, -0.0861276695976379, 0.00127876086944744, -0.13038420214274, 0.143194411238385, 0.0509892927988104, 0.0155012238600135, -0.0123008586572026, 0.000182634184634218, 0.00767065339756531, -0.00842429281329393, 0.00900449227761789, -0.0613460913255663, 0.0673733265593311, -0.0420131188138639, 0.101992977055791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00750148626092455, -0.00713114387718277, 0.0261981528295216, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693796, 0.0450881185414647, -0.127068618871476, 0.241702073048266, 0.410713128680599, 0.00265240926107746, 0.0022888292095453, 0.00493590353226538, -0.0404499066305403, -0.0339007738939036, 0.0590785907491447, -0.0475981981984885, 0.0143524422502374, -0.00199428872932818, -0.00106415577163248, -0.000972023581156298, -0.00141352907516585, -0.0110860777398483, 0.00127523875639668, 0.000540144332047328, 0.000515249575909766, -0.0207484211610254, -0.0296106304241303, 0.207559166263658, 0.0967054607656752, -0.448595161601129, 0.597907570023055, 0.00964665779284885, 0.00583119804449805, 0.00725319143528776, -0.0190441299503534, -0.0156762365286428, 0.0208939848046817, 0.053624932362346, -0.00698785830119775, -0.004030530039573, -0.105864663432387, 0.0187857312892309, 0.116147845812617, 0.00315460639795224, -0.000411076369401528, -0.000237104930297444, 0.0019068920090158, -0.000338378829323386, 0.00237190585575581, -0.0172861296713006, 0.00306743134590183, -0.0142291329716047, 0.0464709748021351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0031468891813879, 0.02849036321081, 0.014002682081672, 0.192230415140458, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.178725093630067, 0.48438729810939, -0.768528380851087, 1.03169505116885, -0.00337811380894402, -0.00244266543518651, -0.00305101620671756, -0.00832902875213214, -0.0175130233754289, 0.0403122421171731, -0.0494632043101812, 0.0360527643450898, -0.000331016674263275, -0.000203286338884036, -0.000196366252368118, -0.000291059369223448, -0.0018400929264185, -0.000658791463301656, -0.000509478771102228, -0.000656222903823666, 0.0236431905624578, 0.0211799660893331, 0.0506566804146617, -0.079385788611454, -0.136173587707136, 0.241179763965931, 0.00196766105572164, 0.00136316239720354, 0.00177020657356523, -0.00510934349238298, -0.00475860988386843, 0.00842806911326764, 0.0109380568162508, 0.00441760993533459, 0.0045928598158754, -0.0284023964650358, -0.015421260404848, 0.0468509037896223, 0.000206742097729245, 8.34980070348783e-05, 8.68104352410148e-05, 0.000143227438854058, 7.77662418170637e-05, 0.000185995560245967, -0.00138633542761056, -0.000752719569419944, -0.00129116969293944, 0.00483950370236205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0172198053622792, -0.00652877742132636, -0.0100835618309506, 0.0195251039488213, 0.00276855422334113, 0.00354739278284644, 0.0184970121822559, -0.041398111534134, 0.00480559727387798, -0.069622949057168, 0.116257872529598, -0.0787003334009248, 0.0608951799214981, 0.649943657200637, -0.208138951111156, 0.066693670734456, -0.00286607158261692, -0.0017259633548569, -0.00170726307853483, -0.00275019694120757, -0.0363180547067533, 0.0161122007935748, 0.00305654953686391, 0.00233062201042269, -0.0690428357230216, 0.10126879776982, -0.0599894079180593, 0.00404544389461584, 0.262546773541793, 0.225455398280341, -0.0254307747166693, -0.306036262199291, -0.0925652849176253, 0.179996535328407, 0.00650857391428473, -0.00331084397955423, -0.000888682878661194, 0.00449418520894249, -0.00323471010148803, 0.00629001046750746, 0.012373195733733, -0.0208093974068783, 0.017441745692269, 0.00854372002011954, -0.0203308788978238, 0.0119576932991248, 0.156789663691808, -0.26369084359981, 0.221016906233311, -0.0797572741627937, 0.189792675603336, -0.0214081135912333, -0.0322182004023546, 0.0766673450374752, 0.0231891952485372, -0.0314773329510056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0157648753004525, 0.0085857473144991, -0.0118196797021563, 0.0197079603842469, 0.0153251463175157, 0.00682473684164889, 0.0170656692030985, -0.0431419561966855, -0.0231797827124803, -0.0726756131892203, 0.124780298683106, -0.0820154883984919, -0.0515609015277078, 0.218856107347193, -0.150272175335546, 0.064805492171514, -0.0132859312546027, -0.00313228338759667, -0.00220943154814883, -0.00286604561350583, -0.0295531067577093, 0.00943259119854738, 0.00266080533945964, 0.00226463927967864, -0.0561822573222246, 0.0689689653012084, -0.0283345225038206, -0.00342534063541732, 0.621558100379749, 0.552501249632886, -0.110962179307842, -0.408107372713323, -0.106107915976052, 0.204952663667211, 0.0267888501632135, -0.00978290406589532, -0.00387759279960783, 0.00722618325024846, -0.00370795971687447, 0.00716210674532254, 0.0509272370439879, -0.0715303734534462, 0.0412919121935718, 0.013737414822459, -0.0271117596075607, 0.0136156014808826, 0.113282090987397, -0.159111523503951, 0.0918493604928062, -0.0413689957486712, 0.0816446385611455, -0.0163971882951674, -0.117489224878566, 0.231873293669398, 0.0602870558259817, -0.0445312874461568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0132117409898729, 0.00728244989005011, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690785, -0.00648860340814749, 0.0275288649345271, -0.0311859124881199, 0.0417262619381519, -0.0868398367617213, 0.0523340502310096, -0.0242391457778127, 0.0111025773900739, -0.0390618253060839, 0.0288702594494081, -0.0254704298617909, 0.00892944871598939, 0.0022664447988171, 0.00182882255572065, -0.0197968060956585, 0.00237595918769113, 0.0010194799310855, 0.00100887627534099, -0.0376349350795189, 0.0317985080969105, -0.0038780885802943, -0.00161027694513688, 0.191503462471457, 0.214883898684752, -0.0957047798901591, 0.627694611711972, 0.0891613579747631, -0.165370846131076, 0.0409818725101211, -0.00560828431610147, -0.00334442030343146, -0.0163822876805229, 0.00311575927800657, -0.00577891319567485, 0.0779090376449023, -0.0750581386916099, 0.0127221319331291, -0.031143727444279, 0.0416995784872788, -0.0109860662320212, 0.0605545379377077, -0.0583386862978682, 0.00988823433174026, -0.00828676301457332, 0.0110954774231797, -0.00494169284465326, -0.142934721751187, 0.19138099827276, 0.0271848592901335, 0.0794093452371638, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0097804054637408, -0.0111121414793537, 0.0096285794355712, 0.0118223838397412, -0.0386200930353357, 0.0549301045311349, -0.0255353246076023, -0.0336121174078454, 0.058257246828833, -0.126131012729571, 0.160899807538945, -0.0638986839804835, 0.0189347929379129, 0.00458359170060369, 0.0125779136442869, -0.0238627208753059, -0.031549598271448, 0.0331063769654701, -0.00927948168620265, -0.00223295070854474, -0.0102542626550712, -0.00120308329737549, -0.000725398750302834, -0.000833886962407655, -0.0194939783441422, 0.00758070923223656, 0.00166566730191932, 0.00125789336011899, -0.135052204499447, -0.0818913657941359, 0.111811445560696, 0.732427557989168, -0.220976747397641, 0.464883125160773, 0.0354479766349183, 0.00472287345005669, 0.00390727055762867, -0.0422408716007064, -0.00772207115915239, 0.0162454222693437, 0.0673887642738485, -0.0297591450597261, -0.00897191069721797, -0.0803024716569528, 0.0486572926877854, 0.0308835379551545, 0.0219027222761859, -0.00967232885842977, -0.00291605389125938, 0.00291818589781626, -0.00176820242786567, 0.00241423827269638, -0.0859822306134807, 0.0520988018747556, -0.0157184470409667, 0.140584097846636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00595231255869356, 0.00476412582200827, 0.0280757815135755, -0.0295941247801589, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.0275920932079782, 0.0681032668396043, -0.0986835027874703, 0.319641098476688, -0.00369386434939339, -0.0018420627670003, -0.00257202845525812, -0.0363098612093179, -0.0268382683375486, 0.0466279404547275, -0.0373939339722437, 0.01116991419638, -0.00359294678603257, -0.00126119637132629, -0.000974613380290534, -0.00126885446246881, -0.00683041084421045, -0.000410933730046629, -0.000227431231249795, -0.000245394151048609, 0.0253065278441703, 0.0181540378518073, 0.206163069251945, -0.0898530971770402, -0.524251903161903, 1.05895121462285, 0.017326500301564, 0.00687907171497722, 0.00720440458057795, -0.0340478467842405, -0.0183200746196731, 0.0370052357530367, 0.0329387331902804, 0.00224139766285627, 0.00168118623991436, -0.0647270320843951, -0.00596920255192204, 0.0703492087783396, 0.00440964052015386, 0.000300064908350677, 0.000225067154909153, 0.00175074209144607, 0.000161455481944332, 0.00183354017309713, -0.0240519510403536, -0.00221809903691534, -0.0129415977638842, 0.0640542148802875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00246776876963712, 0.030253888096142, 0.0249036082205117, 0.192230415140458, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.184397876468037, 0.480186648330888, -0.713797405978018, 0.802925731904299, -0.00793163153750709, -0.00486754060925035, -0.00537840791474991, -0.0118519803113755, -0.0137211579663084, 0.0315457931627568, -0.0386364416503132, 0.0280583803965702, -0.000590197519305335, -0.000319772383935716, -0.000291122581602542, -0.000414169528781443, -0.001122001459015, -0.000478814744853872, -0.00039451025885753, -0.000526921349425555, 0.0533385602171292, 0.0395429056190292, 0.0748264123822475, -0.167793715365594, -0.213032160197368, 0.427152317178935, 0.00350406908242321, 0.00214037926285364, 0.00261482209238943, -0.00908234190642572, -0.0074444461673235, 0.014926912572919, 0.00666144891220966, 0.00320492075650949, 0.00354343567185691, -0.0172660855678768, -0.011147024481341, 0.028376970654001, 0.00028653344219327, 0.000137855440825009, 0.000152416213593758, 0.00017502230217481, 0.000112994800092419, 0.000213818265916509, -0.00191789619302762, -0.00123819818524068, -0.00157202570775334, 0.00667062852425429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0124299526187294, 0.00254449201900172, 0.0100401662714875, 0.0195251039488213, -0.0050837648867108, -0.0317222402070975, 0.0822967853898158, -0.068632037336036, -0.000856872010173917, -0.00161605386869035, 0.0393067632837014, -0.0523859677188018, -0.0180010510271379, 0.0671213089149905, 0.62929291895221, -0.0815183617627339, -0.00204964204175484, -0.00121893362021505, -0.00118292063155331, -0.00183063682142871, -0.0430586021516735, 0.0506272851755823, -0.0189383076837496, -0.00284867343610887, -0.0328660874700562, 0.0241807101537083, -0.000964790796582367, -0.000480145834420369, 0.010103142175862, 0.339146109455535, 0.151374443887893, -0.171539508681194, -0.274137109924834, 0.198631858112276, 0.00762045121549467, -0.0102064605800896, 0.00528980646672292, 0.00516240990083366, -0.0095797693428562, 0.00694122508762253, 0.0058165942156578, -0.00487483111382472, 0.000269483244227626, 0.00394040230937945, -0.00457550953039686, 0.00529814948649643, 0.122194222750899, -0.102409791178522, 0.00566126746200244, -0.163660980479208, 0.190039573917172, 0.0848222462719284, -0.0246343550379297, 0.028604877726046, 0.0457134252619623, -0.0231217705022785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0112741294025222, -0.00481040329364083, 0.0110939404354584, 0.019707960384247, -0.0231802053744834, -0.0276298646655859, 0.0870824133797188, -0.0715230777133199, 0.007364576704243, 0.0043888235942606, 0.0397000546457262, -0.0545926623435965, 0.0271584695282764, -0.0674411898835213, 0.19356039727999, -0.0652473476293614, -0.00942285779415167, -0.00219692843858372, -0.0015236304910655, -0.0019077501517671, -0.0347488262460898, 0.0337592671031059, -0.00742856718436067, -0.00228007999607865, -0.0265233404201763, 0.0153905329075906, 0.00117997939276469, 0.000724403591411634, -0.0622282391086321, 0.896985621982871, 0.299024122342194, -0.215261263528709, -0.360407082565477, 0.22617173344477, 0.0311498025027813, -0.0344250066126225, 0.010449450352685, 0.00826141494223203, -0.0125944886537094, 0.00790361085687739, 0.0237762510293562, -0.015694037299372, -0.00165982695934198, 0.00630583373704132, -0.00574170912796163, 0.00603272639544615, 0.087680068388099, -0.0578751571051009, -0.00612097092715944, -0.0968990713114823, 0.0882304078161746, 0.0294129801131071, -0.0894091368997127, 0.0814105285467181, 0.136303813341331, -0.0327105924159356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00930958844834874, -0.0117698440494142, -0.00170955493305566, -0.0116539403654932, 0.00630079692715651, -0.00613847546289085, -0.0581932607657199, 0.0456388471838218, 0.0354164151936633, -0.0239832387341906, -0.0228191073912388, 0.0348355559312484, 0.0456362358439276, -0.0572326192875782, -0.00574410374506549, 0.00619710390792805, -0.0178289300066309, 0.00619513050775164, 0.0015513550519504, 0.00121733460618696, -0.0229736761944513, 0.0147838058786252, 0.000390512398713147, 0.000216558881969428, -0.0175355170299286, 0.00579711893708324, 0.00152574562586507, 0.00121726495336669, -0.182482550339249, 0.506413169593175, -0.0356502118925022, 0.273447788383993, 0.532275572502242, -0.182491948440469, 0.0471372205926181, -0.0344284557477545, -0.00124580290150385, -0.0185903243576053, 0.0186004631507443, -0.00637721311597537, 0.0359792454393944, -0.0135003025897689, -0.00486739559083189, -0.0141897599063138, 0.00729373058973944, -0.00486764626836995, 0.0463614773369987, -0.0173959727313477, -0.00627193949230227, -0.033861862257262, 0.0174054601488661, -0.00122530056414625, -0.107966384569833, 0.0554961977510378, 0.108025267288504, 0.0583303756759754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.006772694213495, -0.00224468746929322, -0.0114222456646251, 0.0118223838397411, 0.0552995939385818, -0.104936601954282, 0.0910163993406657, -0.0557239934719332, 0.00967279417619893, -0.0153043533659056, 0.00875331817503963, -0.0425334207826391, 0.00521205405512015, -0.00198233611792214, -0.00130720099680887, 0.0227440073355647, -0.0217460457985155, 0.0226775867458485, -0.00629687867371559, -0.00148633784230091, -0.0117175620738281, 0.00293737332109395, 0.000940361805028747, 0.000794793321730999, -0.00894386721375002, 0.000282495939903944, 0.000137145944197865, 0.000139022218178862, -0.0271669660730643, 0.0158793811192677, -0.142180891317948, 0.0660584269543619, 0.524279942561052, 0.513013202099966, 0.0402552930537987, -0.0114231579753206, -0.00496853616119729, -0.0475204821291959, 0.0183210544613899, 0.017927336241727, 0.0307263570233538, -0.00109859912110464, -0.000724630221544298, -0.0362717841321435, 0.00176199036837921, 0.0136837094467268, 0.0165564810752095, -0.000591965248075695, -0.000390457174614275, -0.00469819704416938, 0.000228226378675035, -0.0020434946235373, -0.0643865379587119, 0.00312773309752849, 0.0248235963876548, 0.103266475966666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00405256796561421, 0.0225257270787523, 0.0116134748343782, -0.0295941247801589, -0.0648165501864931, 0.151531129548399, -0.19835664154622, 0.278748753109168, -0.118755279768057, 0.25582760745598, -0.289712660115728, 0.212765404450057, -0.0263569760650686, -0.00453184613547794, -0.0039205801342064, -0.0109803617251884, -0.0182236775617254, 0.0315481269099228, -0.0251644118483797, 0.00743512434099136, -0.00404462887250146, -0.000558857812259257, -0.000340541187058181, -0.000383710664555113, -0.00308721416081536, -0.000816247856154048, -0.000574930295742555, -0.000703025187056354, 0.157600788983965, 0.0349049822683107, 0.0712526331790855, -0.437323011107129, -0.228543925328445, 1.16858608987676, 0.0194350005513994, 0.00303184316836373, 0.00248993575190873, -0.0379858317474897, -0.00798650751792686, 0.0408364456798987, 0.0148344905822273, 0.00442820236576468, 0.00420371911717649, -0.0289941058569008, -0.0116648090026958, 0.031169943486648, 0.00329242046313123, 0.000982811240003574, 0.000932988616355237, 0.00051361472628345, 0.000206635711155589, 0.000421811946945045, -0.0178616139374967, -0.0071860231210133, -0.00375539793211317, 0.0470512180454072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00165731029056246, 0.0278235382849625, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435897, -0.667777779660335, 0.700205786033841, -0.164115051478879, 0.408587395180543, -0.565496681950334, 0.534458237398517, -0.0117031127641392, -0.00580187045310395, -0.00555494811880194, -0.00982556301346905, -0.00920510912404767, 0.0211331468589323, -0.0258282524615989, 0.0186767367580081, -0.00065642017056997, -0.000300087035939776, -0.000253714313456994, -0.000343356021220818, -0.000501037229845096, -0.000254123794305433, -0.000224404254493925, -0.000312159597513698, 0.0752423816171071, 0.0438841037852113, 0.0649328546150947, -0.220382521134524, -0.198640193522426, 0.471376064563759, 0.00389172137830508, 0.00200434369960718, 0.00226908998258668, -0.0100656565735362, -0.00694151636999005, 0.0164723191745256, 0.00297050180073002, 0.00169734565320813, 0.00200695593001058, -0.00768298859828428, -0.00587830951327832, 0.0125731132868092, 0.000211827722239367, 0.000121038426398707, 0.000143116864357511, 0.000109097111329814, 8.34709799703366e-05, 0.000123507341827434, -0.00141484139474409, -0.00108250526785421, -0.000975708303855263, 0.00489993043831974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00700570982272351, -0.0039671958602816, -0.0283386095943202, 0.0195251039488213, 0.072406642464624, -0.168855440911289, 0.180838102102827, -0.0944993352356275, 0.000881675779233383, 0.000801959357219758, 0.00164117293051684, -0.0273920854159159, 0.0255030826818177, -0.073192066942304, 0.139859224732048, 0.607097608174252, -0.0011451130277536, -0.000673043912202327, -0.000641631662810817, -0.000957221224723153, -0.0331231875874071, 0.0614263985245276, -0.0546792511962833, 0.0212151322982277, -0.00960126525101329, 0.000557467377202795, 0.00025969276977946, 0.00025833083352456, -0.00690326988915853, 0.0311157999146772, 0.421321766809783, -0.00986172950072104, -0.314981484277462, 0.143008184695501, 0.00579356513688952, -0.0121650083715782, 0.0147231629685927, 0.00385553391728549, -0.0110070831616921, 0.00499744607324104, 0.00167935394144967, -0.000110401968427981, -6.99259570600312e-05, 0.00111758579171945, -9.98933671546159e-05, 0.00144858658908356, 0.0485764761033608, -0.00319345341606724, -0.00202265674810738, -0.101998203955027, 0.00911692338278997, 0.123447196538075, -0.00962018371015547, 0.000859882570604262, 0.0274644613171979, -0.00870448740305298, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00630096536900633, 0.00163104362451025, -0.0195929661997853, 0.019707960384247, 0.0976637162240658, -0.196492083346238, 0.196789453010076, -0.0984800038037925, -0.00176946150425536, -0.000595996850337843, -0.000775277112656268, -0.0285459434103637, -0.00898463593005298, 0.0206962864077091, -0.0268812006793822, 0.143743744633529, -0.00522532202805555, -0.00120559810201228, -0.00082298737020545, -0.000997542994527523, -0.0265321488636241, 0.0418649924033499, -0.0285354595072396, 0.00502315034416635, -0.00769075132780626, -0.000164932469374772, -8.65533292724698e-05, -9.10089387103999e-05, 0.0116355043739909, -0.0395842756636926, 1.11194332036726, 0.00578806775186339, -0.425867801143153, 0.162835958625975, 0.0235366042308363, -0.0420202768766602, 0.0388570541739812, 0.00614426323170619, -0.0148820249349653, 0.00569033110762516, 0.00682244665408593, 0.000165544232333922, 0.000117860635943874, 0.00178100917684923, 5.86296325622068e-05, 0.00164942997065817, 0.0346417252885989, 0.000840569096452961, 0.000598450377074105, -0.0618464275405142, -0.00203594308727178, 0.0571907222901656, -0.0347702174190692, -0.00114461233433264, 0.0842169716874305, -0.0123143225387024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00513339611045794, 0.0126104679035144, 0.0107306055922188, -0.0116539403654933, -0.0616020791184593, 0.199029865952139, -0.142163327346853, 0.062840050903269, -0.0295896009607119, 0.0136392839755111, 0.00544335694053324, 0.0182151550335337, -0.0524984143521608, 0.0795137525688743, -0.0444271201886016, -0.0316809934644759, -0.00976967983719939, 0.00336641557499323, 0.000832405683526462, 0.000636531784454445, -0.0173335456893191, 0.0196253949660861, -0.00679385676002965, -0.00110709786801738, -0.00502439475260485, -0.000751445762371075, -0.000465575059279341, -0.000531777248558145, 0.14289168101562, -0.295112794978876, 0.604407671559529, -0.0898140827333985, 0.679925843563978, -0.131387998461278, 0.0352681842662437, -0.045129057400687, 0.021121131991873, -0.0137344939427515, 0.0237601277454778, -0.00459137662910303, 0.0102230255215698, 0.00172796720790297, 0.00144740647712993, -0.00398115426194417, -0.000909762444963774, -0.0013308811166492, 0.0181378799422366, 0.00306579120779307, 0.00256801519808433, -0.0232091739926471, -0.0053036967391553, 0.0108622704650946, -0.0417084816104069, -0.00953110774137474, 0.0721540127553236, 0.0219592189204032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00367511242526296, 0.0253972624653879, -0.00366448453027264, 0.011822383839741, 0.0220838867907565, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.0936105122386031, 0.117950744221066, -0.0442674609131471, -0.0222402896394521, -0.0694517908308399, 0.0503099322824041, 0.0038675522761538, 0.00474931180199928, -0.0117484678910901, 0.0121800061564542, -0.00335222048188686, -0.000777190818574885, -0.00871645838744058, 0.00519517947069472, 0.000292876250127735, 0.000165965533133658, -0.00252659949488249, -0.000767316927102116, -0.000562698709719944, -0.000703504718975342, 0.288289419424248, -0.264445516332457, -0.0434943939143449, -0.459983218363609, 0.902742954379208, 0.369352063935649, 0.0297697731931803, -0.0200255369950426, -0.00151991921677797, -0.0348329254516799, 0.0315465107267412, 0.0129070725951022, 0.0086292265240464, 0.00295772910200286, 0.00292019780295714, -0.0100968590612786, -0.00465935234926424, 0.00374131346123163, 0.00640222151602364, 0.00219440720934272, 0.00216656187585748, -0.00430664765188605, -0.00198736941186287, -0.000326870461831474, -0.024678247314225, -0.0113881603082131, 0.0223499055425404, 0.0388759908814471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00216464827329596, 0.0300055156673333, -0.00428139506100089, -0.0295941247801589, 0.0263560489909357, -0.071290803486119, 0.124137438646549, 0.383808683073226, -0.145766077772663, 0.28016483684933, -0.262749987106195, 0.111252848540127, -0.0445452074184813, 0.00310597107865767, 0.0016728508196878, 0.00233464669412093, -0.00970937438415867, 0.0167516558155948, -0.0132940824930266, 0.00388775028686353, -0.00296712446719266, 0.000185712664972212, 8.46394591319322e-05, 8.15846378216349e-05, -0.000860066651710862, -0.000393080450660222, -0.000332623551692573, -0.000451216062994951, 0.237643788379266, -0.0198115605034006, -0.0175284168873226, -0.546109110383939, 0.0747886755596979, 0.841342254771773, 0.0142092312312003, -0.0010023845197802, -0.000612533599598935, -0.0276309035962141, 0.00261350337251372, 0.0294008525198299, 0.0041187641649441, 0.00212165260149822, 0.0024071881309329, -0.00800924228238475, -0.00553175564855245, 0.00852228919405466, 0.00125866873032927, 0.00064836384876305, 0.000735621731929458, -8.87922808970427e-05, -6.13263008017249e-05, -5.42588740761651e-05, -0.006793667254741, -0.00469219258024676, 0.000642587464437421, 0.0177130351991937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000873918129073805, 0.0191690324088708, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.109706187629544, 0.262185091653748, -0.340572586312385, 0.279462732628028, -0.0107717424744169, -0.00423279236974585, -0.0035344039316795, -0.00518678617406002, -0.00484906798185399, 0.0111175665009613, -0.0135601345036639, 0.00976587416141794, -0.000476116367454153, -0.000179485226862747, -0.000140724751873378, -0.000181253151723531, -0.00013800965025538, -8.05138366821649e-05, -7.56002252730922e-05, -0.000109111249280735, 0.0664794510482462, 0.0300484980775638, 0.035869982963235, -0.182750526031733, -0.118090011664295, 0.339374740501439, 0.00281896164772152, 0.00119640185951848, 0.00125348284008001, -0.00727633935672296, -0.00412667615030023, 0.0118595097748227, 0.000817119380216336, 0.000536684303255302, 0.000673396711126685, -0.00210915884939906, -0.00185115251774683, 0.00343766126960385, 8.02306572190289e-05, 5.2695524561666e-05, 6.61189319589345e-05, 3.40508738617515e-05, 2.98855446085947e-05, 3.56754594918345e-05, -0.000534796702578139, -0.000469376814716125, -0.000303302620946435, 0.00184464173156587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00234316248688237, 0.0302387678330058, 0.259211232824318, 0.0195251039488213, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.00535611326543865, -0.0035105538935546, -0.00396473437419393, -0.00867159466642665, -0.186693590381844, 0.494062814074891, -0.750151206494618, 0.865758905462841, -0.000380508993874052, -0.000221704125818051, -0.000208599314241205, -0.000303030395125681, -0.0132630858830491, 0.0312018466643447, -0.0394682247241075, 0.0302540966567137, -0.00100999427280207, -0.00044361843320117, -0.000369581508087718, -0.000496810721561389, 0.0364144726787384, -0.115913919569765, 0.296132254907867, 0.0287083824964372, -0.153763681235287, 0.0545545092110108, 0.00229970513974541, -0.00609865929245069, 0.0103483935384563, 0.00151045400183989, -0.00537329878448915, 0.00190641688386346, 0.000175124329341774, 8.67088960805661e-05, 9.69026328638935e-05, 0.000115022243288004, 7.63959394310051e-05, 0.000145175123742068, 0.00610416325940238, 0.00302233995531893, 0.00337765456969371, -0.016187819621396, -0.0107516916029517, 0.0274679925437241, -0.00119310925359794, -0.000792444136600511, 0.004244374535282, -0.00105120358339441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00209472514255065, 0.0298426277029343, 0.00525730855264604, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0265751876169885, -0.00675219580951233, -0.00535145363896163, -0.00903687495372651, -0.16260413707782, 0.365229353082628, -0.43671602204642, 0.32272636006408, -0.00172706393075801, -0.00039538981258839, -0.000266770877594406, -0.000315795178772782, -0.0105672909703007, 0.0213868154213817, -0.0217703682626923, 0.0112777292031761, -0.000804707400159164, -0.000373373839063418, -0.000317855761650176, -0.000432706224703623, 0.158848151032726, -0.425607910612667, 0.828499366632535, 0.0481442357685089, -0.210000758077653, 0.062118373320097, 0.00930170605810053, -0.0212166270111518, 0.0289520555433691, 0.00239999837307264, -0.00733851328906334, 0.00217073744055704, 0.000708332127892701, 0.000370402667393226, 0.000422711162026801, 0.000182761736816977, 0.000128116731068988, 0.000165303339060868, 0.00433403278578935, 0.00226636240431691, 0.00258641951000199, -0.00988566575807107, -0.00692989245680929, 0.0134899078897133, -0.0042995441471036, -0.00301399817492418, 0.0131467846872082, -0.00148714787906018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00169002122151263, 0.0280378223106106, -0.0132573892568218, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.05647387282709, 0.0210073440323396, 0.00584313287859412, 0.00576642628111639, -0.120739823396356, 0.195812008554932, -0.137666072131894, 0.0212776405782487, -0.00320141581284049, 0.0010962878257613, 0.000268548259483518, 0.000201508776833618, -0.00684455236573007, 0.010218632150079, -0.00632708254784994, 0.00074355087844799, -0.000521217969199499, -0.000262683898321933, -0.000231343120081778, -0.000321301008031602, 0.265205427918547, -0.506505871964672, 0.552336380720341, -0.116176763860625, 0.3441540757173, -0.0501216611310332, 0.0138399924095757, -0.0232788254452485, 0.0193014916091428, -0.00533944176444656, 0.0120265244814169, -0.00175151023094928, 0.00105392615206969, 0.000598414007520774, 0.000705738744092654, -0.000406602630006657, -0.000309158240323988, -0.000133378862024119, 0.00225326954047065, 0.00127939519584918, 0.00150885298032613, -0.00378999256368277, -0.00288170155665652, 0.00314244848128981, -0.00513312031819325, -0.00390294190896024, 0.0115618073754221, 0.00265192061850321, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00119584539165634, 0.0235888506057286, 0.00832487477036377, 0.0118223838397411, -0.0614326220634956, 0.26203544501963, 0.518569562880659, -0.0924570392473858, -0.078445661197035, 0.0857621692652034, -0.0255955981627664, -0.0070406752201933, -0.0701331978298506, 0.0632915073048822, -0.00954482528990439, -0.00418242435882037, -0.00381032346110927, 0.00393303420879113, -0.00107536568428409, -0.000246037629294052, -0.00340656404721273, 0.00290253459641708, -0.000401013389644834, -0.000146155552097579, -0.000259412493288322, -0.000143263535890606, -0.000131248572870752, -0.000186631606087691, 0.252592041211182, -0.264553500667241, 0.0587703498073264, -0.320492997714485, 0.494463927062683, 0.140899771694796, 0.0115838154219248, -0.0111148703955154, 0.00205374017223538, -0.0134650954278909, 0.0172791285751951, 0.0049237672114778, 0.00088211652525673, 0.000548608666298195, 0.000672173233147094, -0.00102537745625886, -0.000852864616959836, 0.000374948690527836, 0.000788643397617717, 0.000490475566622549, 0.000600946663166372, -0.000756716922147503, -0.000629404405193142, 0.000139821688128042, -0.00302000505476168, -0.00251190957878682, 0.00387543154955237, 0.00469488656026243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000696217557866203, 0.0161601125382385, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414865, 0.462498877065499, -0.0741443373095673, 0.131860036949593, -0.10956139003762, 0.0352196480617273, -0.0273035043961886, 0.00598377507353535, 0.00214906927708218, 0.00200927002101695, -0.00311691852162273, 0.00536405680022568, -0.00424076416664728, 0.00123075677299012, -0.00114779903153406, 0.00024341953875275, 8.31834643464844e-05, 7.02142929648289e-05, -8.74057861345234e-05, -5.24846012755424e-05, -4.99388244904002e-05, -7.26574152463981e-05, 0.134778903993248, -0.0338151876404042, -0.0170960168773585, -0.274403811056705, 0.0969143307348479, 0.320953754397271, 0.00548279610120567, -0.00130887565395628, -0.000597423305481997, -0.010621276790312, 0.00338668826964646, 0.0112157851875391, 0.000417519173892673, 0.000282211597182818, 0.000358660436103929, -0.000808818462208281, -0.000730216581573406, 0.000854090737576606, 0.000153750603397554, 0.000103923858031027, 0.000132075990550846, -3.67039769223235e-05, -3.31370434911392e-05, -1.67531660864196e-05, -0.000826722549057605, -0.000746380729286207, 0.000263607814241574, 0.0021391272354126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000278404956314926, 0.00734348804657583, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0411121542477164, 0.0953904978590447, -0.118457806464409, 0.0884703557588255, -0.0048643068096025, -0.00156238526998135, -0.00117604374843888, -0.00151614546442355, -0.00154360799326981, 0.00353550741513455, -0.00430576776528785, 0.00309161208448677, -0.000182636570872934, -5.79074942612368e-05, -4.27474677581422e-05, -5.29819689258156e-05, -1.39079164693419e-05, -8.90566876029673e-06, -8.73387187568311e-06, -1.29444174865358e-05, 0.0291460988640961, 0.0106032943169837, 0.0108632141195975, -0.076596428766101, -0.0379272265467486, 0.12946407540304, 0.00108025695398446, 0.000385414218266406, 0.000379616920949837, -0.002784167998387, -0.00132537357759276, 0.00452414480070609, 8.2262404564229e-05, 5.92733532529775e-05, 7.75607474139753e-05, -0.000212016551629821, -0.000203830924063689, 0.000344517134121619, 9.73312106864951e-06, 7.01310308720126e-06, 9.17683051875713e-06, 3.47258421632421e-06, 3.33851316913075e-06, 3.42035053575588e-06, -6.47806177059701e-05, -6.22795393426141e-05, -3.08381243869608e-05, 0.00022276946458917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1[216][168] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.310703073843138, 0.0224419087355453, 0.0208770933958505, 0.0195251039488213, -0.00350519620229, -0.00213578148775571, -0.00215103292273913, -0.0036014832612442, -0.00378445250751067, -0.00231961445844541, -0.00235756395016123, -0.00402640927558307, -0.00417195365419321, -0.00251816728181509, -0.0025412185224488, -0.00432001510649589, 0.354215091736513, -0.393270742690671, 0.286443388274845, -0.115220749339439, 0.390484209646641, -0.426933671469903, 0.308757369600584, -0.123622648285321, 0.436556032512802, -0.46792562881181, 0.33533302108994, -0.13347157028838, 0.000760975979021908, 0.000531676205177549, 0.00078333670354422, 0.000539901917789551, 0.000550725217213955, 0.00080113621024832, 0.129016952515557, -0.0645985164753272, 0.0224161618429521, -0.0655979383537513, 0.0157596925360572, 0.0229255170425747, 0.144239197195841, -0.0708009310625629, 0.0243455865742151, -0.0733376023953634, 0.0172728564941386, 0.0256304160735921, 0.159008269921432, -0.0780504452045668, 0.0268384022973468, -0.079615105952796, 0.0187513670337182, 0.0276270291882514, 0.024059236904103, -0.00566655757523474, -0.00578015385508189, -0.00586958024656259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0168212127675001, 0.020831167572953, 0.0192875795853981, 0.0197079603842469, -0.0163810014243474, -0.00390242657177237, -0.00279689872237255, -0.0037531913254447, -0.0177608566866899, -0.00425338581439311, -0.00307308040887605, -0.0041960168268522, -0.00343697142949135, -0.00209922099594009, -0.00211619316158224, -0.00354396135402676, 0.762426252400218, -0.486472830393037, 0.315036567668793, -0.120074282056387, 0.147540025395148, -0.240094368128956, 0.21694135572351, -0.101414897218028, 0.164947740605516, -0.263802651514285, 0.236451671291947, -0.109957591036382, 0.00316467178184343, 0.00223004992142895, 0.00324612435929974, 0.00087438603765475, 0.000889697864057945, 0.00091221200425376, 0.361953254691465, -0.228613371439197, 0.0928919182149802, -0.0896376076996032, 0.025459819796289, 0.0261040901440186, 0.404658813134062, -0.2511879559161, 0.101246022171265, -0.10021362558217, 0.0279738671992901, 0.0291840175456565, 0.0783070774100658, -0.0486083437947558, 0.0195925056820641, -0.0494595496579395, 0.0138062550459616, 0.0200967791728533, 0.0745625360302077, -0.0208135617171244, -0.0211780387674471, -0.00830375195874451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.015558863517762, 0.0178396083059577, 0.0163965439250798, -0.0116539403654933, -0.0318063021955915, 0.0112436886986537, 0.00289018334287354, 0.00239490987846127, -0.0347130258988211, 0.0123225323775475, 0.00318776431988775, 0.00267747665318649, -0.00234721135471109, -0.00146045594323524, -0.00146979957328526, -0.00240441497001848, 0.161426388205, 0.609621358264413, -0.233929227326291, 0.0766193511896088, 0.0109152642713775, -0.0722517992667384, 0.107859002109446, -0.0688053487876894, 0.0122031169159267, -0.0796910370126104, 0.118208186061103, -0.0750933522468871, 0.00492003269613248, 0.00351354277547258, 0.00501895556935278, -0.002004548081792, -0.00203185252724649, -0.000736039572724344, 0.243404271380666, -0.257835982891349, 0.143623705893242, 0.147100706594461, -0.0581440074053683, -0.0210626951480251, 0.272122663056645, -0.284383462616914, 0.157404550542625, 0.164456588164782, -0.0641306693151902, -0.0235478065455435, 0.0184002802424234, -0.0192293260314473, 0.0106433172778928, -0.0194912534396815, 0.00760071179165121, 0.0108573133203486, 0.0656627847324154, -0.025605531410938, -0.0259543106904587, 0.0148074655791834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00894872042728933, 0.01354270014303, 0.0123418011338162, 0.0118223838397412, -0.0399845505836982, 0.0422013001459019, -0.0119330872043856, -0.00292413044299188, -0.0439702312640461, 0.0465429183672366, -0.0132189650130187, -0.00326913804247665, -0.00124328365422713, -0.000790403917700874, -0.000793900257330357, -0.00126398002385327, -0.0670830605102295, 0.297174981210494, 0.535772970512815, -0.0935504836114046, -0.00189681223432843, -0.00504670264847086, 0.0321772770214555, -0.03617037303724, -0.00212061026536665, -0.00559052193272536, 0.0354876359854279, -0.0397758545272403, 0.004335450944221, 0.00314406469764675, 0.00439483944231602, -0.00523488897578085, -0.00528322800716237, 0.00206912152181182, 0.0276817096582158, -0.127430920717603, 0.125763840462251, 0.212173344440878, -0.151186193020126, 0.0592105064091009, 0.0309477746936238, -0.141162538552777, 0.13870227078189, 0.237206911741454, -0.167477615955912, 0.0661965404040854, 0.000875066182395795, -0.00399145221042712, 0.00392188671994388, -0.00402830933090311, 0.00284414833496864, 0.00397561007306053, 0.0220957122063312, -0.0156004611164017, -0.0157445159727609, 0.0262147255291864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0109738205691141, 0.0084432111304712, 0.00763236993753075, -0.0295941247801587, -0.0344990911194154, 0.0601371945948342, -0.0484704728084982, 0.0146274102792548, -0.0382116443014454, 0.0667196416010176, -0.0539112807906322, 0.0163532456363013, -0.000445033691819641, -0.000288809823712886, -0.000289536829614409, -0.000449201642484015, 0.0736287355315531, -0.227812559637077, 0.539364215954558, 0.467968625984661, 0.000857520491375308, 0.000986133972088864, 0.00289671851242906, -0.0128544681648158, 0.000958696239860447, 0.00109682745774979, 0.00321378511702112, -0.0142377769749927, 0.00215684627323672, 0.00158719434401863, 0.00217342755715774, -0.00427040450999711, -0.0042924291824221, 0.00471322495942911, -0.00736449804673703, -0.0158793451087473, 0.0621953543792264, 0.0427239595603109, -0.122833242483404, 0.134874841195123, -0.00823340859708817, -0.0176618007484948, 0.0690030817265085, 0.0477648053829499, -0.13662126738705, 0.150788237023003, -9.58907759979536e-05, -0.000205698983515831, 0.000803647599287717, -0.000206759878970077, 0.000591393526743239, 0.000809825837014608, 0.0015440931637216, -0.00441655656921452, -0.00443933502297745, 0.0119441934599609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0261188035535263, 0.00356846422868538, 0.00320507108782463, 0.192230415140459, -0.0178382131382482, 0.0410650708630082, -0.0503948504088263, 0.036743473102511, -0.0198704873172243, 0.0457735732543992, -0.0562285998280994, 0.0410787029080848, -7.43559974853976e-05, -4.90514755034197e-05, -4.90999381122796e-05, -7.46268914881268e-05, -0.166915283235763, 0.464278848231275, -0.769187724303445, 1.17551858417977, -0.000624602315103688, -0.000497526431337217, -0.000671670106945687, -0.00213554205983538, -0.000698296888437391, -0.000555120501094781, -0.000748683496630181, -0.00237884036290424, 0.000442330508823117, 0.000329297655089024, 0.000443650701341738, -0.00114989679790907, -0.00115219045506205, 0.00190118764207892, 0.00448653414127205, 0.00450467759663963, 0.0126956210248063, -0.0157301889762828, -0.0329713743754391, 0.0544048679014506, 0.0050158841153128, 0.00502614278802704, 0.0141512951707227, -0.0175861372125048, -0.0367881678484813, 0.0608239019496676, 1.87695983853405e-05, 1.88079866665939e-05, 5.29545980091036e-05, 1.88455022700523e-05, 3.94226140919703e-05, 5.31126478445719e-05, -0.000169942708606156, -0.000355500518009963, -0.00035620962191079, 0.00124387251864917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00186778322923269, 0.0206121464512041, 0.0160091858217584, 0.0195251039488212, -0.00316207558373229, -0.00241577235429525, -0.00353354291864182, -0.0181912548602127, -0.003458305964826, -0.00210523271754534, -0.00211720616941652, -0.00353378209371136, -0.0192566655330661, -0.0037543278379911, -0.00258131419735611, -0.00342032226620977, 0.132011178619608, -0.227738706732717, 0.212018681376458, -0.101123604922342, 0.735069464402226, -0.406133611428703, 0.258494822208368, -0.0978768097135353, 0.142792530306415, -0.24334459988812, 0.225266158072228, -0.107046130267053, 0.0034884821852526, 0.000784350551183326, 0.000777623744280931, 0.0024490395387257, 0.000793999307933863, 0.00355148076900446, 0.377375106660751, -0.0785454775264234, 0.0222526783512822, -0.245248734459552, 0.022721285635297, 0.101630074704723, 0.0733078286669998, -0.0470623884943936, 0.0193921693138189, -0.0476413305733007, 0.0136139979708024, 0.0197423729662323, 0.408195327988216, -0.262054509821074, 0.107980185164327, -0.0849602859197393, 0.0242782715384183, 0.0240700543779729, 0.0789442096360893, -0.0225591161468229, -0.00731385603414951, -0.0228366290826985, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0295118525675892, 0.019028728721708, 0.0205403356838657, 0.0197079603842468, -0.0201247738104084, -0.00584323645334015, -0.0057793546097869, -0.018957539154774, -0.0161511787365526, -0.00384447375345827, -0.00275184717215773, -0.00368263832928279, -0.0157869230855839, -0.00392069343601937, -0.002837425154341, -0.00382121421853451, 0.228014045330252, -0.2717151045485, 0.231653750460453, -0.105383312724627, 0.222871671150234, -0.277102067847941, 0.238857806241639, -0.109348835528473, 0.0432944250827251, -0.131942507994804, 0.157153073341713, -0.0877581335269881, 0.014448143763741, 0.00412636436673884, 0.00426585139537898, 0.00395489410044247, 0.00161349267462726, 0.00404388585725995, 1.02114857456486, -0.347362233990544, 0.122072685786529, -0.332927664119839, 0.0461721157239614, 0.115720863634553, 0.198365455024692, -0.165396976974348, 0.0803159756186606, -0.0646735932737135, 0.0219849126185114, 0.0224796100611514, 0.193891742045086, -0.161666798236394, 0.0785046187846282, -0.0659557975662845, 0.02242078061199, 0.0231786894608931, 0.243053648758976, -0.082622797947246, -0.033707926396862, -0.0323072000911191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00567780449458299, 0.0161577642134766, 0.0267098865309275, -0.0116539403654934, -0.0579732173172457, 0.0239119304978304, 0.0078627426735822, 0.0120967981262487, -0.0313276643913103, 0.0110671468330955, 0.00284192495165244, 0.00234989003992663, -0.0106996359300074, -0.0035683942699284, -0.00278670080802792, -0.00384632070848094, -0.0380248596464322, 0.301987998765445, -0.169129303002115, 0.0672450495550814, -0.0129869928834945, -0.0973703756382166, 0.165842790839072, -0.110067289214354, -0.00252281677407686, -0.0351937372957314, 0.076756935940108, -0.0594783463215324, 0.022319525148426, 0.00852158369598113, 0.00936787367759266, -0.00902659870223746, -0.00485135103202069, -0.00326290380377016, 0.609030388285103, -0.507138483772254, 0.268073449809222, 0.537193055045898, -0.138827491931281, -0.0933720830549342, 0.118308533258758, -0.183301116519787, 0.124072300702036, 0.104353614600787, -0.0501780777616418, -0.0181381986942381, 0.0404070414401217, -0.0626045781079555, 0.0423755958927609, -0.0336468690624239, 0.0161789816165828, 0.0177857381237384, 0.210453801737447, -0.101195988938319, -0.0543878465817407, 0.0576110360335684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000689573107347516, 0.0121457494920625, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.041339453116336, -0.0147699151361857, -0.0393358416198596, 0.0414974536399691, -0.0117258358154839, -0.0028691622449886, -0.00561799280287607, -0.00244134318822817, -0.0020707327412001, -0.00293713936881887, -0.00443360677459506, 0.0139910499734395, 0.368517130449207, -0.082104674715699, -0.000633213118741771, -0.000823109650177159, 0.0650785581277403, -0.0840499253371741, -0.000123006202579645, -0.000233473059959504, 0.0217631516226341, -0.0312299337797292, 0.0195246551264626, 0.00966161533660806, 0.0113416597229396, -0.0234549811860988, -0.0160632387501088, 0.00917252921469192, 0.0065828238030824, -0.30364323834803, 0.324555812036961, 0.7371382729091, -0.459669715353957, 0.262483423099521, 0.00127876086944765, -0.0861276695976364, 0.10853586112807, 0.143194411238384, -0.130384202142739, 0.0509892927988105, 0.000182634184634645, -0.0123008586572028, 0.0155012238600132, -0.00842429281329397, 0.00767065339756534, 0.00900449227761771, 0.0673733265593303, -0.0613460913255653, -0.0420131188138636, 0.10199297705579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0071311438771826, 0.00750148626092424, 0.0261981528295215, -0.0295941247801588, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.0339007738939029, 0.059078590749144, -0.0475981981984886, 0.0143524422502369, -0.00199428872932849, -0.00106415577163217, -0.000972023581156769, -0.00141352907516584, 0.0450881185414648, -0.127068618871477, 0.241702073048268, 0.4107131286806, 0.00265240926107769, 0.00228882920954477, 0.00493590353226586, -0.0404499066305404, 0.000515249575909701, 0.000540144332047113, 0.00127523875639669, -0.011086077739848, 0.00964665779284916, 0.00583119804449758, 0.00725319143528799, -0.0190441299503523, -0.0156762365286428, 0.0208939848046806, -0.0207484211610255, -0.0296106304241301, 0.207559166263658, 0.0967054607656753, -0.448595161601129, 0.597907570023055, -0.00403053003957306, -0.00698785830119679, 0.0536249323623454, 0.0187857312892301, -0.105864663432386, 0.116147845812616, -0.000237104930297344, -0.000411076369401614, 0.00315460639795221, -0.000338378829323542, 0.0019068920090157, 0.00237190585575586, 0.00306743134590175, -0.0172861296713, -0.0142291329716045, 0.0464709748021342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0284903632108102, 0.00314688918138778, 0.014002682081672, 0.192230415140459, -0.0792712548026676, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.017513023375429, 0.0403122421171738, -0.0494632043101819, 0.0360527643450896, -0.000331016674263531, -0.000203286338883807, -0.000196366252368568, -0.000291059369223531, -0.178725093630068, 0.484387298109389, -0.768528380851086, 1.03169505116885, -0.00337811380894376, -0.00244266543518695, -0.00305101620671721, -0.00832902875213219, -0.000656222903823782, -0.00050947877110234, -0.000658791463301687, -0.00184009292641843, 0.00196766105572226, 0.0013631623972034, 0.00177020657356566, -0.00510934349238296, -0.0047586098838691, 0.00842806911326797, 0.0236431905624577, 0.0211799660893333, 0.0506566804146616, -0.0793857886114542, -0.136173587707137, 0.241179763965931, 0.00459285981587537, 0.00441760993533528, 0.0109380568162513, -0.0154212604048487, -0.0284023964650361, 0.0468509037896238, 8.68104352411505e-05, 8.34980070347009e-05, 0.000206742097729327, 7.77662418170243e-05, 0.000143227438853593, 0.000185995560246059, -0.000752719569419361, -0.0013863354276103, -0.00129116969293913, 0.00483950370236143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00652877742132648, 0.0172198053622791, -0.0100835618309506, 0.0195251039488213, 0.00276855422334106, 0.00354739278284621, 0.0184970121822559, -0.0413981115341341, -0.00286607158261648, -0.00172596335485652, -0.00170726307853493, -0.00275019694120753, -0.0363180547067536, 0.016112200793575, 0.00305654953686378, 0.00233062201042283, 0.0048055972738777, -0.0696229490571689, 0.116257872529598, -0.0787003334009247, 0.0608951799214986, 0.649943657200637, -0.208138951111156, 0.0666936707344561, 0.00404544389461575, -0.0599894079180596, 0.10126879776982, -0.0690428357230217, 0.00650857391428492, -0.00331084397955442, -0.00088868287866109, 0.00449418520894316, -0.00323471010148814, 0.0062900104675075, 0.262546773541793, 0.225455398280341, -0.0254307747166691, -0.30603626219929, -0.092565284917625, 0.179996535328407, 0.0174417456922689, -0.0208093974068782, 0.0123731957337331, -0.020330878897824, 0.00854372002011979, 0.011957693299125, 0.221016906233311, -0.263690843599809, 0.156789663691808, 0.189792675603336, -0.0797572741627939, -0.0214081135912331, 0.0766673450374756, -0.032218200402355, 0.0231891952485367, -0.0314773329510057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00858574731449899, 0.0157648753004523, -0.0118196797021563, 0.019707960384247, 0.0153251463175158, 0.0068247368416483, 0.0170656692030984, -0.0431419561966858, -0.0132859312546023, -0.00313228338759614, -0.00220943154814876, -0.00286604561350589, -0.0295531067577095, 0.00943259119854728, 0.00266080533945939, 0.00226463927967889, -0.0231797827124805, -0.0726756131892212, 0.124780298683106, -0.082015488398492, -0.0515609015277075, 0.218856107347192, -0.150272175335546, 0.0648054921715141, -0.00342534063541732, -0.0283345225038209, 0.0689689653012088, -0.0561822573222247, 0.0267888501632137, -0.00978290406589549, -0.00387759279960762, 0.00722618325024968, -0.00370795971687495, 0.0071621067453225, 0.621558100379749, 0.552501249632886, -0.110962179307842, -0.408107372713323, -0.106107915976051, 0.204952663667211, 0.0412919121935716, -0.0715303734534455, 0.0509272370439879, -0.0271117596075611, 0.0137374148224591, 0.0136156014808828, 0.0918493604928062, -0.159111523503951, 0.113282090987398, 0.0816446385611452, -0.0413689957486715, -0.0163971882951671, 0.231873293669398, -0.117489224878567, 0.0602870558259809, -0.0445312874461569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00728244989005017, 0.0132117409898727, -0.00729939888432002, -0.0116539403654932, 0.0195387056426205, -0.0109690858690789, -0.00648860340814756, 0.027528864934527, -0.0254704298617905, 0.00892944871598964, 0.00226644479881716, 0.0018288225557204, -0.0197968060956587, 0.00237595918769108, 0.0010194799310851, 0.00100887627534119, -0.0311859124881203, 0.0417262619381512, -0.086839836761721, 0.0523340502310094, -0.0242391457778125, 0.0111025773900733, -0.0390618253060835, 0.0288702594494081, -0.00161027694513697, -0.00387808858029452, 0.0317985080969108, -0.0376349350795189, 0.0409818725101213, -0.00560828431610174, -0.00334442030343108, -0.0163822876805217, 0.00311575927800587, -0.00577891319567471, 0.191503462471457, 0.214883898684752, -0.0957047798901591, 0.627694611711972, 0.0891613579747636, -0.165370846131076, 0.012722131933129, -0.0750581386916091, 0.077909037644902, 0.0416995784872781, -0.0311437274442787, -0.0109860662320211, 0.00988823433174061, -0.0583386862978682, 0.0605545379377077, 0.0110954774231796, -0.00828676301457344, -0.00494169284465326, 0.19138099827276, -0.142934721751187, 0.0271848592901333, 0.0794093452371631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0111121414793535, 0.00978040546374058, 0.00962857943557113, 0.0118223838397412, -0.0386200930353357, 0.0549301045311347, -0.0255353246076023, -0.0336121174078453, -0.0315495982714476, 0.0331063769654703, -0.009279481686203, -0.00223295070854487, -0.0102542626550715, -0.00120308329737536, -0.000725398750303325, -0.000833886962407598, 0.0582572468288328, -0.126131012729572, 0.160899807538945, -0.0638986839804833, 0.0189347929379131, 0.00458359170060305, 0.0125779136442874, -0.023862720875306, 0.00125789336011884, 0.00166566730191918, 0.00758070923223664, -0.0194939783441422, 0.0354479766349184, 0.00472287345005621, 0.00390727055762901, -0.0422408716007055, -0.0077220711591529, 0.0162454222693437, -0.135052204499447, -0.0818913657941354, 0.111811445560695, 0.732427557989167, -0.22097674739764, 0.464883125160772, -0.00897191069721797, -0.0297591450597252, 0.0673887642738483, 0.0486572926877846, -0.0803024716569526, 0.030883537955155, -0.0029160538912591, -0.00967232885842995, 0.0219027222761858, -0.00176820242786581, 0.00291818589781629, 0.00241423827269633, 0.0520988018747553, -0.0859822306134802, -0.0157184470409666, 0.140584097846635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00476412582200842, 0.00595231255869339, 0.0280757815135754, -0.0295941247801588, -0.14266986579011, 0.291843625603676, -0.302869456861528, 0.168138269227149, -0.0268382683375482, 0.0466279404547277, -0.0373939339722442, 0.0111699141963796, -0.00359294678603286, -0.00126119637132602, -0.000974613380291062, -0.00126885446246886, -0.0275920932079783, 0.0681032668396033, -0.0986835027874696, 0.319641098476688, -0.00369386434939309, -0.00184206276700084, -0.00257202845525767, -0.036309861209318, -0.000245394151048665, -0.000227431231249938, -0.000410933730046623, -0.00683041084421039, 0.0173265003015643, 0.00687907171497681, 0.00720440458057825, -0.0340478467842398, -0.0183200746196736, 0.0370052357530366, 0.0253065278441702, 0.0181540378518078, 0.206163069251945, -0.0898530971770404, -0.524251903161903, 1.05895121462285, 0.00168118623991424, 0.00224139766285718, 0.0329387331902805, -0.00596920255192279, -0.0647270320843949, 0.0703492087783403, 0.000225067154909295, 0.000300064908350548, 0.00440964052015391, 0.000161455481944249, 0.00175074209144582, 0.00183354017309724, -0.00221809903691524, -0.0240519510403532, -0.0129415977638842, 0.064054214880287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302538880961422, 0.00246776876963702, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.0137211579663086, 0.0315457931627577, -0.038636441650314, 0.0280583803965702, -0.000590197519305592, -0.00031977238393541, -0.000291122581603045, -0.000414169528781521, -0.184397876468037, 0.480186648330887, -0.713797405978017, 0.802925731904298, -0.00793163153750679, -0.00486754060925082, -0.0053784079147495, -0.0118519803113755, -0.00052692134942565, -0.000394510258857673, -0.000478814744853861, -0.00112200145901495, 0.00350406908242368, 0.00214037926285329, 0.00261482209238985, -0.00908234190642575, -0.00744444616732436, 0.0149269125729195, 0.053338560217129, 0.0395429056190295, 0.0748264123822475, -0.167793715365594, -0.213032160197368, 0.427152317178935, 0.00354343567185696, 0.00320492075651014, 0.00666144891221001, -0.0111470244813418, -0.0172660855678771, 0.0283769706540023, 0.000152416213593885, 0.000137855440824856, 0.000286533442193371, 0.000112994800092413, 0.000175022302174377, 0.000213818265916596, -0.00123819818524007, -0.00191789619302759, -0.00157202570775307, 0.00667062852425399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00254449201900171, 0.0124299526187293, 0.0100401662714878, 0.0195251039488213, -0.00508376488671075, -0.0317222402070978, 0.0822967853898159, -0.0686320373360361, -0.00204964204175437, -0.0012189336202146, -0.00118292063155352, -0.00183063682142867, -0.0430586021516742, 0.0506272851755826, -0.0189383076837503, -0.00284867343610859, -0.000856872010174149, -0.00161605386869111, 0.0393067632837017, -0.0523859677188017, -0.0180010510271373, 0.0671213089149899, 0.629292918952211, -0.0815183617627336, -0.000480145834420704, -0.000964790796582565, 0.0241807101537086, -0.0328660874700564, 0.00762045121549463, -0.0102064605800899, 0.0052898064667229, 0.00516240990083447, -0.00957976934285656, 0.0069412250876227, 0.0101031421758618, 0.339146109455535, 0.151374443887892, -0.171539508681194, -0.274137109924834, 0.198631858112276, 0.000269483244227339, -0.00487483111382461, 0.00581659421565785, -0.00457550953039688, 0.00394040230937947, 0.00529814948649647, 0.00566126746200266, -0.102409791178522, 0.1221942227509, 0.190039573917173, -0.163660980479209, 0.0848222462719288, 0.0286048777260463, -0.0246343550379299, 0.0457134252619619, -0.0231217705022786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00481040329364079, 0.011274129402522, 0.0110939404354587, 0.019707960384247, -0.0231802053744832, -0.0276298646655864, 0.0870824133797191, -0.07152307771332, -0.0094228577941513, -0.00219692843858316, -0.00152363049106581, -0.00190775015176707, -0.0347488262460901, 0.0337592671031057, -0.00742856718436119, -0.00228007999607842, 0.00736457670424265, 0.00438882359425985, 0.0397000546457264, -0.0545926623435965, 0.0271584695282767, -0.0674411898835215, 0.19356039727999, -0.0652473476293612, 0.000724403591411426, 0.00117997939276461, 0.0153905329075907, -0.0265233404201763, 0.0311498025027811, -0.0344250066126228, 0.0104494503526854, 0.00826141494223326, -0.0125944886537102, 0.00790361085687728, -0.0622282391086322, 0.896985621982872, 0.299024122342193, -0.215261263528709, -0.360407082565476, 0.226171733444769, -0.00165982695934244, -0.0156940372993716, 0.0237762510293563, -0.00574170912796191, 0.00630583373704137, 0.00603272639544599, -0.00612097092715925, -0.0578751571051006, 0.0876800683880995, 0.0882304078161745, -0.0968990713114824, 0.0294129801131076, 0.0814105285467183, -0.0894091368997129, 0.13630381334133, -0.0327105924159353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0117698440494141, 0.00930958844834857, -0.00170955493305552, -0.0116539403654931, 0.0063007969271564, -0.00613847546289123, -0.0581932607657197, 0.0456388471838217, -0.0178289300066306, 0.00619513050775209, 0.00155135505195025, 0.00121733460618684, -0.0229736761944516, 0.014783805878625, 0.000390512398712615, 0.000216558881969607, 0.0354164151936628, -0.0239832387341913, -0.0228191073912385, 0.0348355559312483, 0.0456362358439278, -0.0572326192875786, -0.00574410374506496, 0.00619710390792813, 0.00121726495336642, 0.00152574562586508, 0.00579711893708326, -0.0175355170299285, 0.0471372205926179, -0.0344284557477548, -0.00124580290150344, -0.0185903243576042, 0.0186004631507436, -0.00637721311597531, -0.182482550339248, 0.506413169593175, -0.0356502118925021, 0.273447788383992, 0.532275572502243, -0.18249194844047, -0.00486739559083215, -0.0135003025897684, 0.0359792454393944, 0.007293730589739, -0.0141897599063135, -0.00486764626837011, -0.00627193949230212, -0.0173959727313477, 0.0463614773369989, 0.0174054601488659, -0.0338618622572621, -0.00122530056414597, 0.0554961977510381, -0.107966384569833, 0.108025267288504, 0.0583303756759752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00224468746929307, 0.00677269421349489, -0.011422245664625, 0.0118223838397412, 0.0552995939385817, -0.104936601954282, 0.091016399340666, -0.0557239934719333, -0.0217460457985153, 0.0226775867458491, -0.00629687867371574, -0.00148633784230117, -0.0117175620738284, 0.00293737332109396, 0.000940361805028244, 0.00079479332173103, 0.0096727941761986, -0.0153043533659063, 0.00875331817504017, -0.0425334207826391, 0.00521205405512031, -0.00198233611792258, -0.00130720099680845, 0.0227440073355646, 0.000139022218178625, 0.00013714594419779, 0.000282495939903949, -0.00894386721374997, 0.040255293053799, -0.011423157975321, -0.00496853616119718, -0.0475204821291954, 0.0183210544613895, 0.0179273362417273, -0.0271669660730638, 0.0158793811192681, -0.142180891317948, 0.0660584269543608, 0.524279942561052, 0.513013202099966, -0.000724630221544336, -0.00109859912110399, 0.030726357023354, 0.00176199036837838, -0.0362717841321434, 0.0136837094467272, -0.000390457174614212, -0.000591965248075811, 0.0165564810752098, 0.00022822637867507, -0.00469819704416965, -0.00204349462353722, 0.00312773309752881, -0.0643865379587121, 0.0248235963876549, 0.103266475966667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225257270787523, 0.0040525679656141, 0.0116134748343782, -0.0295941247801588, -0.064816550186493, 0.151531129548398, -0.198356641546219, 0.278748753109168, -0.0182236775617251, 0.0315481269099233, -0.0251644118483799, 0.00743512434099087, -0.00404462887250172, -0.000558857812259051, -0.00034054118705871, -0.000383710664555207, -0.118755279768057, 0.255827607455979, -0.289712660115727, 0.212765404450057, -0.0263569760650683, -0.00453184613547838, -0.00392058013420601, -0.0109803617251885, -0.00070302518705643, -0.00057493029574272, -0.000816247856154016, -0.00308721416081534, 0.0194350005513996, 0.00303184316836334, 0.00248993575190885, -0.0379858317474892, -0.00798650751792754, 0.040836445679899, 0.157600788983965, 0.0349049822683114, 0.0712526331790855, -0.43732301110713, -0.228543925328445, 1.16858608987676, 0.00420371911717641, 0.00442820236576538, 0.0148344905822274, -0.0116648090026967, -0.0289941058569006, 0.0311699434866488, 0.000932988616355316, 0.00098281124000345, 0.00329242046313135, 0.000206635711155651, 0.000513614726283007, 0.000421811946945169, -0.0071860231210129, -0.0178616139374965, -0.00375539793211316, 0.0470512180454069, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0278235382849626, 0.00165731029056243, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660335, 0.700205786033841, -0.00920510912404793, 0.021133146858934, -0.0258282524616005, 0.0186767367580086, -0.000656420170570248, -0.000300087035939448, -0.000253714313457539, -0.000343356021220877, -0.164115051478879, 0.408587395180542, -0.565496681950332, 0.534458237398515, -0.0117031127641388, -0.00580187045310441, -0.00555494811880148, -0.0098255630134691, -0.000312159597513796, -0.000224404254494096, -0.000254123794305392, -0.000501037229845036, 0.00389172137830555, 0.00200434369960687, 0.00226908998258709, -0.0100656565735367, -0.00694151636999116, 0.0164723191745268, 0.0752423816171068, 0.0438841037852118, 0.0649328546150945, -0.220382521134524, -0.198640193522426, 0.471376064563758, 0.0020069559300107, 0.00169734565320872, 0.00297050180073034, -0.00587830951327942, -0.00768298859828463, 0.0125731132868106, 0.000143116864357656, 0.000121038426398586, 0.000211827722239452, 8.34709799703856e-05, 0.000109097111329462, 0.000123507341827496, -0.00108250526785368, -0.00141484139474421, -0.0009757083038552, 0.0048999304383195, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00396719586028161, 0.00700570982272341, -0.0283386095943201, 0.0195251039488212, 0.0724066424646242, -0.168855440911289, 0.180838102102828, -0.0944993352356274, -0.00114511302775302, -0.000673043912201758, -0.000641631662811089, -0.000957221224723049, -0.0331231875874076, 0.0614263985245277, -0.0546792511962839, 0.0212151322982277, 0.000881675779232968, 0.000801959357219178, 0.00164117293051704, -0.0273920854159158, 0.0255030826818181, -0.0731920669423043, 0.139859224732049, 0.607097608174252, 0.000258330833524054, 0.000259692769779414, 0.000557467377202875, -0.00960126525101323, 0.00579356513688948, -0.0121650083715785, 0.0147231629685926, 0.00385553391728589, -0.0110070831616925, 0.00499744607324125, -0.00690326988915846, 0.0311157999146772, 0.421321766809783, -0.00986172950072123, -0.314981484277462, 0.143008184695501, -6.99259570603708e-05, -0.000110401968427902, 0.00167935394144966, -9.98933671548623e-05, 0.00111758579171963, 0.00144858658908353, -0.00202265674810734, -0.0031934534160672, 0.0485764761033609, 0.00911692338278994, -0.101998203955028, 0.123447196538075, 0.000859882570604534, -0.00962018371015529, 0.0274644613171976, -0.0087044874030531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00163104362451016, 0.00630096536900619, -0.019592966199785, 0.0197079603842468, 0.097663716224066, -0.196492083346238, 0.196789453010076, -0.0984800038037924, -0.00522532202805492, -0.00120559810201169, -0.000822987370205929, -0.000997542994527334, -0.0265321488636245, 0.0418649924033502, -0.0285354595072402, 0.00502315034416617, -0.00176946150425581, -0.000595996850338331, -0.000775277112656202, -0.0285459434103635, -0.00898463593005264, 0.020696286407709, -0.0268812006793818, 0.143743744633529, -9.10089387108342e-05, -8.65533292724592e-05, -0.000164932469374611, -0.00769075132780622, 0.0235366042308362, -0.0420202768766607, 0.0388570541739818, 0.00614426323170689, -0.0148820249349665, 0.00569033110762529, 0.0116355043739908, -0.0395842756636926, 1.11194332036726, 0.00578806775186331, -0.425867801143152, 0.162835958625975, 0.000117860635943563, 0.000165544232334143, 0.00682244665408587, 5.86296325617575e-05, 0.00178100917684939, 0.00164942997065799, 0.000598450377074356, 0.00084056909645292, 0.0346417252885991, -0.00203594308727194, -0.0618464275405144, 0.0571907222901659, -0.00114461233433236, -0.0347702174190687, 0.0842169716874292, -0.0123143225387023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0126104679035144, 0.00513339611045784, 0.0107306055922191, -0.0116539403654933, -0.0616020791184596, 0.199029865952139, -0.142163327346853, 0.0628400509032689, -0.009769679837199, 0.00336641557499374, 0.000832405683526143, 0.00063653178445448, -0.0173335456893195, 0.0196253949660864, -0.0067938567600304, -0.00110709786801747, -0.0295896009607123, 0.0136392839755107, 0.00544335694053353, 0.0182151550335337, -0.0524984143521605, 0.0795137525688741, -0.0444271201886012, -0.0316809934644761, -0.000531777248558544, -0.000465575059279364, -0.000751445762370898, -0.00502439475260479, 0.0352681842662438, -0.0451290574006878, 0.0211211319918735, -0.013734493942751, 0.0237601277454768, -0.00459137662910275, 0.14289168101562, -0.295112794978876, 0.604407671559529, -0.0898140827333987, 0.679925843563979, -0.131387998461278, 0.00144740647712975, 0.00172796720790325, 0.0102230255215698, -0.000909762444964251, -0.00398115426194389, -0.00133088111664939, 0.0025680151980844, 0.00306579120779297, 0.0181378799422368, -0.0053036967391553, -0.0232091739926475, 0.0108622704650949, -0.00953110774137406, -0.0417084816104069, 0.072154012755323, 0.0219592189204033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0253972624653879, 0.00367511242526291, -0.0036644845302725, 0.0118223838397412, 0.0220838867907562, -0.0613915956629152, 0.29971631803346, -0.0767262716388462, -0.01174846789109, 0.0121800061564549, -0.003352220481887, -0.000777190818575108, -0.00871645838744103, 0.00519517947069492, 0.000292876250127097, 0.000165965533133618, -0.0936105122386034, 0.117950744221066, -0.0442674609131464, -0.0222402896394522, -0.0694517908308397, 0.0503099322824038, 0.00386755227615413, 0.00474931180199906, -0.000703504718975623, -0.000562698709720083, -0.000767316927101967, -0.00252659949488245, 0.0297697731931807, -0.0200255369950434, -0.00151991921677785, -0.03483292545168, 0.031546510726741, 0.0129070725951027, 0.288289419424248, -0.264445516332456, -0.0434943939143443, -0.459983218363609, 0.902742954379208, 0.369352063935649, 0.00292019780295708, 0.0029577291020033, 0.00862922652404659, -0.0046593523492651, -0.0100968590612784, 0.00374131346123191, 0.00216656187585747, 0.00219440720934264, 0.00640222151602395, -0.00198736941186268, -0.00430664765188665, -0.000326870461831387, -0.0113881603082125, -0.0246782473142257, 0.0223499055425406, 0.0388759908814476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0300055156673334, 0.0021646482732958, -0.00428139506100088, -0.0295941247801588, 0.0263560489909357, -0.0712908034861194, 0.124137438646549, 0.383808683073226, -0.0097093743841582, 0.016751655815595, -0.0132940824930264, 0.00388775028686306, -0.00296712446719286, 0.000185712664972401, 8.46394591314278e-05, 8.15846378215415e-05, -0.145766077772663, 0.280164836849329, -0.262749987106195, 0.111252848540127, -0.044545207418481, 0.00310597107865735, 0.00167285081968815, 0.00233464669412085, -0.000451216062995052, -0.000332623551692749, -0.000393080450660113, -0.000860066651710805, 0.0142092312312, -0.00100238451978055, -0.000612533599599077, -0.027630903596213, 0.00261350337251305, 0.0294008525198293, 0.237643788379266, -0.0198115605033999, -0.0175284168873222, -0.54610911038394, 0.0747886755596979, 0.841342254771774, 0.00240718813093282, 0.00212165260149867, 0.00411876416494408, -0.00553175564855325, -0.00800924228238432, 0.00852228919405508, 0.000735621731929481, 0.000648363848762942, 0.00125866873032939, -6.13263008015822e-05, -8.8792280897515e-05, -5.42588740760524e-05, -0.004692192580246, -0.00679366725474102, 0.000642587464437393, 0.0177130351991931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0191690324088709, 0.000873918129073724, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.00484906798185403, 0.0111175665009624, -0.013560134503665, 0.00976587416141814, -0.000476116367454441, -0.00017948522686239, -0.000140724751873928, -0.000181253151723545, -0.109706187629544, 0.262185091653747, -0.340572586312384, 0.279462732628028, -0.0107717424744165, -0.00423279236974628, -0.00353440393167901, -0.00518678617406009, -0.000109111249280836, -7.56002252732565e-05, -8.0513836682063e-05, -0.000138009650255301, 0.00281896164772188, 0.00119640185951797, 0.00125348284008024, -0.00727633935672327, -0.00412667615030109, 0.0118595097748234, 0.0664794510482459, 0.0300484980775645, 0.035869982963235, -0.182750526031733, -0.118090011664295, 0.339374740501439, 0.000673396711126706, 0.000536684303255552, 0.000817119380216468, -0.00185115251774766, -0.00210915884939895, 0.00343766126960435, 6.61189319590008e-05, 5.26955245615983e-05, 8.02306572190406e-05, 2.98855446086229e-05, 3.40508738614952e-05, 3.56754594919057e-05, -0.000469376814715587, -0.000534796702578482, -0.000303302620946379, 0.00184464173156589, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302387678330058, 0.00234316248688222, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.000380508993873417, -0.00022170412581743, -0.000208599314241447, -0.000303030395125595, -0.013263085883049, 0.0312018466643444, -0.0394682247241067, 0.0302540966567125, -0.00535611326543933, -0.00351055389355507, -0.00396473437419381, -0.00867159466642664, -0.186693590381844, 0.494062814074891, -0.750151206494617, 0.865758905462842, -0.0004968107215617, -0.000369581508087825, -0.000443618433201049, -0.00100999427280182, 0.00229970513974527, -0.00609865929245053, 0.0103483935384558, 0.00151045400183994, -0.00537329878448927, 0.00190641688386355, 0.0364144726787388, -0.115913919569765, 0.296132254907867, 0.028708382496437, -0.153763681235287, 0.054554509211011, 9.69026328636493e-05, 8.67088960805262e-05, 0.000175124329341963, 7.63959394305888e-05, 0.000115022243288406, 0.000145175123742096, 0.00337765456969342, 0.00302233995531936, 0.00610416325940206, -0.010751691602952, -0.0161878196213959, 0.0274679925437241, -0.000792444136599933, -0.00119310925359817, 0.00424437453528164, -0.0010512035833943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0298426277029342, 0.00209472514255048, 0.00525730855264606, 0.0197079603842468, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.00172706393075725, -0.000395389812587736, -0.000266770877594788, -0.000315795178772615, -0.0105672909703008, 0.0213868154213814, -0.0217703682626921, 0.0112777292031753, -0.0265751876169891, -0.00675219580951283, -0.00535145363896152, -0.00903687495372642, -0.16260413707782, 0.365229353082629, -0.43671602204642, 0.32272636006408, -0.000432706224703941, -0.000317855761650279, -0.000373373839063189, -0.000804707400158995, 0.00930170605810025, -0.0212166270111514, 0.0289520555433683, 0.00239999837307283, -0.00733851328906417, 0.00217073744055723, 0.158848151032726, -0.425607910612667, 0.828499366632536, 0.0481442357685089, -0.210000758077652, 0.0621183733200974, 0.000422711162026642, 0.000370402667393228, 0.000708332127892716, 0.000128116731068459, 0.000182761736817305, 0.000165303339060827, 0.00258641951000188, 0.00226636240431702, 0.00433403278578905, -0.00692989245680942, -0.00988566575807101, 0.0134899078897133, -0.00301399817492368, -0.00429954414710334, 0.0131467846872074, -0.00148714787906026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0280378223106105, 0.00169002122151249, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169526, -0.227302951843895, 0.075723802663307, -0.00320141581283998, 0.00109628782576182, 0.000268548259483189, 0.000201508776833715, -0.00684455236573056, 0.0102186321500794, -0.00632708254785052, 0.000743550878447724, -0.0564738728270904, 0.0210073440323391, 0.00584313287859441, 0.00576642628111637, -0.120739823396356, 0.195812008554932, -0.137666072131894, 0.0212776405782485, -0.000321301008031941, -0.000231343120081939, -0.000262683898321667, -0.000521217969199393, 0.0138399924095759, -0.0232788254452493, 0.0193014916091432, -0.0053394417644465, 0.0120265244814157, -0.0017515102309489, 0.265205427918547, -0.506505871964672, 0.552336380720341, -0.116176763860625, 0.344154075717301, -0.0501216611310331, 0.00070573874409262, 0.000598414007520878, 0.00105392615206964, -0.000309158240324479, -0.000406602630006284, -0.000133378862024167, 0.00150885298032611, 0.00127939519584917, 0.00225326954047066, -0.00288170155665653, -0.00378999256368308, 0.00314244848128991, -0.00390294190895943, -0.00513312031819335, 0.0115618073754217, 0.00265192061850326, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0235888506057286, 0.00119584539165621, 0.00832487477036386, 0.0118223838397412, -0.0614326220634957, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.00381032346110895, 0.0039330342087917, -0.0010753656842843, -0.00024603762929408, -0.00340656404721311, 0.00290253459641739, -0.000401013389645514, -0.000146155552097639, -0.0784456611970352, 0.0857621692652027, -0.0255955981627659, -0.00704067522019342, -0.0701331978298503, 0.0632915073048819, -0.0095448252899039, -0.00418242435882056, -0.000186631606087948, -0.000131248572870963, -0.000143263535890369, -0.000259412493288198, 0.0115838154219249, -0.0111148703955161, 0.00205374017223559, -0.0134650954278909, 0.0172791285751941, 0.00492376721147812, 0.252592041211183, -0.26455350066724, 0.0587703498073266, -0.320492997714484, 0.494463927062683, 0.140899771694796, 0.00067217323314707, 0.000548608666298348, 0.000882116525256754, -0.000852864616960582, -0.00102537745625838, 0.000374948690527947, 0.000600946663166341, 0.000490475566622494, 0.000788643397617852, -0.000629404405193009, -0.000756716922147753, 0.000139821688128063, -0.0025119095787861, -0.0030200050547621, 0.00387543154955237, 0.00469488656026245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0161601125382386, 0.000696217557866054, -0.0107414954878784, -0.0295941247801587, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.00311691852162233, 0.0053640568002266, -0.00424076416664745, 0.00123075677298999, -0.0011477990315343, 0.000243419538752938, 8.31834643459835e-05, 7.02142929647871e-05, -0.0741443373095676, 0.131860036949592, -0.109561390037619, 0.0352196480617273, -0.0273035043961884, 0.00598377507353513, 0.00214906927708259, 0.00200927002101692, -7.26574152465553e-05, -4.99388244906008e-05, -5.24846012753695e-05, -8.74057861344252e-05, 0.00548279610120566, -0.00130887565395687, -0.00059742330548216, -0.0106212767903118, 0.00338668826964587, 0.0112157851875389, 0.134778903993248, -0.0338151876404035, -0.0170960168773581, -0.274403811056705, 0.0969143307348483, 0.320953754397271, 0.000358660436103903, 0.000282211597182957, 0.000417519173892726, -0.000730216581574204, -0.000808818462207817, 0.000854090737576828, 0.00013207599055083, 0.000103923858030993, 0.000153750603397619, -3.31370434910434e-05, -3.67039769225859e-05, -1.67531660863988e-05, -0.000746380729285704, -0.000826722549057942, 0.00026360781424163, 0.0021391272354126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00734348804657594, 0.000278404956314804, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.00154360799326991, 0.00353550741513591, -0.00430576776528913, 0.00309161208448705, -0.000182636570873247, -5.79074942608703e-05, -4.27474677586908e-05, -5.2981968925783e-05, -0.0411121542477164, 0.0953904978590433, -0.118457806464408, 0.088470355758825, -0.00486430680960219, -0.00156238526998174, -0.00117604374843836, -0.00151614546442362, -1.29444174866676e-05, -8.73387187585268e-06, -8.9056687601341e-06, -1.39079164692274e-05, 0.00108025695398478, 0.000385414218265771, 0.000379616920950065, -0.00278416799838713, -0.00132537357759348, 0.00452414480070645, 0.0291460988640958, 0.0106032943169844, 0.0108632141195973, -0.0765964287661009, -0.0379272265467478, 0.129464075403039, 7.75607474139545e-05, 5.92733532530608e-05, 8.22624045642498e-05, -0.000203830924064327, -0.000212016551629515, 0.000344517134121841, 9.17683051880787e-06, 7.01310308717697e-06, 9.73312106864735e-06, 3.33851316914159e-06, 3.47258421623531e-06, 3.42035053576975e-06, -6.22795393422915e-05, -6.47806177063136e-05, -3.08381243869886e-05, 0.000222769464589115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0125131983511539, 0.0112128454303619, 0.0208770933958505, 0.0195251039488212, -0.00350519620229005, -0.00213578148775561, -0.00215103292273919, -0.00360148326124416, -0.00226985035225311, -0.0017969233795521, -0.00280290297783902, -0.020199909014669, -0.00250226696008475, -0.00195073523785067, -0.00302124952471538, -0.0216728867138269, 0.110772181805886, -0.208071106282044, 0.201984382314542, -0.0990472496003532, 0.12211446906808, -0.225881439142981, 0.217718994875169, -0.10626977667799, 0.684912572298822, -0.294334759695953, 0.183176207073003, -0.0688168296738453, 0.000589501209135734, 0.000632108757277316, 0.0039298861731213, 0.000641888290245476, 0.0027629082188111, 0.00401918370631311, 0.0682600995319011, -0.0455513793747795, 0.0192696123733749, -0.0462561176199209, 0.0135475095344602, 0.01970746954651, 0.382855534749969, -0.0593557148961152, 0.0162123406290089, -0.259440152714044, 0.0176530793253, 0.110534761061572, 0.422057231279378, -0.0654333199232, 0.0178723695424865, -0.281647539217126, 0.019164135927162, 0.119145434915934, 0.0851123010939679, -0.00579129401155795, -0.0249277235077292, -0.0253133873528487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0273770165770782, 0.0164398153896086, 0.0192875795853982, 0.0197079603842468, -0.0163810014243475, -0.00390242657177209, -0.00279689872237266, -0.00375319132544456, -0.016455224270786, -0.0049261659299401, -0.00514129646939605, -0.0210508054013365, -0.00318431349806172, -0.00243126567889085, -0.00354041384624249, -0.0177795380457136, 0.180416762354003, -0.246495727242803, 0.220428635877593, -0.103219493481903, 0.0349131389634356, -0.121655788733429, 0.151792179115676, -0.0871793205263414, 0.195819938431223, -0.223629290575918, 0.191612435862306, -0.0875743328428927, 0.00366524434684612, 0.00373089742608173, 0.0162853332138365, 0.00146285721496208, 0.00446348462723339, 0.00457643479011305, 0.18340167254765, -0.159958997720859, 0.0798527093604434, -0.0627187368589137, 0.0218860330331136, 0.0224398673581591, 1.02865870250385, -0.294038759305839, 0.100800793821525, -0.351775278729851, 0.0402311973122856, 0.125860165397376, 0.199059686904237, -0.0569005669447605, 0.0195063478381803, -0.173615581371305, 0.0198557520467498, 0.0866701764653483, 0.261733439364735, -0.0299334554728394, -0.0913332599904381, -0.0358110939767408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00769851183855557, 0.0241754756606097, 0.0163965439250799, -0.0116539403654934, -0.0318063021955916, 0.0112436886986538, 0.00289018334287352, 0.00239490987846134, -0.053345643375107, 0.0225203407828077, 0.00770119898836352, 0.0134325104780699, -0.00360710415218154, -0.00266909142798132, -0.00355083307641811, -0.0120625997765332, -0.0489992445747002, 0.267079884396059, -0.160437252917034, 0.0658643173647256, -0.0033132111148485, -0.0316540782798461, 0.0739736637383714, -0.0591471639811747, -0.0185830554278955, -0.084345637181598, 0.148164197799285, -0.0992018341832287, 0.00899172423205331, 0.00848823481059479, 0.0251793692370999, -0.00484271172850328, -0.0101935082532455, -0.00369260335515099, 0.106637314753757, -0.17683338363082, 0.123463292225494, 0.100887065451002, -0.0499823516793692, -0.0181061313655987, 0.598104697243668, -0.471191240681805, 0.247288544676478, 0.565852843131987, -0.133183258819301, -0.101553215623276, 0.0404424016727429, -0.0318608188635712, 0.0167210568633936, -0.067064392482707, 0.0157847653325304, 0.0468236851945559, 0.225928762376926, -0.0531762439644613, -0.11193160198611, 0.0638592703693535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000692705759854005, 0.0299005753431563, 0.0123418011338162, 0.0118223838397412, -0.0399845505836983, 0.0422013001459018, -0.0119330872043855, -0.00292413044299188, -0.105804882736616, 0.125936349182971, -0.0430093491732373, -0.0164007895111112, -0.00299169409535076, -0.00213868376258161, -0.0025830413608493, -0.00634120372040321, 0.00436230428657873, -0.0132065134800397, 0.346278038065547, -0.0804188321427701, 0.000123346670198571, 0.000224276439036625, 0.0207966526318348, -0.0310931493406901, 0.000691823711102646, 0.000808339326836062, 0.0620609909795397, -0.0822769537703659, 0.0117309116645637, 0.010229558537387, 0.0220482695108047, -0.0170322841176118, -0.0265051855745517, 0.0103804813719163, -0.00123018051608071, -0.0823604990239468, 0.108110410393762, 0.137130787640276, -0.129964235452736, 0.0508991465589968, -0.00689980563393331, -0.296844513069608, 0.32262111230204, 0.769135723398207, -0.468418363737865, 0.285481857011572, -0.000195095984610725, -0.00839344984860782, 0.00912229806172777, -0.0130616624471412, 0.00795480220858004, 0.0171453755662002, 0.0716446307025766, -0.0436329501586936, -0.0679004315061573, 0.113054677471619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00630648166263267, 0.0274659679169433, 0.0076323699375308, -0.0295941247801588, -0.0344990911194154, 0.0601371945948343, -0.048470472808498, 0.0146274102792548, -0.130480475709523, 0.243240342500803, -0.217371432971372, 0.0820418520171364, -0.00151964692640032, -0.00105291633395801, -0.0011674186668964, -0.00225357922813276, 0.0395383094710885, -0.109983778158357, 0.203317202134925, 0.402280019603826, 0.000460484759395091, 0.000476087623058937, 0.00109193877884041, -0.011050090579167, 0.00258275537263015, 0.00213506992707098, 0.00441662708652168, -0.0417930162395376, 0.00786323208030576, 0.0063996014174333, 0.0109037695623235, -0.0172183619845816, -0.0215344921497769, 0.0236455632872441, -0.00355544628755483, -0.00598583280785776, 0.0534650123740606, 0.0161051023871777, -0.10559117951605, 0.115942502867309, -0.019941697990938, -0.0268441585068063, 0.216252986347212, 0.0903298944614693, -0.473535838844076, 0.650295403023376, -0.000232251912743017, -0.000312641740036449, 0.00251860045911447, -0.000391011706139555, 0.00204979821318791, 0.00349248740788522, 0.00292009506579971, -0.0153079960375443, -0.0191452543972817, 0.0515110081076787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0287678230747218, 0.0152327680704991, 0.00320507108782464, 0.192230415140459, -0.0178382131382483, 0.0410650708630083, -0.0503948504088264, 0.0367434731025109, -0.0864392103719315, 0.204225002221374, -0.260674168295516, 0.206085870657986, -0.000323458282952951, -0.000218849807463798, -0.000227625898028604, -0.000374392247516164, -0.179978494886957, 0.485949924576903, -0.76622985466315, 1.01051141642987, -0.000673485269868858, -0.000520749400289016, -0.000669087236009444, -0.00183577670380734, -0.00377742729515856, -0.00269364658708965, -0.00332750776727577, -0.00889568296255176, 0.0019735175282232, 0.00152661443863664, 0.00222573096474404, -0.00533088841509628, -0.00578037173244191, 0.00953798155162816, 0.00469595144355317, 0.00448735510346736, 0.0109135407614039, -0.01566969938845, -0.0283431930980594, 0.0467680739919016, 0.0263385347136999, 0.0232114501770194, 0.0542752718892441, -0.0878878170391836, -0.146608993334405, 0.262311600776789, 9.85596371985307e-05, 8.68579870971871e-05, 0.000203099798998061, 9.41815724236597e-05, 0.00015710784485068, 0.000229055736824683, -0.000849299280487156, -0.00141674826781034, -0.00153620391228609, 0.00536437454800381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0251141783214144, 0.0170982512251827, 0.0160091858217586, 0.0195251039488212, -0.00316207558373234, -0.00241577235429517, -0.00353354291864182, -0.0181912548602127, -0.00335839069175039, -0.00254526063085152, -0.00367028490867606, -0.0177284701790032, -0.0187003136617075, -0.00453904348042354, -0.00447483985261502, -0.0171592587463127, 0.0293790293907044, -0.114578371119061, 0.148172383047726, -0.0869289168370505, 0.163589384055957, -0.204331219412855, 0.180652919655244, -0.0841378732334323, 0.159427677701374, -0.212238483655012, 0.190336131394753, -0.0893615104409751, 0.00421763175802401, 0.00135971169586784, 0.00390122508841162, 0.00424553498359221, 0.00398337890666877, 0.0178172618556884, 0.189862433322843, -0.0548926656233985, 0.0191290770071514, -0.171395695833932, 0.019531906036562, 0.0873642936180387, 0.185032341811612, -0.0570169166961805, 0.0201544183268209, -0.167035397269227, 0.02028775696638, 0.0851417500342237, 1.03030384104418, -0.317483677185369, 0.112224567947569, -0.297879486990314, 0.0361797962355783, 0.103805482586356, 0.276786505750101, -0.0336178884956979, -0.0315420290818589, -0.0984861631531847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00383082689433906, 0.021438292355929, 0.0205403356838658, 0.0197079603842468, -0.0201247738104086, -0.00584323645333997, -0.00577935460978674, -0.0189575391547739, -0.0209027123750645, -0.00602728243276173, -0.00589038572642255, -0.0184752602365971, -0.0204312959399314, -0.006146777995273, -0.00607356716536536, -0.0191704752937161, 0.013585892958652, -0.128120058977522, 0.160325430484326, -0.0905906908173126, 0.0132794918987445, -0.130660138804077, 0.16531129124443, -0.0939995744532918, 0.0129416622398115, -0.133170339698606, 0.170518145142878, -0.0976332000889083, 0.022651485919203, 0.00883256817957504, 0.0214011552624068, 0.00846553253191374, 0.00809465779372021, 0.0202875864800227, 0.481495556956455, -0.240406207919515, 0.104937381919501, -0.230416174847411, 0.0396909506048684, 0.09947716301179, 0.469246332285472, -0.245024815275157, 0.108242622668801, -0.224554398029832, 0.040453480482955, 0.0969464685915432, 0.458663474463193, -0.23949879918387, 0.105801439419834, -0.229006363638902, 0.0412555021999973, 0.0999613464691266, 0.843911139358477, -0.152030613093807, -0.145370156280727, -0.139329327795018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011516222386443, 0.0272195064369147, 0.0267098865309275, -0.0116539403654934, -0.0579732173172458, 0.0239119304978304, 0.00786274267358239, 0.0120967981262487, -0.0588573409883908, 0.0241488423712536, 0.00787093469350962, 0.0117890561421181, -0.020102108874697, -0.00778634204845769, -0.00771798708392565, -0.0192964308978001, -0.056836811610785, 0.109442245504125, -0.114072987754541, 0.0578058834528901, -0.0194120182105404, -0.0352876028153144, 0.111856327157735, -0.0946171790250353, -0.0189181773662324, -0.0353243681982649, 0.112964564404558, -0.0960601434065918, 0.048701865326189, 0.0236011963360776, 0.0469972581018548, -0.0249998751193354, -0.0243385216796773, -0.0163695132433425, 0.220716232256438, -0.3420507329146, 0.23044406538496, 0.362321701221159, -0.119340321283624, -0.0802654736153619, 0.215101221529171, -0.342407108105343, 0.232727232578611, 0.353104253921159, -0.119464659358852, -0.0782235236836697, 0.073465571186993, -0.116945564495709, 0.0794855508053783, -0.113851854988648, 0.0385191424984336, 0.0767034880809724, 0.712118434341345, -0.240928805691316, -0.234555210079491, 0.248455666275406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00801784374588162, 0.0302616520385567, 0.0302516266319403, 0.0118223838397411, -0.105865563934372, 0.12409022809239, -0.0413394531163359, -0.0147699151361857, -0.105632026424745, 0.123383715498899, -0.040873117613714, -0.0143941691791134, -0.0150864946514282, -0.00725880667245082, -0.0072180187587036, -0.0147352005106211, 0.0450891617645782, -0.110330824686386, 0.228755234415405, -0.0705796677815741, 0.00643968899227128, 0.00649089001066451, 0.0403972016220281, -0.0722518641953719, 0.00627586360252864, 0.00641766861494211, 0.0401671985659732, -0.0720924778963433, 0.0580523449520113, 0.0336777988542346, 0.0568994552709836, -0.0817577714486636, -0.0805869296995665, 0.0460172433773115, -0.0519109273670001, -0.188485078243954, 0.278998016488917, 0.457575033785653, -0.395146024404499, 0.225638708936901, -0.0505903157787714, -0.186358845866078, 0.277409530310442, 0.44593434611638, -0.390688524219839, 0.219898470630842, -0.007225370507819, -0.0266159973122155, 0.0396199669450187, -0.0262348332920277, 0.02298465769968, 0.0388331348008335, 0.209813218721952, -0.183819922143654, -0.181187462435566, 0.439859006441802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000295237250846717, 0.0258677865545683, 0.0261981528295215, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.121961990153498, 0.2250337245264, -0.197896745384657, 0.0720041127838627, -0.00717468642842238, -0.00405343007898562, -0.00404133581582018, -0.00709146953368325, 0.00176428765404602, -0.00456258703054669, 0.00724460448462892, 0.353061458146974, 0.000103788161143004, 8.21838039893621e-05, 0.000147945230318779, -0.034771966172023, 0.000101147795129592, 8.06363412486129e-05, 0.000145593936764071, -0.0342850300686168, 0.0367446701898163, 0.0242440923895317, 0.036388205229727, -0.0791788655558158, -0.0786453959092754, 0.104822079207859, -0.000745002803480525, -0.00088752778682321, 0.178424152469219, 0.00289858008214561, -0.385626002220497, 0.513979475619877, -0.000726049966661006, -0.000870816268068807, 0.175588457403319, 0.00282484033908921, -0.378364938100431, 0.500903861562423, -4.27115106568033e-05, -5.12277116192757e-05, 0.0103293831195581, -5.08825635930827e-05, 0.0068153154561942, 0.0102291763923664, 0.000461254537812717, -0.0617813836177234, -0.0613651299539456, 0.200412591091127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299453386201053, 0.013710902622998, 0.014002682081672, 0.192230415140459, -0.0792712548026676, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.0775772130015773, 0.182572154863326, -0.231653156327065, 0.180871468758637, -0.00146630027813794, -0.000920673795231179, -0.000919650531979695, -0.00146020247167458, -0.184439512927778, 0.48729939001709, -0.741538613135987, 0.886876346755305, -0.00348612303332075, -0.00245735051523503, -0.00294386828509704, -0.00715988564968112, -0.0033974362247954, -0.00240040868105158, -0.00287885247894111, -0.00700687753076344, 0.00891143980381057, 0.00638415719932293, 0.0088808686042026, -0.0239288085613584, -0.0238732528442573, 0.0422823954558636, 0.0237853312506588, 0.0204361518344431, 0.0435460183840246, -0.0765978577452832, -0.117058944746748, 0.207325437623335, 0.0231802335251373, 0.0199626044256033, 0.04258429754058, -0.0746492117914782, -0.114346449732259, 0.202051088091408, 0.000438133590394814, 0.000377316628029515, 0.000804893149832283, 0.000376440608824062, 0.000576625608242179, 0.00080213191823702, -0.00364366602223475, -0.00558130841108475, -0.00556835024016858, 0.0208710379051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0107425993815028, 0.0254129579368256, -0.0100835618309505, 0.0195251039488213, 0.00276855422334102, 0.00354739278284631, 0.018497012182256, -0.0413981115341341, -0.00476624355041156, -0.00338273614995181, -0.00435470127501957, -0.0137973375736296, -0.0603965005827018, 0.0315784943674164, 0.00779631465864186, 0.0116923912438849, -0.00527925397357789, -0.028919560674281, 0.0792937759693211, -0.0676531927685028, -0.0668972246841803, 0.26996967643304, -0.141961339914384, 0.057331901500994, -0.0222957897716069, -0.0635582267339032, 0.135372028365772, -0.0987005432142832, 0.0127562315865692, -0.0084449413101165, -0.00445839259329846, 0.0114632796231688, -0.0162280695445271, 0.0315560665716392, 0.109055095339958, 0.15377203670886, -0.0218610650020315, -0.208732280105511, -0.0795719254745861, 0.154730479224275, 0.0363463430762803, -0.036202132415786, 0.02084635657388, -0.0695671764823022, 0.0187334020168056, 0.0515692280558871, 0.460570658542209, -0.458743261526413, 0.26415917979114, 0.649423009457742, -0.174879920823444, -0.0923254899097835, 0.262336456257311, -0.0706432910926393, 0.10000665415058, -0.135750409459011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0106226666604083, 0.0277849136316368, -0.0118196797021562, 0.0197079603842469, 0.0153251463175157, 0.00682473684164847, 0.0170656692030985, -0.0431419561966857, -0.026019057404776, -0.0070876321849268, -0.00629024608249967, -0.0143785334928046, -0.057876558781076, 0.0213437702446785, 0.00757530613557611, 0.0113613654920691, -0.0217181624512599, -0.0244158730639453, 0.0837575252759869, -0.0705030005191933, -0.048309686479901, 0.0735262174169137, -0.1008686920674, 0.0557087659591239, -0.0161008564820601, -0.0271010761760104, 0.104754249861408, -0.0945824300406852, 0.0606169663210656, -0.0278519033674186, -0.0194533184251785, 0.0205729256103858, -0.0186022939508756, 0.0359312466038148, 0.208816727025423, 0.370860928123472, -0.0953864536822706, -0.273937984971186, -0.0912135817420507, 0.176183523808719, 0.0695953213086699, -0.13669587008386, 0.0990608304482567, -0.0912992093798988, 0.0336204732668519, 0.0587191894223526, 0.154807210805021, -0.304065071880222, 0.220350026027013, 0.27493940115423, -0.101245047457608, -0.0707151723594292, 0.780836385935845, -0.28753905994854, 0.259996376636918, -0.19204741754843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00262086915298639, 0.0300547935497049, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690788, -0.00648860340814751, 0.027528864934527, -0.0629779646757724, 0.0247338267998054, 0.00750215134912611, 0.00917493645108301, -0.0489494116020339, 0.00658120841508749, 0.00337457711054276, 0.00506138536202277, 0.00953046266998899, -0.00904585198043104, -0.0556826593749888, 0.0449879363356469, 0.00740752011267537, -0.00240693191785941, -0.0250468724285157, 0.0248177503627264, 0.00246880960967885, 0.00278290510283709, 0.0564773593641097, -0.0799936001014608, 0.113516362413504, -0.0185639631595196, -0.0167784696518061, -0.0542269556656959, 0.015631310584595, -0.0289919659842307, -0.0415161074774567, 0.137785921551927, -0.0822707305417841, 0.402484695490357, 0.0766458066681745, -0.14215779334252, -0.0138366637603087, -0.159308678962163, 0.185509533264766, 0.134141800340848, -0.0886182134630819, -0.0473789501690625, -0.0107545004524868, -0.123822135860403, 0.144186661900358, 0.0356926225918723, -0.0235796481027299, -0.0213117429016787, 0.615646310841459, -0.406714954274355, 0.117238515266376, 0.342463929443952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0112132650061803, 0.0291131058185437, 0.00962857943557113, 0.0118223838397412, -0.0386200930353357, 0.0549301045311347, -0.0255353246076023, -0.0336121174078452, -0.0994794309404827, 0.112846675863042, -0.0356794946677952, -0.0112023885451424, -0.0323328431907147, -0.00410083987857553, -0.0027891494071221, -0.0041834894607706, 0.0538868521712184, -0.101042221662702, 0.0849937731483473, -0.0549292461438857, 0.0175143255728482, 0.00367186688349686, 0.00664416170108435, -0.020513118376943, 0.00583724844800679, 0.00513055372915007, 0.0136495564365597, -0.0528386438915603, 0.120828272253817, 0.0181593912005342, 0.0196022074155316, -0.162415639580523, -0.0387405065266482, 0.0815009178862219, -0.108188894132857, -0.0432583250009813, 0.0961165087027927, 0.386897800957663, -0.189958312030145, 0.399627629543894, -0.0360576518771373, -0.0604431390604196, 0.197458726781111, 0.128946934255838, -0.265421203189447, 0.133189585327345, -0.0117194719847802, -0.0196452524780155, 0.0641781118900006, -0.00468592208119778, 0.00964538694945466, 0.0104117408727183, 0.138067294932718, -0.284194329656931, -0.067788005584599, 0.606288622857957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0122972972658716, 0.0224445447174005, 0.0280757815135754, -0.0295941247801589, -0.14266986579011, 0.291843625603676, -0.302869456861528, 0.168138269227149, -0.104568501634171, 0.189850631265638, -0.162829463999105, 0.0560378329736123, -0.0139990053434684, -0.00513509550091869, -0.00424389085237565, -0.00636565806912736, -0.0683914171489398, 0.159071760349637, -0.206289585296183, 0.274773179699455, -0.00915583372768228, -0.00430258606700036, -0.00537660975155931, -0.0312130576026595, -0.00305149496021577, -0.00231316749585608, -0.00349760168066442, -0.0228773094223896, 0.0705466934159364, 0.0299544723214314, 0.0361434486839319, -0.148259144018291, -0.0919091466194166, 0.185649879114551, 0.0591095569907133, 0.037949493422076, 0.177224025148591, -0.187830363035947, -0.45066283116216, 0.910306571261336, 0.0197002829695773, 0.0204025052145794, 0.115288086146479, -0.0626008972232352, -0.242286521734026, 0.303390821313914, 0.0026373560130351, 0.00273136532565333, 0.0154340791804501, 0.0016932342207212, 0.00655338578226118, 0.0079073989414835, -0.0232618994971411, -0.0900313728410427, -0.0558124539406071, 0.276242777973244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299283676160425, 0.0111030516956888, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.0625327818570342, 0.146258539859399, -0.18384166808212, 0.140764808621599, -0.0026897651654424, -0.00148258887390951, -0.00138523266460875, -0.00207782821502187, -0.179896704701628, 0.459596310372117, -0.662594871472995, 0.690219303679269, -0.0077380195685296, -0.004658821132104, -0.00499260080123145, -0.0101883216251351, -0.00257895986512167, -0.00179668352082445, -0.00206072672104519, -0.00439564015111291, 0.0162462241769462, 0.0101844496336546, 0.0131181816702361, -0.0432160109691647, -0.0373477023700653, 0.0748861467390761, 0.0510514100330863, 0.0367063907025695, 0.0643230528044012, -0.155757438084703, -0.183128903994627, 0.367193083012778, 0.0170146296952578, 0.0141558916760702, 0.0265497360935653, -0.0519114972451435, -0.0706240215419469, 0.122379662580787, 0.000731861863459579, 0.000608897016658701, 0.00114200189365344, 0.000526214799611827, 0.000715899315482366, 0.000922121235404261, -0.00576626720337998, -0.00784483208536737, -0.00677958116209442, 0.0287680203061012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00674620730936916, 0.0302500012368685, 0.0100401662714877, 0.0195251039488213, -0.00508376488671077, -0.0317222402070977, 0.0822967853898159, -0.068632037336036, -0.0053880427370123, -0.00355870072593558, -0.00406902438226485, -0.00918403835795026, -0.113191271384467, 0.147807356790049, -0.0651442148090811, -0.014291379808519, 0.00197276041282748, 0.00282759490804088, 0.0246420043988715, -0.0450325661822801, 0.0414434833137073, -0.117441550053527, 0.394513248650746, -0.0700756553903234, 0.00554578525152277, 0.00580669741102546, 0.0442577376376678, -0.0742698835373354, 0.0222480575010767, -0.0351083038449272, 0.0265381887482213, 0.0177577186477457, -0.048060307798489, 0.0348231154916578, -0.0176773769273058, 0.212615825443168, 0.130126061606394, -0.107540712446678, -0.235656571469201, 0.170749967708241, -0.00236550908394925, -0.0105124273528508, 0.0145979510551169, -0.0143906266881722, 0.011651637796144, 0.022849012122038, -0.0496942941533091, -0.220843648702357, 0.306671776781995, 0.597701424519648, -0.483940043727635, 0.365807823698724, 0.0899663991696789, -0.072842963663977, 0.197145552539167, -0.0997158754837055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0108682780791433, 0.0300983577029971, 0.0110939404354586, 0.019707960384247, -0.0231802053744833, -0.0276298646655862, 0.0870824133797189, -0.0715230777133199, -0.0269350059128869, -0.00688995031957079, -0.00551966637194169, -0.00957090470710663, -0.099328660248408, 0.105874942979701, -0.0269115200303895, -0.0114388293177886, 0.014843250115547, 0.00721310365350023, 0.0237118389394893, -0.0469295077882569, 0.0547376953425484, -0.11084070314001, 0.115608731683717, -0.056088598307651, 0.00732475842426724, 0.00702557127231322, 0.028828893208499, -0.0651740009484615, 0.0976912073872444, -0.124711701733311, 0.0524233707828873, 0.029928683173966, -0.0631847155811981, 0.0396512647545376, -0.102273132930751, 0.535746834338048, 0.257050201911992, -0.128570110450796, -0.309816855637988, 0.194424079547109, -0.0136857422900748, -0.0339579907193818, 0.0640995944875301, -0.0172046885375794, 0.0196375549684065, 0.026016977982559, -0.0504691348713493, -0.125227435768643, 0.236381119183879, 0.264377148370073, -0.301761974485488, 0.126847598555409, 0.243941787386094, -0.278436906801433, 0.587829296106843, -0.141069013725581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0100304424671003, 0.0286160770881658, -0.00170955493305559, -0.0116539403654932, 0.00630079692715642, -0.00613847546289112, -0.0581932607657199, 0.0456388471838218, -0.0578628584901556, 0.0216383431733446, 0.00606898946781369, 0.00610719045242122, -0.0745598627704426, 0.0516368564971356, 0.00152770678244041, 0.00108644437579405, 0.0278670398224952, -0.0165823879066067, -0.0112119814106071, 0.0299457000850141, 0.0359083999511923, -0.0395715317875219, -0.00282231830132802, 0.00532721841410366, 0.00480510466139413, 0.00412692477588717, 0.00994877186000785, -0.0489220790330339, 0.164640818162663, -0.134686083023702, -0.00625001174450559, -0.0727264094622995, 0.0933158150499534, -0.0319935495606554, -0.126171301109485, 0.24882196074617, -0.0306460030495001, 0.134356329875994, 0.457560220603033, -0.15687561199579, -0.0168836903877483, -0.0259497034408977, 0.108028244942132, 0.0179789750546523, -0.0477190678644035, -0.020992406664865, -0.0217556766329358, -0.0334377937414927, 0.139201057956504, 0.0429042901956703, -0.113874830422634, -0.00528428039161075, 0.136797588383317, -0.36308262200192, 0.465874103411457, 0.251557919288668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00537863848136876, 0.0243807773710823, -0.0114222456646251, 0.0118223838397412, 0.0552995939385817, -0.104936601954282, 0.0910163993406658, -0.0557239934719332, -0.0812967864767636, 0.0892023530796907, -0.0267723918023991, -0.00745674051607525, -0.0438056716503966, 0.0115541664574629, 0.00399812922953625, 0.00398736235826665, -0.0220790357715204, 0.0324894082074784, -0.0161003738189838, -0.0365630181088649, -0.0118969892080665, 0.00420827497900502, 0.00240439388633129, 0.019551438299029, -0.0015920029402018, -0.00123786029074273, -0.00204387781190549, -0.0287428711768687, 0.15834431170101, -0.0485677550391045, -0.0249264224083987, -0.202042477253413, 0.0919140623426248, 0.0899388353673571, 0.0576723909467998, -0.0292076635307708, -0.122223005070746, -0.121504250912767, 0.450686934679817, 0.441001702974336, 0.00771746652451479, 0.00859140789289696, 0.103896823889261, -0.0162591661904661, -0.132569155480525, 0.0590129145694343, 0.00415845224881602, 0.00462936371142377, 0.055983395532035, -0.00210601072884674, -0.0171713641699444, -0.0088128569311849, -0.0288618673204911, -0.235325313207767, 0.107055238101477, 0.445351148958013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0265225731168816, 0.0168888172596302, 0.0116134748343782, -0.0295941247801589, -0.064816550186493, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.0776057232015646, 0.138298675897829, -0.115271030719205, 0.0373009361247858, -0.0172240947344066, -0.00244988539799068, -0.00155992255535774, -0.00192502052858169, -0.136406455745618, 0.28376541171853, -0.302860847075891, 0.182899592666262, -0.0302745418665174, -0.00502674905678547, -0.00409850995120558, -0.00943905186116202, -0.00405120647096809, -0.00292119558198622, -0.00374060763022851, -0.011301503148731, 0.0851979215757079, 0.0138880133222227, 0.0124916450858427, -0.174002317425163, -0.0400671452317115, 0.204870501421384, 0.174811675791853, 0.0364890940310545, 0.0612509238451517, -0.457170278774762, -0.196463287614661, 1.00455203413528, 0.0233925320915247, 0.0212049137663461, 0.055902187824698, -0.0611765225010697, -0.114170745608983, 0.134424749317638, 0.00519182313107984, 0.00470629521224723, 0.0124071336395171, 0.00108370863424559, 0.00202247231023188, 0.0018191231322438, -0.0376873641955267, -0.0703340806951784, -0.0161956798487158, 0.202914971390713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026012438120785, 0.00773818110957636, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660334, 0.700205786033841, -0.0433476663950504, 0.10065772823538, -0.125149498779014, 0.0936984686307278, -0.00309114016851053, -0.00142932235848186, -0.00122935995028981, -0.00172256715936886, -0.152061844875105, 0.37398651422484, -0.507825635341389, 0.459436505525797, -0.0108435935745075, -0.00531054391871742, -0.00498843785959924, -0.0084463518753211, -0.00145104215453643, -0.000995259096535893, -0.00108695820213267, -0.00202823607778972, 0.0185363701620088, 0.00971194662742151, 0.0113836940204543, -0.0487726328729606, -0.0348245768128834, 0.0826392266190672, 0.0688705436214519, 0.0394086713457852, 0.0558182505772272, -0.197907251068728, -0.170757133079533, 0.405209157119218, 0.00921595422346878, 0.00738565375592561, 0.0121625460717835, -0.0264830807255863, -0.0320019178067209, 0.0542233129952796, 0.000657193539132855, 0.000526674049477552, 0.000867316232694196, 0.000376055172972315, 0.00045442170648298, 0.000532642719457561, -0.00487692496111058, -0.00589323248953571, -0.00420787879224329, 0.0211316366719474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00349338776214517, 0.02488002151319, -0.0283386095943201, 0.0195251039488212, 0.0724066424646242, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.00422947460640298, -0.00262076359232629, -0.00270891496297771, -0.00480223949501902, -0.122340482894467, 0.239188061792397, -0.23085120375936, 0.106433229417867, -0.000737780502525813, -0.000621569734380834, -0.00109018984479863, -0.0235470671456199, -0.0213408121217796, 0.0567285276972919, -0.0929049606346424, 0.521879511054613, -0.00108449112971505, -0.000849780857684139, -0.00144195494716536, -0.0304844426488357, 0.0225595452321249, -0.0513596430982685, 0.0738639646439447, 0.0162777402116469, -0.0552209333838474, 0.025071459227295, 0.00535047517400644, -0.0206694422318363, 0.362180965134431, 0.0065508985396514, -0.270767634055307, 0.122934171541447, 0.000271898877739571, 0.00030962369482512, 0.00562132130380538, 0.000332901640170602, 0.00405603955611882, 0.00624723266456584, 0.00786486339244141, 0.00895607985992328, 0.162600612797479, -0.0303827855030737, -0.37018075297663, 0.532383334467843, -0.00286561887202117, -0.0349144074259299, 0.118444338190401, -0.0375393217377867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00932686977392242, 0.0233014374907499, -0.0195929661997851, 0.0197079603842468, 0.097663716224066, -0.196492083346238, 0.196789453010076, -0.0984800038037924, -0.0200092686815667, -0.00483826550316644, -0.00354803175299696, -0.00500452794251923, -0.101599268420437, 0.168011170718831, -0.123020984383692, 0.0252004138115011, -0.00968427887924628, -0.00305739080499757, -0.00351420065220264, -0.0245389584623717, -0.0491729940243784, 0.106169413017207, -0.121847957868655, 0.123566481166194, -0.00249885878459802, -0.00191419023133737, -0.00300028765102167, -0.0253162076693629, 0.0944563035738691, -0.18115621457333, 0.19494018247284, 0.0264889132374167, -0.0746609519959469, 0.0285475625477054, 0.0596887115499924, -0.1794288585119, 0.955860192068402, 0.0262363368356128, -0.366088874082171, 0.139978727185895, 0.0030332434328499, 0.00323502747564234, 0.0235363446423736, 0.00133327046843705, 0.00660042969678832, 0.00711339789299553, 0.0154016280466348, 0.0164262087773373, 0.119508385589292, -0.0462984786883526, -0.229203196864413, 0.246643004355891, -0.0260291213928499, -0.128858614879586, 0.363197492232307, -0.0531072416281616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0190977808372875, 0.0202336576842803, 0.010730605592219, -0.0116539403654933, -0.0616020791184595, 0.199029865952139, -0.142163327346853, 0.062840050903269, -0.0395959199906358, 0.0141639916635128, 0.00370744537983246, 0.00319338727160609, -0.0702518096504062, 0.0825726724762284, -0.0302591072534671, -0.00555414878956787, -0.0433432647799657, 0.0190435548721708, 0.0069770474474959, 0.0156582995463821, -0.0769004177114554, 0.111019355037724, -0.0569446628060182, -0.0272339425429257, -0.00390790286721723, -0.00289524874373837, -0.00405247587042991, -0.0175051398490236, 0.148388770431383, -0.200999967524955, 0.105961643569101, -0.0611719587217119, 0.119201100977506, -0.0230342679574022, 0.19950941508979, -0.378262163481965, 0.519567159982301, -0.115119607905565, 0.58448487033195, -0.112945107132979, 0.0101386109265572, 0.00986461372661289, 0.0369750785261229, -0.00585011446225275, -0.0152426492298344, -0.00573961131991808, 0.0179881100148821, 0.0175019791423129, 0.0656018645113009, -0.0341047634675221, -0.0888609872432729, 0.0468450635759486, -0.0612886051163674, -0.159689304474723, 0.31117429138268, 0.0947022088715306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0283483789400613, 0.015605997316105, -0.00366448453027254, 0.0118223838397411, 0.0220838867907562, -0.0613915956629152, 0.29971631803346, -0.0767262716388461, -0.0508705214556543, 0.0541344006325364, -0.0155002588937239, -0.00389905316318794, -0.0377420092156797, 0.0230901301043676, 0.00135422408082117, 0.000832624912028887, -0.102213293977142, 0.124878367918977, -0.044513047634374, -0.0191184272948393, -0.0758343923526159, 0.0532647951908284, 0.00388900865659893, 0.00408265242310384, -0.00385372990326833, -0.00275466521408062, -0.00342928295650841, -0.0094044431423382, 0.132312644844221, -0.0925956420784965, -0.00762521338174627, -0.161063201374778, 0.158264250550675, 0.0647529036970646, 0.305221577224944, -0.265912605385222, -0.037389099749376, -0.462535110161497, 0.776025214555274, 0.317506232833687, 0.0155106605694832, 0.0137520514519181, 0.0329692767107086, -0.0235049735356564, -0.0401332560488798, 0.0161349385942963, 0.0115077156161064, 0.0102029630870851, 0.0244606642480474, -0.0100256563422968, -0.0171181742635496, -0.00140967467297019, -0.0574497025764956, -0.0980917344976779, 0.0963870996787595, 0.167658158602434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0290142634016864, 0.00987675823579526, -0.00428139506100088, -0.0295941247801588, 0.0263560489909356, -0.0712908034861193, 0.124137438646549, 0.383808683073226, -0.0448012227061955, 0.0784639261814983, -0.0636937172730276, 0.0195042770596187, -0.0136909752155197, 0.000869868924945477, 0.000405518905339028, 0.000409298247693925, -0.139268112846256, 0.263309019711056, -0.24058162956109, 0.0956363217673716, -0.0425594697223879, 0.00291910365757991, 0.00153171149747967, 0.00200693308424851, -0.00216277464680907, -0.0014977638098849, -0.00168582891470651, -0.00341147704251068, 0.0665553353467776, -0.00480255754658161, -0.00307299187277458, -0.132383333906543, 0.0131115658446456, 0.147499795774797, 0.223346204549639, -0.0181400485021896, -0.0150679586141467, -0.500033591404991, 0.0642906130875654, 0.723243311516806, 0.011349941900401, 0.00930748316716357, 0.0165840632254415, -0.0254105603546723, -0.0329868908038957, 0.0367535664289518, 0.00346847170388685, 0.0028443090090686, 0.00506798665030015, -0.000281707249352496, -0.00036570017124215, -0.000233998998075163, -0.0215539605020867, -0.0279804196188502, 0.00277124849002811, 0.0763899465305748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0171539738450265, 0.00422403562884657, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0235420783828847, 0.054296528623332, -0.0668187951761436, 0.0489939685728517, -0.00231153056297314, -0.000876578948905448, -0.000693434004591445, -0.000909320668327831, -0.0977269276576106, 0.232125215917278, -0.298701660335598, 0.240234638216594, -0.00959553257924186, -0.00374749699368091, -0.00309987463794521, -0.00445871865745578, -0.000487622959599539, -0.00032981625820266, -0.000344874274678669, -0.000575980404938965, 0.0137673862153516, 0.00589537889744869, 0.00628854087800187, -0.0358548234884833, -0.0207029333243843, 0.0594974335725777, 0.0588574919775215, 0.0263542534751372, 0.0308349249253133, -0.160282676136513, -0.101513754490212, 0.291736816703684, 0.00299100276046883, 0.0023194311519256, 0.00343051691130162, -0.00814519801426007, -0.00893419973878658, 0.0148253959652973, 0.000293678161388806, 0.000227738431127631, 0.000336832821567272, 0.000131498445572722, 0.000144236318875112, 0.000153855418475621, -0.00206529017058804, -0.00226534884361146, -0.00130803505644981, 0.00795527596810684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0296266593660007, 0.0106036055567762, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198177, -0.113874016814714, -0.00174302461810518, -0.00103224751682468, -0.000995395188472145, -0.00152025936541926, -0.0607551610563966, 0.145274827975367, -0.188334660306985, 0.151780397361144, -0.0051793298283753, -0.00333411005738363, -0.00365885144162144, -0.00745436569613299, -0.18053159698292, 0.469230738890094, -0.692276345467663, 0.744232604758411, -0.00241016220156675, -0.00167493200389371, -0.00190612042688969, -0.00397712490619114, 0.0107073556307269, -0.0291016110858971, 0.0519163834616727, 0.00720759150771045, -0.0269570575484029, 0.00956421589618282, 0.0345842460403177, -0.106971053214144, 0.25456426498465, 0.0264935041720337, -0.132179922471373, 0.0468967101986918, 0.000461712209768474, 0.00038183611104057, 0.000700919724644822, 0.000353697875660541, 0.000471819861894249, 0.000626088065400448, 0.0160935189181038, 0.0133093441036109, 0.0244313765371237, -0.0497781754902048, -0.0664022418603692, 0.118459567099648, -0.00366885739980123, -0.00489411984295746, 0.0183044599731062, -0.00453346276486155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0287142087112328, 0.00958841840105428, 0.00525730855264604, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.00799167084001682, -0.00185631097078638, -0.00128014616296269, -0.00158429842618397, -0.0488981962979721, 0.100408707642263, -0.104468874747729, 0.0565787251628145, -0.0252758904406241, -0.00632110314145245, -0.00488566882918293, -0.0077683717063151, -0.154654198992136, 0.341911353913746, -0.398704725867906, 0.277425364104441, -0.00206468956655653, -0.00142790422348565, -0.00160037367631385, -0.00320095002602272, 0.0436704701359279, -0.10181165164742, 0.145248246697174, 0.0115168069922353, -0.0368162525456528, 0.0108902736390701, 0.148706520787247, -0.388563452590705, 0.71220317547873, 0.0439538129017003, -0.180523018821064, 0.0533988371215844, 0.00198528590849256, 0.00162273463193132, 0.00285873514978321, 0.000586799320677437, 0.000753907637346639, 0.000712893814650169, 0.0121472595661697, 0.00992893703459032, 0.0174915853413357, -0.0317402430744735, -0.0407792081924058, 0.0581771181962354, -0.0138046925395082, -0.0177359836148668, 0.0566973513015144, -0.00641353363141414, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026266017636219, 0.00787931986789122, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169526, -0.227302951843895, 0.075723802663307, -0.0150561962143098, 0.00521607980877961, 0.00130030386482764, 0.0010109401899062, -0.0321897964657498, 0.0486197142564779, -0.0306355733076924, 0.00373028648217878, -0.0524224823609096, 0.0192586102361636, 0.00525321344488696, 0.00495699486804387, -0.112078045039237, 0.179511848166741, -0.123767382336513, 0.0182909049745174, -0.00149628249178247, -0.00102691121281143, -0.00112365340857551, -0.0021071928544526, 0.0658499558828104, -0.112715482697028, 0.096832772742812, -0.0258534416707462, 0.060335322035068, -0.00878707177583326, 0.243128686850451, -0.455369321869514, 0.474805099586672, -0.10444762263269, 0.295845278163648, -0.0430860995861488, 0.00324585602164082, 0.00260497492156465, 0.00431063789576666, -0.00139441358919924, -0.00169240546797375, -0.000575215033661144, 0.00693956449600749, 0.00556937564641004, 0.00921604331712917, -0.0129974986479507, -0.0157751171905971, 0.0135522494457503, -0.0176036557524683, -0.0213656288798231, 0.0498619145320431, 0.0114367792968677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.021469848095818, 0.0056992874500779, 0.00832487477036385, 0.0118223838397412, -0.0614326220634957, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.0182709161061164, 0.0190137982809258, -0.00526293094004171, -0.00123433495846104, -0.0163348457295087, 0.0140319672776632, -0.00196259356847567, -0.000733241121875036, -0.0709478783134304, 0.0769033452699533, -0.0226501029881937, -0.00605237789102644, -0.0634299145349292, 0.0567537957659611, -0.00844642404705089, -0.00359533878904313, -0.000846812331002474, -0.000575990819905359, -0.000612888851787795, -0.00106930375395286, 0.0560006137916718, -0.0543971191883839, 0.0103033153809035, -0.0658993199929187, 0.0866868718955921, 0.0247018231068585, 0.226500485285503, -0.234109161969772, 0.0505207745986586, -0.283611242802991, 0.425056183742285, 0.121121715799415, 0.00302386350863126, 0.00237595963988643, 0.0036658850375872, -0.00378631280488709, -0.00431386934521652, 0.00161701877171306, 0.00270344101158925, 0.00212419201925488, 0.00327743098393707, -0.0027942558659871, -0.00318358660367865, 0.000603000624105263, -0.0111516824754383, -0.0127054746021773, 0.0167133416449521, 0.0202473562137974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0143344773818665, 0.00339108928439712, -0.0107414954878784, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.0152353726346625, 0.0263431259843046, -0.0209745648569956, 0.00617452750875327, -0.00561039559867237, 0.00119544438383659, 0.000411420418441728, 0.000352254883283627, -0.0655314248951066, 0.115979237022268, -0.095656884604359, 0.030275877325964, -0.0241318165707194, 0.00526310839581187, 0.00187632953337014, 0.0017272294306981, -0.000322168490867562, -0.000217247209951019, -0.000225042499060171, -0.000367264997427107, 0.0269262600713353, -0.00647362037001924, -0.00299718572753333, -0.0525321970635773, 0.0169905218832951, 0.0562679610565774, 0.118546565081049, -0.0295236807499628, -0.014696254455307, -0.239579049519497, 0.0833104971211989, 0.275901578528233, 0.00158263957699841, 0.00121865954262184, 0.00176263378613846, -0.00319846707772647, -0.0034388372228091, 0.00368338599466492, 0.000582803868995825, 0.000448768946986867, 0.000649086377665744, -0.000145145625740712, -0.000156053562033304, -7.22503764696632e-05, -0.00326926866673852, -0.00351495966953611, 0.00113684563986334, 0.00922528597146977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00638882353038123, 0.00138044771170159, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.00766460049150907, 0.0175880306956051, -0.0214801029408943, 0.0155101676309959, -0.00090686000395606, -0.000288071461031635, -0.000213253491124327, -0.000265802822928633, -0.0357169332052307, 0.0827155276170134, -0.102424732574838, 0.0760518002123163, -0.00422595518496717, -0.00135478401778089, -0.00101686811553693, -0.00130332461042076, -5.64180322035167e-05, -3.77810915963453e-05, -3.83065599431423e-05, -5.93644300409327e-05, 0.0053739365343952, 0.0019227086862346, 0.00190448281304161, -0.0138893267054971, -0.0066492062394604, 0.0226969756645599, 0.025273323859613, 0.00916815545757849, 0.00933834822750578, -0.0662292251284659, -0.0326033938848811, 0.111291244539186, 0.000337408026586009, 0.000255673905629857, 0.000351786028768959, -0.000884184141232966, -0.000909216372900104, 0.0014857784201566, 3.99214342172282e-05, 3.02508185953477e-05, 4.16226103098802e-05, 1.44819065756884e-05, 1.48919053796354e-05, 1.47507410000213e-05, -0.000270158128668922, -0.000277806604307328, -0.000132993732949987, 0.000960724534063873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00337366876311383, -0.00634204581202929, 0.0208770933958505, 0.0195251039488212, -0.00350519620228997, -0.00213578148775578, -0.00215103292273897, -0.0036014832612442, 0.00186672700723241, 0.00270775846140369, 0.0252970714511431, -0.0453962493417858, 0.00205786663823844, 0.0029395353782773, 0.0272677169715597, -0.0487065445939728, -0.00203791177178548, -0.0492117221773474, 0.0992013086517275, -0.0738509092732364, -0.00224657951086666, -0.0534241146055902, 0.106929104926151, -0.0792361187978446, -0.0283178557954037, 0.628290543629044, -0.135565454749909, 0.0421979810464192, -0.000888311046095951, -0.00570497820444077, 0.00883182654289648, -0.00579324153221604, 0.00620921957215416, 0.00903250928257824, 0.0161444667353693, -0.022371811092961, 0.0143676720035996, -0.0227179316958211, 0.0101011981811169, 0.014694143970245, 0.203498998675296, 0.263102111421653, -0.0182154333959, -0.286356708329364, -0.118794431005032, 0.185217860295404, 0.224335855573074, 0.290041905135055, -0.0200805648288413, -0.310868080347518, -0.128962918095965, 0.199646358368677, 0.0939425841553133, 0.0389718679788598, -0.0417702048278293, -0.0424164434544873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0115772632577273, -0.0106853276693849, 0.0192875795853982, 0.0197079603842468, -0.0163810014243474, -0.00390242657177229, -0.00279689872237234, -0.00375319132544454, 0.0146717000428919, 0.00719541733809642, 0.0244226254420096, -0.0473085106547024, 0.00283917689101551, 0.00355123466570278, 0.0168179761255123, -0.0399568305836849, -0.0274010505067604, -0.0481217403864266, 0.105826965373029, -0.0769617882285367, -0.0053024822727362, -0.0237500598790077, 0.07287485865535, -0.0650020279883701, -0.0668371306827621, 0.207386421256723, -0.134368965523375, 0.058219289048321, -0.00535364888165083, -0.0177228274895517, 0.0365988305517867, -0.00694898923818481, 0.010031008601275, 0.010284847059337, 0.0358043028635583, -0.0767957177864585, 0.059539212022493, -0.0301110314791141, 0.0163185090590719, 0.0167314550889352, 0.451308792072928, 0.670583112662057, -0.109780279168362, -0.379545813158115, -0.142493838383863, 0.210897913990534, 0.0873344935774069, 0.129767107520561, -0.0212440024532162, -0.187321483324288, -0.0703265751992809, 0.145229106953919, 0.282395714198688, 0.106020532605796, -0.153042815009205, -0.0600069529033935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0031861443597021, -0.0102352418729337, 0.0163965439250798, -0.0116539403654933, -0.0318063021955915, 0.0112436886986537, 0.00289018334287377, 0.00239490987846133, 0.0285443214023187, -0.0170879000112391, -0.0117215303676542, 0.0301875416619842, 0.00193009838737015, 0.00202524321821207, 0.00540450880422626, -0.0271088739443334, -0.0126571512820066, 0.0143537935251024, -0.0723998288978304, 0.0491092861808115, -0.000855846139544357, -0.00170119926809102, 0.0333817769889972, -0.0441008898133744, -0.0107878343256712, 0.00689944426242858, -0.0507328584660814, 0.0395780045482836, -0.00682270690696091, -0.0129194301108831, 0.0565868352835749, 0.00737079936166076, -0.0229083726068188, -0.00829856919202048, 0.00573105683907222, -0.0797988402663336, 0.0920558261790191, 0.0455268719942116, -0.0372674873257957, -0.0135001655287293, 0.0722392598788916, 0.323635014986764, -0.139904331697434, 0.573860568794342, 0.151143347183348, -0.170167910286463, 0.00488464507640107, 0.0218834216346688, -0.00945999455336031, -0.0680134612436616, -0.0179133795644634, 0.0784602300632858, 0.229126016875703, 0.06034719059046, -0.187558480429118, 0.10700595273598, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.011801561675532, 0.00496641091476391, 0.0123418011338162, 0.0118223838397412, -0.0399845505836983, 0.0422013001459018, -0.0119330872043853, -0.0029241304429919, -0.0204347654762903, 0.0301742710270643, -0.0150525237472738, -0.0368583011689747, -0.000577804782105061, -0.000512427300870451, -0.000904019525330695, -0.0142508991010521, 0.0594964820405093, -0.120624902691672, 0.125434652322349, -0.0599613204849068, 0.00168229735160592, 0.0020484833999342, 0.00753331313448511, -0.0231834539600412, 0.02120514924013, 0.00258397885603963, 0.00538637983819945, -0.011848287343186, 0.00281071914707341, 0.00358016746981991, 0.049550160822038, -0.00596100303954837, -0.0595664075674239, 0.0233285664952788, -0.0112361529233053, -0.0298340045411955, 0.0806085190825287, 0.0496738192420155, -0.0969030134598642, 0.0379510614356346, -0.141630312498688, -0.0376329322111704, 0.0576357432941006, 0.626132323960991, -0.12223449693311, 0.478368417328807, -0.00400467878859447, -0.00106409286769033, 0.0016296838901411, -0.0106331416082054, 0.00207581794703548, 0.0287296932280313, 0.0583239313380664, -0.0113860858694689, -0.113777534921342, 0.189440364791817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00800383521292137, 0.0263496071105022, 0.00763236993753084, -0.0295941247801589, -0.0344990911194155, 0.0601371945948343, -0.048470472808498, 0.0146274102792548, -0.135681023269177, 0.282736312981598, -0.302623682224074, 0.184376690406239, -0.00158021534532769, -0.00122388284394236, -0.00162527582784919, -0.0050645794729812, -0.0455282927907742, 0.109434345863474, -0.150804331564209, 0.299945181214723, -0.000530247378601926, -0.000473709291275902, -0.000809912274627226, -0.00823909033431861, -0.00668370237087944, -0.00295758720151028, -0.0038078199674849, -0.0324034103825531, 0.00914001856619199, 0.0089095007528663, 0.0245045777907789, -0.0239713380659701, -0.0483955236813239, 0.0531398377109131, 0.00353768478630559, 0.00443980886007479, 0.0398642041456055, -0.0119454683360232, -0.0787301479845028, 0.08644822844364, 0.044592077486515, 0.0277197895493029, 0.187422412635166, -0.150571145206206, -0.491548893679025, 1.08966918597521, 0.000519343703536367, 0.000322839817682227, 0.00218282384204094, 0.000651778469724248, 0.0021277714616434, 0.0058521956223056, -0.00486751435712158, -0.01589030417437, -0.0320807954006473, 0.0863145549122681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302224845101158, 0.0261153899063016, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630083, -0.0503948504088265, 0.0367434731025109, -0.15273114932588, 0.375858140305486, -0.510844558915113, 0.463146916325963, -0.000571524833484989, -0.00040277380705034, -0.000446079687283155, -0.000841390117526194, -0.183081952923273, 0.47275516724247, -0.693290980381532, 0.753450370761892, -0.00068509850885292, -0.000506609750046522, -0.000605395551988326, -0.00136877883379726, -0.00863558164111836, -0.00513542221486795, -0.0055410313811158, -0.01171951264617, 0.00363208529783321, 0.00299171446345439, 0.00500199470056428, -0.0104469704798228, -0.0129905137821951, 0.0214351751990887, 0.00456844460258414, 0.00406019525351262, 0.00813727702558357, -0.0141780709602841, -0.0211330510483063, 0.0348708803444412, 0.0575846769898419, 0.0411575515467008, 0.0744784252336854, -0.178712824081337, -0.21422236704193, 0.439543117114766, 0.000215483698467197, 0.000154012870971922, 0.000278700643370751, 0.000191510670662804, 0.000229563095955764, 0.000383817842058131, -0.00172698194151808, -0.00207012653542065, -0.00257414408714927, 0.00898882818456473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0117859544381793, -0.0110271230805098, 0.0160091858217586, 0.0195251039488212, -0.00316207558373228, -0.00241577235429527, -0.00353354291864163, -0.0181912548602127, 0.00295045175569077, 0.00361626834907029, 0.0160892124049081, -0.0398420632543444, 0.0164288131844465, 0.00644900529020188, 0.0196160926625838, -0.0385628463970881, -0.00533638736500277, -0.021589474677939, 0.0708866405450281, -0.0648153237617094, -0.0297142669526364, -0.0385011904458152, 0.0864255424365171, -0.0627342855826571, -0.0650794963063691, 0.175306723361566, -0.129373925944914, 0.0585357554359558, -0.00599234830794822, -0.00596048830774325, 0.00876741507713471, -0.0186109023749109, 0.00895204339478104, 0.040041609157811, 0.0357749037316647, -0.0262610115094853, 0.014262887018428, -0.0819968258027644, 0.0145632415484495, 0.0651399463159162, 0.078353362005419, 0.119573754125016, -0.0213506983799166, -0.179587540573384, -0.0663105251505074, 0.142667995223337, 0.436290050931204, 0.665814943251966, -0.118885738214352, -0.320264119644222, -0.11825364884818, 0.173941927289884, 0.297586072438545, 0.109880054473008, -0.0528534831921603, -0.165028595825849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00868942826669705, -0.0116958193796848, 0.0205403356838658, 0.0197079603842469, -0.0201247738104086, -0.00584323645334007, -0.00577935460978634, -0.0189575391547739, 0.0148427436855897, 0.0063815168699526, 0.0144742293073117, -0.0415203612920179, 0.0145079970177743, 0.00650803540571892, 0.0149243543543369, -0.043082752293691, -0.016722944588233, -0.0161405937908933, 0.074458681419119, -0.0675455897618918, -0.0163457939686737, -0.0164605936176504, 0.0767742256020673, -0.070087297453317, -0.0358001777363248, 0.0412250887240755, -0.0838466866383686, 0.0516918998203714, -0.0239827552691316, -0.0217039465904848, 0.0480958691343097, -0.0208020433238822, 0.0181915227080133, 0.0455932912233093, 0.0606589183534293, -0.111649968396047, 0.0782426680475981, -0.107010375739816, 0.0295940856905751, 0.0741714582685036, 0.132853752011542, 0.279624171526345, -0.0854504023725404, -0.23437163581397, -0.0741175462222494, 0.162448602623015, 0.129857516831937, 0.273317840187487, -0.0835232494105542, -0.239018235798383, -0.0755869842279402, 0.167500490591787, 0.880805880216167, 0.278545525839862, -0.243589881034135, -0.233467551046818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00515804432869896, -0.00575929267843161, 0.0267098865309275, -0.0116539403654933, -0.0579732173172457, 0.0239119304978303, 0.00786274267358271, 0.0120967981262487, 0.0151788194266245, -0.00831999241146459, -0.00467132225531164, 0.026494125876669, 0.00518416692938206, 0.00268262576567058, 0.00458054935471411, -0.0433658185196248, 0.0180568823364594, -0.0159481203670527, -0.0486788032710563, 0.0431008137183392, 0.00616713919741507, 0.00514217279233482, 0.0477328791988057, -0.0705477914032106, 0.0135071248184836, -0.0030550085641488, -0.0166083283299719, 0.0184711533395947, -0.0167792370213337, -0.0140070776838755, 0.105619250345273, 0.0148371797724692, -0.0546971571990117, -0.03678801247366, -0.0321631653551499, -0.145964620231555, 0.171822073141542, 0.154614928229379, -0.0889816857642899, -0.0598469743850444, -0.0704430166245737, 0.0867188215718507, -0.0597843133070971, 0.338634019363569, 0.0528647758526339, -0.131075451218334, -0.0240590751445703, 0.0296179059986185, -0.0204187065694204, -0.109186198802953, -0.0170452571090386, 0.128528399601262, 0.682935776066139, 0.106614352543001, -0.393033048742583, 0.416325384375381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0103543496131472, 0.0114965700457507, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163357, -0.0147699151361857, -0.0456650504879512, 0.0640339164783741, -0.0289985647742542, -0.0323487245733812, -0.00652193812105335, -0.00376718935977031, -0.0051210232234846, -0.0331151410630413, 0.0487160015083047, -0.0883080091353924, 0.0683057070994252, -0.0526251123873066, 0.00695767866119337, 0.0051952623030589, 0.0120624974055016, -0.0538719236429518, 0.0152385459635856, 0.00364434309255459, 0.0062245751600149, -0.0232376234689826, 0.0301281169318006, 0.0238936466936195, 0.127872945220575, -0.0580053142400195, -0.181106971901399, 0.10341681503917, -0.0415491378876407, -0.0562811451289639, 0.208024526539325, 0.136630693123354, -0.294625982202666, 0.168239137275043, -0.0909999553413715, -0.0394797780221851, 0.107346286348629, 0.299245365959432, -0.20667256059336, 0.368473445107362, -0.012996724440536, -0.00563854997513987, 0.0153313273413632, -0.0176049509478884, 0.0121587857504658, 0.0650708434821411, 0.140795688796734, -0.0972399536775845, -0.303607243389941, 0.737050889895456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0142799617871943, 0.0286331249853375, 0.0261981528295215, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.144761735858263, 0.294022599521717, -0.301560576395922, 0.161818385181665, -0.00851593238442533, -0.00529609529109965, -0.00615830015627283, -0.0159370083754822, -0.0786155180524534, 0.180183183238993, -0.227528563330549, 0.263247185749171, -0.00462473340853488, -0.00324555768787781, -0.00464646010384096, -0.025926427330224, -0.0101289835370483, -0.00485254778273584, -0.00597444597327712, -0.0303422121712233, 0.0480095304404495, 0.0369438237145966, 0.0817770038721055, -0.120654962207571, -0.176743667493169, 0.235571815733862, 0.0294212418863076, 0.0278742507862943, 0.13303535382684, -0.0910346124745032, -0.287527730636603, 0.383229739093874, 0.0644377196220501, 0.0416757755850922, 0.17105764737271, -0.199381890716992, -0.429892852309206, 0.839340860388866, 0.0037906927549226, 0.00245167056644538, 0.0100628481015949, 0.00359137526936535, 0.00774346432721709, 0.0171405460669788, -0.0325561061198114, -0.0701951279005209, -0.102826639852128, 0.335821880299531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0296919171784483, 0.0243834140019697, 0.014002682081672, 0.192230415140459, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.141645882360695, 0.345411287467402, -0.462849575846567, 0.406481350416947, -0.00267727324386314, -0.00174183802117235, -0.0018374878434761, -0.00328158485493622, -0.17784500213963, 0.452155668420225, -0.646858537591111, 0.661266465096995, -0.0033614790479452, -0.00228012796141589, -0.00256799349356265, -0.00533850326641945, -0.00736223322060804, -0.00445019405091754, -0.00475113027769321, -0.00953910730364736, 0.0168597007475028, 0.0127557271340277, 0.0199584129431104, -0.0478104381081747, -0.0536515356544619, 0.0950233075549248, 0.0220699483121883, 0.0178268522440295, 0.0324684740451168, -0.0668177993242807, -0.0872806619365436, 0.154584525524274, 0.0483370874319138, 0.0347932015858053, 0.0600710050445716, -0.146342789854297, -0.170348282676651, 0.338567432066033, 0.000913627623414949, 0.000657632301918498, 0.0011354124232728, 0.000737976565159953, 0.000859031324028495, 0.00134409443819907, -0.00714306605782547, -0.00831478638071599, -0.00933062058445992, 0.0349726090309802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.16214011086512e-06, -0.00888246788236123, -0.0100835618309505, 0.0195251039488213, 0.00276855422334103, 0.00354739278284632, 0.018497012182256, -0.0413981115341341, 0.00207617681188816, 0.00204132940906999, 0.00495444159751798, -0.031007435542924, 0.0263087298629871, -0.0190562037323707, -0.00887004256151609, 0.0262768860950638, 1.34764571110791e-06, 2.34589687822702e-06, 0.0351417498325349, -0.0504430947992084, 1.70769882252997e-05, -2.1899399798087e-05, -0.0629150249458778, 0.0427474066498151, 1.27907673086741e-05, -5.86577422600001e-06, -0.0362041359827394, 0.0320568669764367, -0.00769781311112095, 0.00960799969344603, -0.0100195650228905, -0.0130420310882865, -0.0364701390904392, 0.0709175009299217, -8.84633105629031e-06, 0.068149339329645, -0.0162998925724395, -0.0925068516383988, -0.0593298559286742, 0.115369044865993, -6.62595538413911e-06, 0.0182538627477391, -0.00937969153956921, -0.069288190527517, -0.0158915560681605, 0.0864121113201357, -8.39622469954253e-05, 0.231307825632447, -0.11885681869661, 0.646818621763509, 0.148350740803414, -0.154705447658132, 0.261284405700932, 0.0599267458324434, 0.167576410526232, -0.227470527214668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00681295111639288, -0.00438186087957981, -0.0118196797021562, 0.019707960384247, 0.0153251463175156, 0.0068247368416486, 0.0170656692030986, -0.0431419561966857, 0.00496290698942569, 0.00178381589036753, 0.00264840080550217, -0.0323135857262809, 0.0110394459580145, -0.00537180196847258, -0.00318945341855541, 0.0255329556369081, 0.0101073362006732, 0.00568346715796629, 0.0351451051021589, -0.052567948285717, 0.0224826683241416, -0.0171152528866812, -0.0423250421086929, 0.0415371758142848, 0.0168396543479753, -0.00265609563809114, -0.0110627097316331, 0.0134514304724192, -0.0152560834038924, 0.0117265687773733, -0.0437183995785949, -0.00866187936743291, -0.0418058504080336, 0.0807500582702355, -0.0486078465011177, 0.155615226861536, -0.0711213725288543, -0.114945842078815, -0.0680100252848929, 0.131364712142299, -0.0364075705728993, 0.0241497410540252, -0.0185893518541936, -0.0860951298768102, -0.0105543945334427, 0.0983929627081788, -0.0809846746389744, 0.0537184681949511, -0.0413499881472977, 0.259267781302797, 0.0317836149105708, -0.118494062764006, 0.736328501815995, 0.0902664474228089, 0.435663605754062, -0.321804755462983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0117909391625214, 0.00649963867312386, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690787, -0.00648860340814748, 0.027528864934527, -0.0157527489567285, 0.00761282852421954, 0.00331676160313948, 0.0206192860832164, -0.0122437712383399, 0.0020256311953557, 0.00149192775061593, 0.0113747003386201, 0.0347177461769004, -0.0226829837593202, -0.0194855585338847, 0.0335435867035136, 0.02698425165464, -0.00603551746377228, -0.00876488846392625, 0.018504435386129, 0.0202113674476523, 0.00308515890396074, 0.00608305867108557, -0.0149188861614175, 0.034939219423738, -0.00820727779862287, -0.0377070803306021, -0.0239741743450799, 0.0351290133199048, -0.0651550715289332, -0.104103979779745, 0.0482167279666837, -0.0613421198629882, 0.140845268185823, 0.0571481039328647, -0.105994687797817, -0.0779745095406278, -0.0246468125557042, 0.0425730134126712, 0.105493956438009, -0.0292122395057675, -0.0793906612641801, -0.060605425748845, -0.0191566523097156, 0.0330897317403691, 0.0280699674769361, -0.00777283022214886, -0.0357110775063414, 0.484166493457687, -0.13407012159853, 0.196451023490723, 0.57385057542787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000396180986240135, 0.0218166735098089, 0.00962857943557113, 0.0118223838397411, -0.0386200930353357, 0.0549301045311348, -0.0255353246076024, -0.0336121174078452, -0.0821315304265295, 0.106627813860814, -0.0421122676094755, -0.0251756789225905, -0.026694421843679, -0.00387484689204712, -0.00329201428801497, -0.00940176168823127, 0.00168506853674352, -0.00261416436528543, 0.00143665582940386, -0.0409559557664376, 0.000547681628745762, 9.49985402428899e-05, 0.000112306740668442, -0.0152948461494824, 0.000410216847388376, 0.000156669398596337, 0.000218004723301986, -0.0325268279583357, 0.114169552842125, 0.0214334073109032, 0.0440530051317887, -0.191698087141148, -0.0870634463072912, 0.183161022520475, -0.00279906307588785, -0.000731198562915532, 0.0716657109865357, 0.00653976121473003, -0.141635372249502, 0.29796752490964, -0.00209651514742707, -0.00120587578307144, 0.139114209894574, 0.00489832064355598, -0.233581784872353, 0.223179475587968, -0.000681410165577654, -0.000391934214267949, 0.0452149544041173, -0.000178004610942367, 0.00848834483592489, 0.0174464607140271, 0.00524477673604107, -0.250102923105532, -0.113589148133034, 1.01592911016151, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0236731291383542, 0.0302602001667236, 0.0280757815135755, -0.0295941247801589, -0.14266986579011, 0.291843625603676, -0.302869456861528, 0.168138269227149, -0.148692369932632, 0.290316139028518, -0.279210915864665, 0.125936579040831, -0.0199060448288922, -0.0078524948241205, -0.00727718818584325, -0.0143058565620667, -0.123983018812676, 0.264604231380492, -0.294894932128271, 0.204874433632237, -0.0165981047421912, -0.00715703702973174, -0.00768596711021485, -0.0232728591097202, -0.0124320806881215, -0.00659796760180498, -0.00764573936306593, -0.024255273227939, 0.10787872295819, 0.0513642644623307, 0.0812269504449895, -0.254226540885044, -0.206551947025893, 0.417220107102282, 0.0983244220117464, 0.0542495311672541, 0.132140523387534, -0.268507118668092, -0.336020030755683, 0.678736343273605, 0.0736455858695549, 0.0500118481387931, 0.131448910284485, -0.201113453401184, -0.309771944349812, 0.508377620011562, 0.0098592303992033, 0.00669528699742786, 0.0175975936224402, 0.00543973324107439, 0.00837873704784131, 0.0132500536336067, -0.0747318512681791, -0.115108315633292, -0.0935222838266846, 0.462886930472143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0273991946635944, 0.0208837824772988, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.120035982431373, 0.28854446919111, -0.378174407346313, 0.316347679887784, -0.00516318952324453, -0.00292490831688951, -0.00284951473428292, -0.00466960557446215, -0.161228140099431, 0.400101823491237, -0.550948270007868, 0.514636432413085, -0.00693501587567287, -0.00405573932646482, -0.00415135234621329, -0.00759654426569485, -0.0051943687715511, -0.00321746450671829, -0.00338045124712304, -0.00629128356187371, 0.0320511755142853, 0.0209500829955218, 0.0294811350675107, -0.0888981780171578, -0.0839333290017821, 0.16829532188209, 0.044442833384582, 0.0305213990124248, 0.0479600994071265, -0.129512458891892, -0.13654327736291, 0.273783907869764, 0.0332879505960335, 0.0242129757642645, 0.039053967076737, -0.0970056138378367, -0.108321347400084, 0.205065800379851, 0.00143183730650071, 0.00104148922898348, 0.0016798549032329, 0.000983323393772454, 0.00109802835866266, 0.00154515485006029, -0.0107752678944204, -0.0120322060831623, -0.0113602228338171, 0.0482052081612838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.010943732272892, 0.0101644112236962, 0.0100401662714876, 0.0195251039488213, -0.00508376488671082, -0.0317222402070977, 0.0822967853898158, -0.068632037336036, -0.00206888955864436, -0.0016509237082731, -0.00261316748166393, -0.020639741246323, -0.0434629513771954, 0.0685695955840055, -0.0418362555160873, -0.0321177209637212, 0.00265561165013045, 0.00277042286983628, 0.00774815294057066, -0.0335768632939074, 0.0557887295356487, -0.115066962106936, 0.124046280414075, -0.0522493142351214, 0.0167773679286114, 0.00365371796926715, 0.00645575293301409, -0.0212633870913165, 0.0103211392078776, -0.0225468980583686, 0.0596405772233313, 0.0114041815824651, -0.108008294229385, 0.0782597007030629, -0.0173199524369121, 0.0668525135558674, 0.0970236731312838, -0.0338138843694442, -0.175708585038306, 0.127313382496836, -0.00520863652853855, -0.00212276595816218, 0.00504941268934663, -0.0101688635658782, 0.00557926969439222, 0.038287006679738, -0.109422330078203, -0.0445947794744637, 0.106077377249782, 0.422354381832924, -0.231729827781458, 0.612966832642401, 0.0635730506039554, -0.034880121295448, 0.330347458639909, -0.167089166495659, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00766332463985556, 0.0155122697307477, 0.0110939404354585, 0.019707960384247, -0.0231802053744833, -0.0276298646655861, 0.0870824133797187, -0.0715230777133199, -0.015600616015244, -0.00470230194600554, -0.00496770894873694, -0.0215091650261775, -0.0575306459131931, 0.0722582786979662, -0.0242204129508016, -0.0257070439035826, 0.00895970133038225, 0.00338168273878045, 0.00558144257295922, -0.034991247469186, 0.0330408366068705, -0.0519648837128467, 0.0272127142256648, -0.0418203837218571, 0.0099363845894425, 0.00296439209504603, 0.00463130748587523, -0.028145727680784, 0.0666729850431343, -0.112240739741459, 0.117813620332084, 0.0269358648165764, -0.141998119943556, 0.0891102380811219, -0.0479481933002696, 0.126107477245156, 0.191659952362795, -0.0302636455110632, -0.231003451275631, 0.144965106220525, -0.0144194801926217, -0.00719393524937935, 0.0326184358075964, -0.00910119875154589, 0.0131778377235277, 0.0435954169258845, -0.0531749520918536, -0.0265291922543358, 0.120287537290538, 0.139854259344908, -0.202498240605752, 0.212552508933873, 0.129044050170326, -0.186845886872036, 0.984997691207882, -0.236382660307924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0024221724630117, 0.0235602360807905, -0.00170955493305567, -0.0116539403654933, 0.00630079692715646, -0.00613847546289097, -0.0581932607657202, 0.0456388471838219, -0.0521782100505411, 0.0221414434455208, 0.00763849492268663, 0.013724989570723, -0.0672348425655044, 0.0528374343948943, 0.00192278806264412, 0.00244161989758014, -0.00601102036289154, 0.00300848299556, 0.00140208737896742, 0.0223279009667123, -0.00774557056222397, 0.00717932068418056, 0.000352938229631996, 0.00397204289231752, -0.00232932866944801, -0.000942363494894066, -0.00127304603535341, -0.0328933134587859, 0.168468784091727, -0.169517341690776, -0.0140459588870734, -0.0915342352082088, 0.209713222196366, -0.0719006779748152, 0.0228908053564658, -0.0311158320724681, -0.0228500559069325, -0.0168016078072764, 0.34116281345662, -0.11696848358163, 0.00688396145322242, 0.004084289523792, 0.0824200118822443, -0.00505275453162591, -0.0447813094524679, -0.0351759809093125, 0.00887040900954796, 0.0052628590144837, 0.106203269866522, -0.0120576866063496, -0.106864283990075, -0.00885461820277448, -0.0384451634488724, -0.340729942564746, 0.780643154897168, 0.421523682717848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0189589162037067, 0.0297613960356095, -0.0114222456646251, 0.0118223838397411, 0.0552995939385817, -0.104936601954282, 0.0910163993406657, -0.0557239934719332, -0.105570386298514, 0.126084042471054, -0.0432981721365902, -0.0167578998251391, -0.0568851719559671, 0.0163313630643682, 0.00646605237524127, 0.00896099560153855, -0.0724739320858045, 0.0961639620233353, -0.0394468229313443, -0.027261858799801, -0.0390515961300792, 0.0124558869364592, 0.00589090048204167, 0.0145778050557571, -0.0117440028107332, -0.00592549409332422, -0.00707806935557156, -0.0278299423469547, 0.223813500790995, -0.0785471478787505, -0.0560183754307316, -0.326757131883804, 0.206562994372508, 0.202123969612012, 0.170701958539411, -0.0715604211734564, -0.0911310520484133, -0.297692260133122, 0.336038002649934, 0.328816568729681, 0.0513352712705216, 0.0340426061301113, 0.109496317042074, -0.0895251176953564, -0.159859447182854, 0.0988851440159855, 0.0276613152231208, 0.0183433969642295, 0.0590006065325077, -0.0115959733825858, -0.0207062100805646, -0.0147672866726002, -0.158917255565657, -0.283768681645197, 0.179387388583809, 0.746253812808758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0300889454319044, 0.0277086251948064, 0.0116134748343782, -0.0295941247801589, -0.064816550186493, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.131811378803804, 0.246174341648927, -0.220629172869922, 0.0838282289179192, -0.0292546938798929, -0.0043608438117746, -0.00298569745566065, -0.00432619334275631, -0.149068120911646, 0.294363584413147, -0.288327136953213, 0.136372299873129, -0.0330847176025077, -0.0052144898891641, -0.00390183033368204, -0.00703787904698736, -0.00994958093958393, -0.00580000035399221, -0.00633883292814324, -0.0143122788603934, 0.151653962827898, 0.0265817081097541, 0.0280730885764982, -0.333041069655042, -0.0900448667383325, 0.460415557245728, 0.181340605155926, 0.0347380525200546, 0.0456694803544962, -0.43523155552094, -0.14648556610804, 0.749006978310935, 0.0545346359098207, 0.0386386245243295, 0.0741936940166861, -0.130887367428771, -0.162933739126997, 0.225249181345676, 0.0121036142241398, 0.00857559599677633, 0.0164668166434046, 0.00231859812224148, 0.00288628206839869, 0.00304821841502321, -0.0806322373880537, -0.100374178118915, -0.0271383331252475, 0.34001500036677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0220003110095953, 0.0154943147771694, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660335, 0.700205786033841, -0.0879689972569602, 0.207984322071836, -0.265754984143154, 0.210573178414572, -0.00627310588132703, -0.00295334145686075, -0.00261054608514561, -0.00387120992564318, -0.126842853448363, 0.306175461989327, -0.403856272644197, 0.342561795741952, -0.0090452167784401, -0.00434763868718115, -0.00396713316558068, -0.00629770910904675, -0.00272017181873589, -0.00173022626023838, -0.00178611135162369, -0.00306899265680013, 0.0383008284550469, 0.0206233204859012, 0.0255831356372874, -0.103568695058546, -0.0782629848021484, 0.185719199739326, 0.0563829702642085, 0.0313403617540297, 0.0416188089603941, -0.157388834244543, -0.127318725090268, 0.302129183998959, 0.0169560741910449, 0.0124724984787893, 0.0187379208165116, -0.0473316098422472, -0.0506689302910032, 0.0908594356622285, 0.00120914472199046, 0.000889419068102542, 0.00133620894796064, 0.000672100686121853, 0.000719490060176158, 0.000892524160294768, -0.00871623327667443, -0.0093308091097666, -0.00705094305896755, 0.0354092820333485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0174985944065183, 0.029466788535953, -0.0283386095943202, 0.0195251039488212, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356274, -0.00534222456151996, -0.00361590696451072, -0.00430211705354466, -0.0107923090820133, -0.154527546186846, 0.330011368059035, -0.366622398302526, 0.239192632867617, -0.00342995289485344, -0.00259182591384804, -0.00371794677692978, -0.0175569975586256, -0.099213763531364, 0.236547019598299, -0.316839952784664, 0.389120107604863, -0.0113307209892054, -0.00562742560967802, -0.00678487933658822, -0.0287096173150645, 0.0311257440235668, -0.0815659404066919, 0.165998121769477, 0.0258512152336891, -0.124100720402198, 0.0563443238094874, 0.0223104495607474, -0.0704903705473225, 0.270046808008898, 0.0223409640327254, -0.201887847036956, 0.0916613069592545, 0.00254796784356058, 0.0016769575754001, 0.00578284080485394, 0.00255145275286997, 0.00480288799507128, 0.0104681916872639, 0.0737017349409976, 0.0485071595553235, 0.167272676255486, -0.232862300323701, -0.438343036323648, 0.892089521161031, -0.0219629172026517, -0.0413432822734826, 0.198471563814311, -0.0629028622529029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0217651615841542, 0.0301544408087981, -0.0195929661997852, 0.0197079603842469, 0.097663716224066, -0.196492083346238, 0.196789453010075, -0.0984800038037924, -0.0274091197540592, -0.00716343427876989, -0.0059403136438699, -0.0112469218624479, -0.139172828321605, 0.24875381038015, -0.205968627929981, 0.0566341297909967, -0.0211833561662757, -0.00609264721184798, -0.00592810457681623, -0.018296564542443, -0.10756082710638, 0.211570198073955, -0.205545302674772, 0.0921327651866989, -0.0122839984890329, -0.00638648725849467, -0.007493483920297, -0.0258568697967752, 0.139850019066564, -0.303301889052388, 0.438098662911986, 0.0443492233638008, -0.167789230656524, 0.0641563418218739, 0.118945298523638, -0.302678515721804, 0.712701711629256, 0.0442580728498248, -0.272960595421594, 0.104369947911727, 0.0135841635533057, 0.009136695534981, 0.025982684822101, 0.00505449906476698, 0.00823962628291245, 0.0119195837084822, 0.0689750885493811, 0.0463925792045309, 0.131929947642522, -0.175519988457197, -0.286125111813636, 0.413287992708297, -0.0986777798289386, -0.160860258909837, 0.60859282392127, -0.0889892877687579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0274003458448222, 0.029840904927402, 0.0107306055922189, -0.0116539403654934, -0.0616020791184594, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0610854342286922, 0.0232306873822274, 0.00669126628283959, 0.0071766563265923, -0.108378901130757, 0.135429332788424, -0.054612198797409, -0.0124821118327561, -0.0591659989897216, 0.0242282398847583, 0.00787120988341591, 0.0116750304913959, -0.104973403820014, 0.141244824496284, -0.0642425604898808, -0.0203059794997373, -0.0119885014703204, -0.00664803468950714, -0.00749836629912163, -0.0201356771221163, 0.243375823624968, -0.362768474720545, 0.238132814788185, -0.110404287296158, 0.267886498788715, -0.0517660436411063, 0.253826662117954, -0.426739376810483, 0.387395988763217, -0.129873073436884, 0.435799472520742, -0.0842133314492747, 0.0289883075262093, 0.0200855372261041, 0.0452167068747917, -0.0148321715329214, -0.0205119728904676, -0.0096175946588452, 0.0514315884793257, 0.0356361296383093, 0.0802243131397707, -0.0864680007722811, -0.11957987970927, 0.0784960528037532, -0.155388943236062, -0.214893266576778, 0.521420011906788, 0.158688002977296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302582156650971, 0.0265020693494891, -0.00366448453027259, 0.0118223838397411, 0.0220838867907563, -0.0613915956629151, 0.29971631803346, -0.0767262716388461, -0.0891206073830918, 0.0989156565214032, -0.0302223496874193, -0.00876253400272344, -0.0661206272102359, 0.0421908315553681, 0.00264046129850602, 0.0018711989290251, -0.105520857724536, 0.123094447614705, -0.0406925701304418, -0.0142549464553037, -0.0782883499269332, 0.0525038935933196, 0.00355522180364805, 0.0030440784061077, -0.0089409313602637, -0.00529430977445573, -0.00572826125448666, -0.0122845275854092, 0.241764792404171, -0.180542653746288, -0.0171365171848401, -0.314040457459371, 0.355675036688131, 0.145522386249459, 0.300861406780796, -0.243089788685928, -0.0278777959462824, -0.422836525655092, 0.578614428417818, 0.236736750281292, 0.0343599167627111, 0.0245123276814269, 0.0449173939628028, -0.0482901013499828, -0.0583454638191476, 0.0270365518840592, 0.025492412068917, 0.018186259365489, 0.0333252470857065, -0.0205973412450426, -0.0248862892142954, -0.00236212503770406, -0.118028295404669, -0.142605118785308, 0.161511294647257, 0.280936830180622, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0257416392900367, 0.0190269258810565, -0.00428139506100089, -0.0295941247801589, 0.0263560489909356, -0.0712908034861193, 0.124137438646549, 0.383808683073226, -0.0878504334226812, 0.157568839051332, -0.132636080114132, 0.043832921424881, -0.026846546455891, 0.00174684397405049, 0.000844454371940369, 0.000919836089062749, -0.121303800469527, 0.223660496831054, -0.196471909613941, 0.0713076774021095, -0.0370696875098224, 0.00247955111857585, 0.00125087806345192, 0.0014963952428797, -0.00423354856605205, -0.0026493050315545, -0.00276472412449655, -0.0049878102254195, 0.133654373845705, -0.0100008671933939, -0.00690608582347842, -0.275675643274785, 0.0294662669971703, 0.331483547871064, 0.189715199007309, -0.0148141401162539, -0.0112348646634429, -0.408354348391796, 0.0479359119350407, 0.53925955942054, 0.0216664494002772, 0.0158283391111048, 0.0248315981213803, -0.0466361623797639, -0.0512176787686349, 0.0615862093229063, 0.00662113227785809, 0.00483704205785059, 0.00758838205535277, -0.000517019099184897, -0.000567810831510618, -0.000392101030648739, -0.0395581202410412, -0.0434442928364937, 0.00464364975090462, 0.128003012885621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0136019878329512, 0.00894945296698988, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0502269898723961, 0.116925136398513, -0.145927351620368, 0.110106556022686, -0.00493164708263807, -0.00188767340681872, -0.00151440904534089, -0.0020435610755013, -0.0769454525440012, 0.181036347722611, -0.229609921292738, 0.17912205076676, -0.00755505789865035, -0.00292270344760497, -0.00238285241145375, -0.0033244782502823, -0.000862826386782988, -0.00056176357920832, -0.000570886316972387, -0.000916248940524125, 0.0296474480394176, 0.0128750754489872, 0.0141325473043704, -0.0783043067552677, -0.0465267206212468, 0.133711509675399, 0.0459034376839122, 0.0202583342166779, 0.0229909184989447, -0.123208195799601, -0.0756899671933491, 0.217522740600862, 0.00524240817331119, 0.00389379030147013, 0.0055081887248166, -0.0140710083006512, -0.0145481290329094, 0.0248422133666614, 0.000514737336232584, 0.000382320334733678, 0.000540833582190832, 0.000227166450212476, 0.000234869226072765, 0.0002578082327336, -0.00356783408859096, -0.00368881245606527, -0.00219181234952917, 0.0133302788979787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0267678423103473, 0.0201430117194883, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198177, -0.113874016814714, -0.00337553010430037, -0.00205150924371624, -0.00205803437210198, -0.00341655366698139, -0.117658048548053, 0.288722082265174, -0.389392282440996, 0.341103554416912, -0.00458647086152874, -0.00287261154019161, -0.00301923029022293, -0.00555807139457087, -0.159866804506469, 0.404281086211672, -0.571256238409762, 0.554909447702642, -0.0047964718593699, -0.00298367308690573, -0.00312601768238469, -0.00574276601693963, 0.0212800115225836, -0.0601691836488125, 0.116674242781905, 0.0149020923897653, -0.0605819216858598, 0.0214941329323061, 0.029797188027501, -0.0882709367117854, 0.189806405664418, 0.0218620492158883, -0.0985550583339163, 0.0349667931625685, 0.00089400281880555, 0.00065145668992522, 0.00103865505607174, 0.000655925438529138, 0.000727355508725231, 0.00104910609763176, 0.0311615135421644, 0.0227072846284332, 0.0362035364034467, -0.0923126030276815, -0.102365415934278, 0.198497082175758, -0.00680382061772609, -0.00754475450407273, 0.0306719160336637, -0.00759650869077099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0252996401097377, 0.0185719699093625, 0.00525730855264604, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0157466541584317, -0.00374279051726947, -0.00267315597091042, -0.00356047179888876, -0.096348185690996, 0.202449247313066, -0.218148211810368, 0.127152152668921, -0.0218777468924621, -0.00534047574345146, -0.00397432758405993, -0.00579219833361036, -0.133862165186805, 0.28886877039115, -0.324332910255171, 0.206851936598334, -0.0040162565977032, -0.00251913179137713, -0.00262485806158831, -0.0047026539485232, 0.0880506682779472, -0.212599492451485, 0.326423530855205, 0.0240489893012457, -0.0827389756646381, 0.0244742477384673, 0.125636862646552, -0.316083324879609, 0.531027891320699, 0.0357549512968219, -0.134600295702078, 0.0398148630221872, 0.00376947345663155, 0.00275646118252991, 0.00429766082129845, 0.00107275314758293, 0.00117380595892329, 0.00119456237747497, 0.023064069668563, 0.0168658072497396, 0.0262958606114857, -0.0580257073642748, -0.0634917000508116, 0.0974846396461407, -0.02523695384663, -0.0276142623090699, 0.0950050643944833, -0.0107468543355463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0222798637815404, 0.0157384636757173, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0304886776317668, 0.0107584088389607, 0.00275781261113255, 0.00227193562591235, -0.0651840819226078, 0.100280437182775, -0.0649749437055039, 0.00838325633735857, -0.0438437190827521, 0.0158018985425534, 0.00418435023440399, 0.00369599943203772, -0.0937368491673824, 0.147291418079094, -0.0985846245778222, 0.0136379351193378, -0.00281237972201518, -0.00178705171664094, -0.00184603177137807, -0.00318156671073522, 0.135818617311492, -0.239058106385728, 0.217617054249946, -0.0548325275417145, 0.135594537640337, -0.0197476187160159, 0.199489724091347, -0.362716030615442, 0.354020818079538, -0.0831958264843426, 0.22058606255838, -0.0321255526459663, 0.00598527537215419, 0.00440074726428653, 0.00662916434183088, -0.00249611820153089, -0.002676318192213, -0.000963860569483065, 0.0127963791968913, 0.00940869504609353, 0.014172998801565, -0.0232666213244206, -0.0249462873527775, 0.0227088620848716, -0.0315120319233671, -0.033786951378502, 0.083551246966671, 0.0191640690194888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0174601641969978, 0.0118031792992787, 0.00832487477036382, 0.0118223838397412, -0.0614326220634957, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.0382036012222131, 0.040270790609051, -0.0113654215697484, -0.00277398168006038, -0.0341553717751246, 0.0297193862963568, -0.00423826638234881, -0.0016478488478394, -0.0571355455781429, 0.06111926211102, -0.0176401553036291, -0.00451273116942705, -0.0510812001582027, 0.0451053215830694, -0.00657817017555928, -0.0026807310630787, -0.00153258545360964, -0.000988567458496887, -0.00101096290126251, -0.00166708789365999, 0.118608021325499, -0.117471841982964, 0.023155147567194, -0.142311111700305, 0.194815672108919, 0.0555136223703438, 0.180012228074643, -0.182326851992763, 0.0376689424123681, -0.220879630062071, 0.316927383528958, 0.0903099165359298, 0.00540089350611567, 0.00399603386838149, 0.00578913319241678, -0.00662703513197385, -0.00694605618732156, 0.00270956171685511, 0.00482858996842364, 0.00357259572485573, 0.00517568999039126, -0.0048906766941494, -0.00512611061131823, 0.00101041956648684, -0.0195183534360827, -0.0204579539645001, 0.0280057544625234, 0.0339275351802632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0112160500006486, 0.0072737451295291, -0.0107414954878784, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.0328603051059602, 0.0572391342198021, -0.0460842819145467, 0.013876319450327, -0.0121007418432333, 0.00259749741088062, 0.000903952700718187, 0.000791639729753244, -0.0509893480914857, 0.0895677407263748, -0.0730358568886415, 0.0225740853843904, -0.0187767257796369, 0.00406456138455516, 0.00143261340615433, 0.00128784458422849, -0.000563356708674931, -0.000368625559680182, -0.000373344867856775, -0.000590624525008085, 0.0585061854534173, -0.0142235201623365, -0.00673572294369968, -0.115421158702177, 0.0381836357431629, 0.126453757203726, 0.0915504212460303, -0.0225418936754915, -0.0109577172391407, -0.182923176377682, 0.0621173832613312, 0.205715782381084, 0.0027467804875168, 0.00204438250187349, 0.00285562558404524, -0.00548823047180296, -0.00563358576833739, 0.00617207533649834, 0.00101149643840154, 0.000752839780526489, 0.00105157842819885, -0.000249054508513109, -0.00025565069504817, -0.000121066531530308, -0.00560971849366731, -0.00575829138967044, 0.00190495835770911, 0.015458374468255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00485293934295222, 0.00304595863694752, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0169490283234976, 0.0390069530753064, -0.0478485849051354, 0.0348567628001826, -0.00200537469754973, -0.00063888846666641, -0.000475038588244001, -0.000597351761171395, -0.0270708836687132, 0.062508320966162, -0.0770601206703531, 0.0567052050431295, -0.00320297211812925, -0.00102381350470722, -0.000765049394996884, -0.000971775672177995, -9.60985345168607e-05, -6.3600134020399e-05, -6.39179461700591e-05, -9.78802368935341e-05, 0.0119183832377098, 0.00428298179362938, 0.00428003792419057, -0.0309395457727483, -0.0149430883155113, 0.0510080300769956, 0.0190991109554805, 0.00689773991227524, 0.00696279311635679, -0.0498281220951642, -0.0243095118088301, 0.0829801901267499, 0.000573029207156392, 0.000428493256672904, 0.000581723792626533, -0.00149498944557373, -0.00151012679740921, 0.00248964847991304, 6.77996550038935e-05, 5.06984541302049e-05, 6.88283807440972e-05, 2.44861861606401e-05, 2.47341183557855e-05, 2.4717117579657e-05, -0.000456786694266104, -0.000461411837892337, -0.000222851295041539, 0.00160984056801367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00634204581202913, 0.00337366876311365, 0.0208770933958504, 0.0195251039488212, -0.00350519620228996, -0.00213578148775578, -0.00215103292273895, -0.00360148326124415, -0.00203791177178512, -0.0492117221773469, 0.0992013086517272, -0.0738509092732365, -0.002246579510867, -0.0534241146055895, 0.106929104926151, -0.0792361187978446, 0.00186672700723213, 0.00270775846140316, 0.0252970714511434, -0.0453962493417859, 0.0020578666382389, 0.0029395353782767, 0.0272677169715596, -0.0487065445939727, 0.0421979810464191, -0.135565454749909, 0.628290543629044, -0.0283178557954034, 0.0161444667353694, -0.0223718110929614, 0.0143676720035995, -0.022717931695821, 0.0101011981811167, 0.0146941439702451, -0.000888311046095925, -0.00570497820444046, 0.00883182654289643, -0.00579324153221628, 0.00620921957215439, 0.00903250928257812, -0.0182154333959, 0.263102111421653, 0.203498998675296, -0.118794431005032, -0.286356708329364, 0.185217860295404, -0.0200805648288415, 0.290041905135055, 0.224335855573075, -0.128962918095965, -0.310868080347518, 0.199646358368677, 0.0389718679788594, 0.0939425841553137, -0.0417702048278292, -0.0424164434544872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0106853276693847, 0.0115772632577271, 0.0192875795853981, 0.0197079603842469, -0.0163810014243474, -0.00390242657177239, -0.00279689872237215, -0.0037531913254445, -0.0274010505067601, -0.0481217403864261, 0.105826965373029, -0.0769617882285367, -0.00530248227273642, -0.0237500598790071, 0.0728748586553499, -0.06500202798837, 0.0146717000428917, 0.00719541733809589, 0.0244226254420099, -0.0473085106547024, 0.00283917689101593, 0.00355123466570231, 0.0168179761255124, -0.039956830583685, 0.0582192890483208, -0.134368965523375, 0.207386421256723, -0.066837130682762, 0.0358043028635584, -0.076795717786459, 0.0595392120224928, -0.0301110314791138, 0.016318509059072, 0.0167314550889353, -0.00535364888165098, -0.0177228274895513, 0.0365988305517866, -0.00694898923818526, 0.0100310086012752, 0.0102848470593369, -0.109780279168362, 0.670583112662058, 0.451308792072928, -0.142493838383863, -0.379545813158116, 0.210897913990534, -0.0212440024532164, 0.129767107520561, 0.0873344935774069, -0.0703265751992813, -0.187321483324288, 0.145229106953919, 0.106020532605796, 0.282395714198688, -0.153042815009205, -0.0600069529033936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0102352418729334, 0.00318614435970197, 0.0163965439250798, -0.0116539403654933, -0.0318063021955914, 0.0112436886986537, 0.00289018334287387, 0.00239490987846137, -0.0126571512820065, 0.0143537935251025, -0.0723998288978304, 0.0491092861808113, -0.000855846139544607, -0.00170119926809053, 0.033381776988997, -0.0441008898133744, 0.0285443214023184, -0.0170879000112391, -0.011721530367654, 0.0301875416619843, 0.00193009838737048, 0.0020252432182117, 0.0054045088042264, -0.0271088739443335, 0.0395780045482834, -0.0507328584660814, 0.00689944426242849, -0.010787834325671, 0.00573105683907241, -0.0797988402663339, 0.0920558261790193, 0.0455268719942122, -0.0372674873257956, -0.0135001655287294, -0.00682270690696131, -0.0129194301108828, 0.0565868352835746, 0.00737079936166037, -0.0229083726068186, -0.00829856919202067, -0.139904331697434, 0.323635014986764, 0.0722392598788915, 0.151143347183347, 0.573860568794342, -0.170167910286463, -0.00945999455336047, 0.0218834216346689, 0.00488464507640125, -0.0179133795644636, -0.0680134612436615, 0.0784602300632858, 0.0603471905904595, 0.229126016875703, -0.187558480429118, 0.10700595273598, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00496641091476419, -0.0118015616755321, 0.0123418011338163, 0.0118223838397412, -0.0399845505836984, 0.0422013001459019, -0.0119330872043853, -0.0029241304429919, 0.0594964820405093, -0.120624902691672, 0.125434652322349, -0.0599613204849073, 0.00168229735160562, 0.00204848339993469, 0.00753331313448479, -0.0231834539600411, -0.0204347654762905, 0.0301742710270643, -0.0150525237472732, -0.0368583011689747, -0.000577804782104811, -0.000512427300870805, -0.000904019525330459, -0.0142508991010522, -0.0118482873431862, 0.00538637983819946, 0.00258397885603977, 0.0212051492401302, -0.011236152923305, -0.0298340045411958, 0.0806085190825293, 0.0496738192420162, -0.0969030134598643, 0.0379510614356348, 0.00281071914707286, 0.00358016746982017, 0.0495501608220376, -0.00596100303954887, -0.0595664075674237, 0.0233285664952789, 0.0576357432941004, -0.0376329322111707, -0.141630312498688, -0.122234496933111, 0.626132323960991, 0.478368417328807, 0.00162968389014096, -0.00106409286769037, -0.0040046787885942, 0.0020758179470354, -0.0106331416082054, 0.0287296932280313, -0.011386085869469, 0.0583239313380668, -0.113777534921342, 0.189440364791817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0263496071105024, 0.00800383521292125, 0.00763236993753089, -0.029594124780159, -0.0344990911194156, 0.0601371945948343, -0.0484704728084981, 0.0146274102792547, -0.0455282927907743, 0.109434345863475, -0.15080433156421, 0.299945181214723, -0.000530247378602151, -0.000473709291275489, -0.000809912274627555, -0.00823909033431861, -0.135681023269177, 0.282736312981597, -0.302623682224073, 0.184376690406239, -0.00158021534532749, -0.00122388284394269, -0.00162527582784888, -0.00506457947298121, -0.0324034103825531, -0.00380781996748507, -0.00295758720151001, -0.00668370237087948, 0.00353768478630606, 0.00443980886007473, 0.0398642041456059, -0.0119454683360227, -0.0787301479845032, 0.0864482284436404, 0.00914001856619136, 0.00890950075286637, 0.0245045777907787, -0.0239713380659706, -0.0483955236813237, 0.0531398377109132, 0.187422412635165, 0.0277197895493027, 0.0445920774865157, -0.491548893679024, -0.150571145206207, 1.08966918597521, 0.00218282384204083, 0.000322839817682175, 0.000519343703536522, 0.00212777146164352, 0.000651778469724125, 0.00585219562230561, -0.0158903041743698, -0.00486751435712184, -0.0320807954006473, 0.0863145549122682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0261153899063017, 0.0302224845101157, 0.00320507108782467, 0.192230415140458, -0.0178382131382484, 0.0410650708630085, -0.0503948504088265, 0.0367434731025108, -0.183081952923273, 0.472755167242471, -0.693290980381533, 0.753450370761893, -0.000685098508853136, -0.00050660975004617, -0.000605395551988634, -0.0013687788337973, -0.15273114932588, 0.375858140305485, -0.510844558915112, 0.463146916325963, -0.000571524833484781, -0.000402773807050632, -0.000446079687282812, -0.000841390117526141, -0.0117195126461701, -0.00554103138111587, -0.00513542221486784, -0.00863558164111833, 0.00456844460258443, 0.00406019525351247, 0.00813727702558374, -0.0141780709602838, -0.0211330510483064, 0.0348708803444415, 0.0036320852978328, 0.00299171446345449, 0.00500199470056412, -0.010446970479823, -0.0129905137821947, 0.0214351751990884, 0.074478425233685, 0.0411575515467006, 0.0575846769898422, -0.21422236704193, -0.178712824081336, 0.439543117114766, 0.000278700643370784, 0.000154012870971955, 0.000215483698467152, 0.000229563095956124, 0.000191510670662553, 0.0003838178420581, -0.00207012653542038, -0.00172698194151856, -0.0025741440871495, 0.00898882818456476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0110271230805096, 0.0117859544381791, 0.0160091858217585, 0.0195251039488212, -0.00316207558373219, -0.00241577235429526, -0.00353354291864158, -0.0181912548602127, -0.0053363873650024, -0.0215894746779383, 0.0708866405450277, -0.0648153237617093, -0.0297142669526367, -0.0385011904458144, 0.0864255424365171, -0.0627342855826572, 0.00295045175569044, 0.00361626834906969, 0.0160892124049083, -0.0398420632543445, 0.0164288131844469, 0.00644900529020141, 0.0196160926625837, -0.0385628463970882, 0.0585357554359556, -0.129373925944914, 0.175306723361566, -0.065079496306369, 0.0357749037316646, -0.0262610115094857, 0.0142628870184278, -0.0819968258027643, 0.0145632415484492, 0.0651399463159162, -0.00599234830794829, -0.0059604883077429, 0.00876741507713457, -0.0186109023749111, 0.00895204339478135, 0.0400416091578108, -0.0213506983799165, 0.119573754125017, 0.0783533620054189, -0.0663105251505073, -0.179587540573384, 0.142667995223337, -0.118885738214352, 0.665814943251966, 0.436290050931203, -0.118253648848181, -0.320264119644221, 0.173941927289884, 0.109880054473007, 0.297586072438545, -0.0528534831921602, -0.16502859582585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0116958193796846, 0.00868942826669691, 0.0205403356838657, 0.0197079603842469, -0.0201247738104085, -0.00584323645334008, -0.00577935460978619, -0.0189575391547739, -0.0167229445882327, -0.0161405937908927, 0.0744586814191187, -0.0675455897618918, -0.016345793968674, -0.0164605936176498, 0.0767742256020672, -0.0700872974533169, 0.0148427436855893, 0.00638151686995211, 0.0144742293073119, -0.041520361292018, 0.0145079970177747, 0.00650803540571861, 0.014924354354337, -0.0430827522936911, 0.0516918998203713, -0.0838466866383685, 0.0412250887240754, -0.0358001777363246, 0.0606589183534292, -0.111649968396047, 0.0782426680475979, -0.107010375739815, 0.0295940856905749, 0.0741714582685035, -0.0239827552691317, -0.0217039465904844, 0.0480958691343095, -0.0208020433238828, 0.0181915227080135, 0.0455932912233093, -0.0854504023725405, 0.279624171526345, 0.132853752011542, -0.0741175462222497, -0.23437163581397, 0.162448602623015, -0.0835232494105545, 0.273317840187488, 0.129857516831937, -0.0755869842279408, -0.239018235798383, 0.167500490591787, 0.278545525839862, 0.880805880216168, -0.243589881034135, -0.233467551046818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00575929267843141, -0.00515804432869905, 0.0267098865309275, -0.0116539403654933, -0.0579732173172457, 0.0239119304978304, 0.00786274267358276, 0.0120967981262487, 0.0180568823364596, -0.0159481203670525, -0.0486788032710563, 0.043100813718339, 0.00616713919741479, 0.00514217279233536, 0.0477328791988055, -0.0705477914032104, 0.0151788194266241, -0.00831999241146463, -0.00467132225531151, 0.0264941258766691, 0.00518416692938239, 0.00268262576567024, 0.00458054935471427, -0.0433658185196249, 0.0184711533395946, -0.0166083283299718, -0.0030550085641489, 0.0135071248184838, -0.0321631653551498, -0.145964620231555, 0.171822073141542, 0.15461492822938, -0.0889816857642902, -0.0598469743850445, -0.016779237021334, -0.014007077683875, 0.105619250345273, 0.0148371797724686, -0.0546971571990112, -0.0367880124736601, -0.059784313307097, 0.0867188215718506, -0.0704430166245737, 0.0528647758526335, 0.33863401936357, -0.131075451218333, -0.0204187065694205, 0.0296179059986187, -0.0240590751445702, -0.0170452571090388, -0.109186198802953, 0.128528399601263, 0.106614352543, 0.68293577606614, -0.393033048742583, 0.416325384375381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0114965700457509, -0.0103543496131473, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163357, -0.0147699151361858, 0.0487160015083047, -0.088308009135392, 0.068305707099425, -0.052625112387307, 0.00695767866119309, 0.00519526230305947, 0.0120624974055012, -0.0538719236429517, -0.0456650504879515, 0.0640339164783739, -0.0289985647742537, -0.0323487245733811, -0.00652193812105309, -0.00376718935977072, -0.00512102322348429, -0.0331151410630414, -0.0232376234689827, 0.00622457516001486, 0.00364434309255471, 0.0152385459635857, -0.0415491378876404, -0.0562811451289643, 0.208024526539326, 0.136630693123355, -0.294625982202666, 0.168239137275043, 0.0301281169318002, 0.0238936466936199, 0.127872945220574, -0.0580053142400202, -0.181106971901399, 0.10341681503917, 0.107346286348629, -0.0394797780221854, -0.0909999553413712, -0.20667256059336, 0.299245365959432, 0.368473445107362, 0.0153313273413632, -0.00563854997513985, -0.0129967244405358, 0.0121587857504658, -0.0176049509478885, 0.0650708434821412, -0.0972399536775847, 0.140795688796734, -0.303607243389941, 0.737050889895457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0286331249853377, 0.0142799617871943, 0.0261981528295216, -0.029594124780159, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693798, -0.0786155180524535, 0.180183183238994, -0.22752856333055, 0.263247185749171, -0.00462473340853516, -0.00324555768787734, -0.00464646010384137, -0.025926427330224, -0.144761735858263, 0.294022599521716, -0.301560576395922, 0.161818385181666, -0.00851593238442509, -0.00529609529110004, -0.00615830015627244, -0.0159370083754822, -0.0303422121712232, -0.00597444597327729, -0.0048525477827356, -0.0101289835370484, 0.0294212418863082, 0.0278742507862941, 0.133035353826841, -0.0910346124745028, -0.287527730636603, 0.383229739093874, 0.0480095304404489, 0.0369438237145968, 0.0817770038721052, -0.120654962207572, -0.176743667493169, 0.235571815733863, 0.17105764737271, 0.0416757755850921, 0.0644377196220509, -0.429892852309206, -0.199381890716993, 0.839340860388867, 0.0100628481015949, 0.00245167056644537, 0.00379069275492269, 0.00774346432721736, 0.00359137526936511, 0.0171405460669788, -0.0701951279005208, -0.0325561061198117, -0.102826639852128, 0.335821880299532, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0243834140019698, 0.0296919171784482, 0.014002682081672, 0.192230415140458, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.17784500213963, 0.452155668420226, -0.646858537591112, 0.661266465096996, -0.00336147904794545, -0.00228012796141551, -0.00256799349356301, -0.00533850326641948, -0.141645882360695, 0.345411287467401, -0.462849575846566, 0.406481350416946, -0.0026772732438629, -0.00174183802117268, -0.00183748784347572, -0.00328158485493615, -0.00953910730364738, -0.00475113027769328, -0.00445019405091743, -0.007362233220608, 0.0220699483121887, 0.0178268522440293, 0.032468474045117, -0.0668177993242805, -0.0872806619365439, 0.154584525524274, 0.0168597007475024, 0.0127557271340279, 0.0199584129431101, -0.0478104381081749, -0.0536515356544614, 0.0950233075549245, 0.0600710050445713, 0.0347932015858051, 0.0483370874319141, -0.170348282676651, -0.146342789854297, 0.338567432066032, 0.00113541242327279, 0.000657632301918541, 0.000913627623414877, 0.000859031324028863, 0.000737976565159688, 0.00134409443819904, -0.00831478638071584, -0.00714306605782589, -0.00933062058446002, 0.0349726090309803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00888246788236103, -4.1621401110696e-06, -0.0100835618309506, 0.0195251039488213, 0.00276855422334106, 0.00354739278284635, 0.018497012182256, -0.0413981115341341, 1.34764571146093e-06, 2.3458968789053e-06, 0.0351417498325345, -0.0504430947992083, 1.70769882250376e-05, -2.18993997976694e-05, -0.062915024945878, 0.0427474066498151, 0.00207617681188772, 0.0020413294090695, 0.00495444159751826, -0.031007435542924, 0.0263087298629873, -0.0190562037323712, -0.00887004256151601, 0.0262768860950637, 0.0320568669764364, -0.0362041359827393, -5.86577422601205e-06, 1.27907673088466e-05, -8.84633105614372e-06, 0.0681493393296444, -0.0162998925724395, -0.0925068516383987, -0.0593298559286745, 0.115369044865993, -0.00769781311112114, 0.00960799969344683, -0.0100195650228908, -0.0130420310882868, -0.036470139090439, 0.0709175009299217, -0.00937969153956918, 0.018253862747739, -6.62595538389148e-06, -0.0158915560681608, -0.0692881905275169, 0.0864121113201356, -0.11885681869661, 0.231307825632447, -8.39622469952826e-05, 0.148350740803414, 0.646818621763509, -0.154705447658132, 0.059926745832443, 0.261284405700932, 0.167576410526233, -0.227470527214668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00438186087957959, -0.00681295111639307, -0.0118196797021562, 0.019707960384247, 0.0153251463175156, 0.00682473684164875, 0.0170656692030986, -0.0431419561966857, 0.0101073362006735, 0.0056834671579669, 0.0351451051021587, -0.0525679482857171, 0.0224826683241414, -0.0171152528866809, -0.0423250421086932, 0.0415371758142848, 0.00496290698942523, 0.00178381589036714, 0.00264840080550236, -0.0323135857262809, 0.0110394459580147, -0.00537180196847281, -0.00318945341855531, 0.025532955636908, 0.013451430472419, -0.011062709731633, -0.00265609563809118, 0.0168396543479754, -0.0486078465011174, 0.155615226861536, -0.0711213725288543, -0.114945842078814, -0.0680100252848934, 0.131364712142299, -0.0152560834038926, 0.011726568777374, -0.0437183995785951, -0.00866187936743335, -0.0418058504080333, 0.0807500582702356, -0.0185893518541936, 0.0241497410540249, -0.036407570572899, -0.010554394533443, -0.0860951298768103, 0.0983929627081788, -0.0413499881472977, 0.0537184681949509, -0.0809846746389742, 0.0317836149105704, 0.259267781302797, -0.118494062764006, 0.0902664474228084, 0.736328501815995, 0.435663605754063, -0.321804755462983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0064996386731241, -0.0117909391625216, -0.00729939888432001, -0.0116539403654932, 0.0195387056426205, -0.0109690858690785, -0.00648860340814753, 0.027528864934527, 0.0347177461769008, -0.0226829837593198, -0.0194855585338848, 0.0335435867035135, 0.0269842516546398, -0.00603551746377185, -0.0087648884639266, 0.0185044353861291, -0.015752748956729, 0.00761282852421944, 0.00331676160313959, 0.0206192860832164, -0.0122437712383397, 0.00202563119535546, 0.00149192775061615, 0.01137470033862, -0.0149188861614177, 0.00608305867108567, 0.00308515890396074, 0.0202113674476524, -0.104103979779745, 0.0482167279666833, -0.0613421198629881, 0.140845268185824, 0.0571481039328642, -0.105994687797817, 0.0349392194237379, -0.00820727779862233, -0.0377070803306022, -0.0239741743450806, 0.0351290133199052, -0.0651550715289333, 0.0425730134126713, -0.0246468125557046, -0.0779745095406276, -0.0292122395057681, 0.105493956438009, -0.0793906612641799, 0.0330897317403691, -0.0191566523097156, -0.0606054257488449, -0.00777283022214894, 0.0280699674769363, -0.0357110775063413, -0.13407012159853, 0.484166493457688, 0.196451023490723, 0.57385057542787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218166735098091, -0.000396180986240272, 0.00962857943557116, 0.0118223838397412, -0.0386200930353358, 0.0549301045311349, -0.0255353246076024, -0.0336121174078453, 0.00168506853674374, -0.00261416436528498, 0.0014366558294036, -0.0409559557664379, 0.000547681628745547, 9.49985402433978e-05, 0.000112306740668029, -0.0152948461494823, -0.0821315304265298, 0.106627813860814, -0.0421122676094751, -0.0251756789225904, -0.0266944218436788, -0.00387484689204746, -0.00329201428801461, -0.0094017616882313, -0.0325268279583358, 0.000218004723301912, 0.00015666939859652, 0.000410216847388452, -0.00279906307588769, -0.000731198562915999, 0.071665710986536, 0.00653976121473101, -0.141635372249502, 0.297967524909641, 0.114169552842125, 0.0214334073109036, 0.0440530051317885, -0.191698087141148, -0.0870634463072908, 0.183161022520475, 0.139114209894574, -0.00120587578307177, -0.0020965151474268, -0.233581784872354, 0.00489832064355625, 0.223179475587968, 0.0452149544041173, -0.000391934214267958, -0.000681410165577516, 0.00848834483592521, -0.000178004610942688, 0.0174464607140272, -0.250102923105532, 0.00524477673604125, -0.113589148133034, 1.01592911016151, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302602001667238, 0.023673129138354, 0.0280757815135755, -0.029594124780159, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.123983018812676, 0.264604231380493, -0.294894932128271, 0.204874433632237, -0.0165981047421915, -0.00715703702973127, -0.00768596711021528, -0.0232728591097202, -0.148692369932632, 0.290316139028517, -0.279210915864664, 0.125936579040831, -0.019906044828892, -0.00785249482412088, -0.00727718818584281, -0.0143058565620666, -0.0242552732279389, -0.00764573936306609, -0.00659796760180477, -0.0124320806881216, 0.0983244220117469, 0.0542495311672537, 0.132140523387534, -0.268507118668092, -0.336020030755683, 0.678736343273606, 0.107878722958189, 0.051364264462331, 0.0812269504449892, -0.254226540885045, -0.206551947025893, 0.417220107102281, 0.131448910284485, 0.0500118481387929, 0.0736455858695552, -0.309771944349812, -0.201113453401184, 0.508377620011561, 0.0175975936224402, 0.00669528699742787, 0.00985923039920333, 0.00837873704784175, 0.00543973324107402, 0.0132500536336067, -0.115108315633292, -0.0747318512681792, -0.0935222838266847, 0.462886930472143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020883782477299, 0.0273991946635943, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.161228140099431, 0.400101823491238, -0.550948270007869, 0.514636432413085, -0.00693501587567314, -0.0040557393264644, -0.00415135234621372, -0.00759654426569485, -0.120035982431373, 0.288544469191109, -0.378174407346312, 0.316347679887783, -0.00516318952324426, -0.00292490831688987, -0.00284951473428247, -0.0046696055744621, -0.00629128356187374, -0.00338045124712313, -0.00321746450671816, -0.00519436877155106, 0.0444428333845823, 0.0305213990124244, 0.0479600994071268, -0.129512458891891, -0.13654327736291, 0.273783907869764, 0.0320511755142849, 0.0209500829955222, 0.0294811350675104, -0.0888981780171579, -0.0839333290017816, 0.16829532188209, 0.0390539670767367, 0.0242129757642644, 0.0332879505960336, -0.108321347400084, -0.0970056138378363, 0.205065800379851, 0.00167985490323291, 0.00104148922898353, 0.00143183730650063, 0.00109802835866304, 0.000983323393772196, 0.00154515485006024, -0.012032206083162, -0.0107752678944207, -0.0113602228338171, 0.0482052081612838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0101644112236963, -0.0109437322728922, 0.0100401662714875, 0.0195251039488213, -0.00508376488671081, -0.0317222402070976, 0.0822967853898158, -0.068632037336036, 0.0026556116501308, 0.00277042286983689, 0.00774815294057039, -0.0335768632939074, 0.0557887295356482, -0.115066962106936, 0.124046280414075, -0.0522493142351215, -0.00206888955864488, -0.00165092370827348, -0.00261316748166373, -0.020639741246323, -0.043462951377195, 0.068569595584005, -0.0418362555160868, -0.0321177209637212, -0.0212633870913168, 0.00645575293301415, 0.00365371796926729, 0.0167773679286117, -0.0173199524369119, 0.0668525135558671, 0.0970236731312839, -0.0338138843694442, -0.175708585038306, 0.127313382496836, 0.0103211392078775, -0.0225468980583681, 0.0596405772233311, 0.0114041815824648, -0.108008294229385, 0.0782597007030628, 0.00504941268934666, -0.00212276595816234, -0.00520863652853827, 0.00557926969439197, -0.0101688635658782, 0.038287006679738, 0.106077377249782, -0.044594779474464, -0.109422330078203, -0.231729827781458, 0.422354381832925, 0.612966832642401, -0.0348801212954484, 0.0635730506039557, 0.33034745863991, -0.167089166495659, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0155122697307479, -0.00766332463985574, 0.0110939404354584, 0.019707960384247, -0.0231802053744834, -0.0276298646655859, 0.0870824133797185, -0.0715230777133199, 0.00895970133038269, 0.00338168273878089, 0.00558144257295908, -0.0349912474691861, 0.0330408366068701, -0.0519648837128461, 0.0272127142256642, -0.0418203837218572, -0.0156006160152445, -0.00470230194600581, -0.00496770894873677, -0.0215091650261775, -0.0575306459131926, 0.0722582786979657, -0.0242204129508011, -0.0257070439035827, -0.0281457276807843, 0.00463130748587522, 0.00296439209504614, 0.00993638458944269, -0.0479481933002692, 0.126107477245156, 0.191659952362795, -0.0302636455110632, -0.231003451275632, 0.144965106220525, 0.066672985043134, -0.112240739741458, 0.117813620332084, 0.0269358648165762, -0.141998119943555, 0.0891102380811219, 0.0326184358075964, -0.0071939352493796, -0.0144194801926214, 0.0131778377235274, -0.00910119875154587, 0.0435954169258846, 0.120287537290538, -0.0265291922543359, -0.0531749520918536, -0.202498240605751, 0.139854259344908, 0.212552508933873, -0.186845886872037, 0.129044050170326, 0.984997691207882, -0.236382660307924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0235602360807907, 0.00242217246301154, -0.00170955493305571, -0.0116539403654933, 0.0063007969271565, -0.00613847546289085, -0.0581932607657203, 0.0456388471838219, -0.00601102036289116, 0.00300848299556035, 0.00140208737896728, 0.0223279009667123, -0.00774557056222427, 0.00717932068418103, 0.000352938229631503, 0.00397204289231757, -0.0521782100505415, 0.0221414434455206, 0.00763849492268674, 0.013724989570723, -0.067234842565504, 0.0528374343948941, 0.00192278806264456, 0.00244161989758007, -0.0328933134587861, -0.00127304603535352, -0.000942363494893915, -0.00232932866944779, 0.022890805356466, -0.0311158320724686, -0.0228500559069326, -0.0168016078072761, 0.34116281345662, -0.11696848358163, 0.168468784091727, -0.169517341690775, -0.0140459588870734, -0.0915342352082089, 0.209713222196367, -0.0719006779748154, 0.0824200118822442, 0.00408428952379178, 0.0068839614532226, -0.0447813094524683, -0.00505275453162574, -0.0351759809093123, 0.106203269866522, 0.00526285901448367, 0.00887040900954807, -0.106864283990075, -0.0120576866063498, -0.00885461820277454, -0.340729942564746, -0.0384451634488726, 0.780643154897169, 0.421523682717848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0297613960356096, 0.0189589162037066, -0.0114222456646251, 0.0118223838397411, 0.0552995939385818, -0.104936601954282, 0.0910163993406656, -0.0557239934719332, -0.0724739320858042, 0.0961639620233359, -0.0394468229313447, -0.0272618587998011, -0.0390515961300794, 0.0124558869364596, 0.00589090048204124, 0.0145778050557572, -0.105570386298514, 0.126084042471053, -0.0432981721365898, -0.016757899825139, -0.0568851719559668, 0.0163313630643679, 0.00646605237524169, 0.00896099560153851, -0.0278299423469548, -0.00707806935557175, -0.00592549409332399, -0.0117440028107331, 0.170701958539411, -0.0715604211734568, -0.0911310520484136, -0.297692260133122, 0.336038002649934, 0.328816568729681, 0.223813500790995, -0.07854714787875, -0.0560183754307313, -0.326757131883804, 0.206562994372508, 0.202123969612012, 0.109496317042074, 0.0340426061301111, 0.0513352712705218, -0.159859447182854, -0.0895251176953559, 0.0988851440159855, 0.0590006065325076, 0.0183433969642295, 0.0276613152231209, -0.020706210080564, -0.0115959733825863, -0.0147672866726002, -0.283768681645197, -0.158917255565657, 0.179387388583808, 0.746253812808758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0277086251948065, 0.0300889454319044, 0.0116134748343782, -0.0295941247801589, -0.0648165501864931, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.149068120911646, 0.294363584413148, -0.288327136953214, 0.136372299873129, -0.033084717602508, -0.00521448988916373, -0.00390183033368246, -0.00703787904698734, -0.131811378803804, 0.246174341648926, -0.220629172869921, 0.0838282289179195, -0.0292546938798926, -0.00436084381177492, -0.0029856974556602, -0.00432619334275627, -0.0143122788603934, -0.00633883292814341, -0.00580000035399201, -0.00994958093958393, 0.181340605155927, 0.0347380525200541, 0.0456694803544961, -0.435231555520939, -0.14648556610804, 0.749006978310935, 0.151653962827897, 0.0265817081097546, 0.0280730885764982, -0.333041069655043, -0.0900448667383322, 0.460415557245728, 0.0741936940166859, 0.0386386245243293, 0.054534635909821, -0.162933739126997, -0.130887367428771, 0.225249181345676, 0.0164668166434044, 0.00857559599677635, 0.0121036142241399, 0.00288628206839922, 0.00231859812224105, 0.00304821841502317, -0.100374178118915, -0.0806322373880541, -0.0271383331252475, 0.34001500036677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0154943147771695, 0.0220003110095952, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435896, -0.667777779660335, 0.700205786033841, -0.126842853448363, 0.306175461989328, -0.403856272644199, 0.342561795741953, -0.00904521677844041, -0.00434763868718073, -0.00396713316558115, -0.00629770910904674, -0.0879689972569602, 0.207984322071835, -0.265754984143152, 0.210573178414572, -0.00627310588132673, -0.00295334145686112, -0.00261054608514511, -0.00387120992564318, -0.00306899265680018, -0.00178611135162381, -0.00173022626023824, -0.00272017181873582, 0.0563829702642088, 0.0313403617540292, 0.0416188089603943, -0.157388834244543, -0.127318725090269, 0.302129183998959, 0.0383008284550465, 0.0206233204859016, 0.0255831356372871, -0.103568695058546, -0.0782629848021477, 0.185719199739326, 0.0187379208165114, 0.0124724984787892, 0.0169560741910451, -0.0506689302910035, -0.0473316098422466, 0.0908594356622282, 0.00133620894796065, 0.000889419068102588, 0.00120914472199039, 0.000719490060176461, 0.00067210068612165, 0.000892524160294737, -0.00933080910976633, -0.00871623327667485, -0.00705094305896757, 0.0354092820333485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029466788535953, 0.0174985944065183, -0.0283386095943203, 0.0195251039488213, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.00342995289485286, -0.00259182591384755, -0.00371794677692989, -0.0175569975586256, -0.0992137635313647, 0.2365470195983, -0.316839952784665, 0.389120107604863, -0.00534222456152059, -0.0036159069645112, -0.00430211705354452, -0.0107923090820134, -0.154527546186846, 0.330011368059035, -0.366622398302525, 0.239192632867617, -0.0287096173150647, -0.00678487933658831, -0.0056274256096779, -0.0113307209892052, 0.0223104495607474, -0.0704903705473226, 0.270046808008898, 0.0223409640327253, -0.201887847036957, 0.0916613069592547, 0.0311257440235669, -0.0815659404066918, 0.165998121769477, 0.025851215233689, -0.124100720402198, 0.0563443238094873, 0.00578284080485381, 0.00167695757540006, 0.00254796784356087, 0.00480288799507106, 0.00255145275287009, 0.0104681916872639, 0.167272676255486, 0.0485071595553236, 0.073701734940998, -0.438343036323648, -0.232862300323702, 0.892089521161031, -0.0413432822734827, -0.0219629172026517, 0.198471563814312, -0.062902862252903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0301544408087981, 0.0217651615841542, -0.0195929661997853, 0.0197079603842469, 0.0976637162240659, -0.196492083346238, 0.196789453010075, -0.0984800038037924, -0.0211833561662751, -0.00609264721184761, -0.00592810457681632, -0.0182965645424431, -0.10756082710638, 0.211570198073956, -0.205545302674772, 0.0921327651866989, -0.0274091197540599, -0.00716343427877026, -0.0059403136438697, -0.011246921862448, -0.139172828321605, 0.24875381038015, -0.20596862792998, 0.0566341297909968, -0.0258568697967754, -0.00749348392029719, -0.00638648725849449, -0.0122839984890327, 0.118945298523638, -0.302678515721805, 0.712701711629256, 0.0442580728498246, -0.272960595421595, 0.104369947911727, 0.139850019066563, -0.303301889052387, 0.438098662911986, 0.0443492233638009, -0.167789230656523, 0.0641563418218739, 0.0259826848221011, 0.00913669553498091, 0.0135841635533058, 0.00823962628291221, 0.00505449906476722, 0.0119195837084822, 0.131929947642522, 0.0463925792045309, 0.0689750885493811, -0.286125111813635, -0.175519988457197, 0.413287992708297, -0.160860258909837, -0.0986777798289385, 0.60859282392127, -0.0889892877687579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0298409049274021, 0.0274003458448222, 0.0107306055922188, -0.0116539403654934, -0.0616020791184594, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0591659989897212, 0.0242282398847587, 0.00787120988341571, 0.0116750304913959, -0.104973403820015, 0.141244824496285, -0.0642425604898813, -0.0203059794997371, -0.0610854342286926, 0.0232306873822271, 0.00669126628283981, 0.00717665632659228, -0.108378901130757, 0.135429332788424, -0.0546121987974085, -0.0124821118327562, -0.0201356771221164, -0.00749836629912192, -0.00664803468950688, -0.0119885014703201, 0.253826662117954, -0.426739376810484, 0.387395988763217, -0.129873073436885, 0.435799472520741, -0.0842133314492746, 0.243375823624968, -0.362768474720544, 0.238132814788185, -0.110404287296158, 0.267886498788715, -0.0517660436411064, 0.0452167068747917, 0.020085537226104, 0.0289883075262094, -0.0205119728904679, -0.0148321715329211, -0.00961759465884515, 0.0802243131397706, 0.0356361296383094, 0.0514315884793258, -0.119579879709269, -0.0864680007722815, 0.0784960528037531, -0.214893266576778, -0.155388943236063, 0.521420011906788, 0.158688002977296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0265020693494891, 0.0302582156650971, -0.00366448453027262, 0.011822383839741, 0.0220838867907564, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.105520857724535, 0.123094447614705, -0.0406925701304423, -0.0142549464553037, -0.0782883499269335, 0.0525038935933199, 0.00355522180364761, 0.00304407840610783, -0.089120607383092, 0.0989156565214025, -0.030222349687419, -0.00876253400272335, -0.0661206272102355, 0.0421908315553678, 0.00264046129850653, 0.00187119892902504, -0.0122845275854094, -0.00572826125448691, -0.00529430977445547, -0.00894093136026353, 0.300861406780797, -0.243089788685928, -0.0278777959462829, -0.422836525655092, 0.578614428417818, 0.236736750281293, 0.241764792404171, -0.180542653746287, -0.0171365171848398, -0.314040457459371, 0.355675036688131, 0.145522386249459, 0.0449173939628027, 0.0245123276814267, 0.0343599167627112, -0.0583454638191481, -0.0482901013499821, 0.0270365518840592, 0.0333252470857063, 0.018186259365489, 0.0254924120689171, -0.0248862892142949, -0.0205973412450431, -0.00236212503770406, -0.142605118785308, -0.118028295404669, 0.161511294647257, 0.280936830180622, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0190269258810565, 0.0257416392900367, -0.00428139506100089, -0.0295941247801589, 0.0263560489909356, -0.0712908034861192, 0.124137438646549, 0.383808683073226, -0.121303800469527, 0.223660496831055, -0.196471909613941, 0.0713076774021094, -0.0370696875098228, 0.00247955111857614, 0.00125087806345151, 0.00149639524287972, -0.0878504334226815, 0.157568839051331, -0.132636080114132, 0.0438329214248812, -0.0268465464558907, 0.00174684397405024, 0.000844454371940819, 0.000919836089062767, -0.00498781022541955, -0.00276472412449673, -0.0026493050315543, -0.00423354856605198, 0.189715199007309, -0.0148141401162545, -0.0112348646634433, -0.408354348391796, 0.0479359119350406, 0.539259559420539, 0.133654373845705, -0.0100008671933934, -0.00690608582347818, -0.275675643274785, 0.0294662669971708, 0.331483547871064, 0.0248315981213801, 0.0158283391111047, 0.0216664494002774, -0.0512176787686355, -0.0466361623797633, 0.0615862093229061, 0.00758838205535266, 0.00483704205785062, 0.00662113227785814, -0.000567810831510193, -0.000517019099185257, -0.000392101030648767, -0.0434442928364933, -0.0395581202410417, 0.00464364975090459, 0.128003012885621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00894945296698996, 0.0136019878329511, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0769454525440012, 0.181036347722613, -0.229609921292739, 0.17912205076676, -0.00755505789865066, -0.00292270344760456, -0.00238285241145427, -0.00332447825028227, -0.0502269898723962, 0.116925136398511, -0.145927351620367, 0.110106556022686, -0.00493164708263777, -0.00188767340681912, -0.00151440904534036, -0.00204356107550131, -0.000916248940524205, -0.000570886316972531, -0.000561763579208162, -0.000862826386782888, 0.0459034376839125, 0.0202583342166773, 0.0229909184989449, -0.123208195799601, -0.0756899671933498, 0.217522740600863, 0.0296474480394172, 0.0128750754489878, 0.0141325473043702, -0.0783043067552677, -0.0465267206212462, 0.133711509675399, 0.0055081887248165, 0.00389379030147006, 0.00524240817331128, -0.0145481290329099, -0.0140710083006507, 0.0248422133666613, 0.000540833582190827, 0.000382320334733712, 0.000514737336232554, 0.000234869226072947, 0.000227166450212353, 0.000257808232733576, -0.00368881245606499, -0.00356783408859128, -0.00219181234952919, 0.0133302788979787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201430117194883, 0.0267678423103473, 0.259211232824318, 0.0195251039488213, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.00458647086152805, -0.00287261154019111, -0.00301923029022306, -0.00555807139457086, -0.15986680450647, 0.404281086211673, -0.571256238409762, 0.554909447702642, -0.00337553010430104, -0.00205150924371678, -0.00205803437210181, -0.00341655366698144, -0.117658048548053, 0.288722082265174, -0.389392282440996, 0.341103554416912, -0.00574276601693985, -0.00312601768238482, -0.0029836730869056, -0.00479647185936965, 0.0297971880275008, -0.0882709367117853, 0.189806405664417, 0.0218620492158883, -0.0985550583339167, 0.0349667931625685, 0.0212800115225837, -0.0601691836488126, 0.116674242781905, 0.0149020923897653, -0.0605819216858594, 0.021494132932306, 0.00103865505607153, 0.000651456689925251, 0.000894002818805768, 0.00072735550872486, 0.000655925438529503, 0.00104910609763177, 0.0362035364034468, 0.0227072846284331, 0.0311615135421645, -0.102365415934278, -0.0923126030276813, 0.198497082175758, -0.0075447545040723, -0.00680382061772664, 0.0306719160336639, -0.00759650869077093, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0185719699093626, 0.0252996401097377, 0.00525730855264603, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0218777468924614, -0.00534047574345093, -0.0039743275840601, -0.00579219833361036, -0.133862165186805, 0.288868770391149, -0.324332910255171, 0.206851936598333, -0.0157466541584324, -0.00374279051727004, -0.00267315597091017, -0.00356047179888883, -0.0963481856909959, 0.202449247313067, -0.218148211810369, 0.127152152668922, -0.00470265394852339, -0.00262485806158852, -0.00251913179137695, -0.00401625659770297, 0.125636862646552, -0.316083324879609, 0.531027891320698, 0.0357549512968219, -0.134600295702079, 0.039814863022187, 0.0880506682779475, -0.212599492451485, 0.326423530855206, 0.0240489893012457, -0.0827389756646374, 0.0244742477384673, 0.00429766082129838, 0.00275646118252991, 0.00376947345663167, 0.00117380595892291, 0.00107275314758336, 0.00119456237747498, 0.0262958606114857, 0.0168658072497396, 0.023064069668563, -0.0634917000508116, -0.0580257073642747, 0.0974846396461408, -0.0276142623090699, -0.0252369538466303, 0.0950050643944833, -0.0107468543355462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0157384636757173, 0.0222798637815404, -0.0132573892568218, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0438437190827516, 0.0158018985425539, 0.0041843502344037, 0.00369599943203776, -0.0937368491673827, 0.147291418079094, -0.0985846245778226, 0.0136379351193379, -0.0304886776317673, 0.0107584088389603, 0.00275781261113285, 0.00227193562591228, -0.0651840819226074, 0.100280437182775, -0.0649749437055034, 0.00838325633735861, -0.00318156671073541, -0.00184603177137833, -0.0017870517166407, -0.00281237972201493, 0.199489724091347, -0.362716030615442, 0.354020818079538, -0.0831958264843426, 0.220586062558379, -0.0321255526459662, 0.135818617311492, -0.239058106385728, 0.217617054249946, -0.0548325275417144, 0.135594537640338, -0.019747618716016, 0.00662916434183087, 0.00440074726428651, 0.0059852753721542, -0.00267631819221339, -0.00249611820153046, -0.000963860569483051, 0.014172998801565, 0.00940869504609354, 0.0127963791968913, -0.0249462873527773, -0.0232666213244206, 0.0227088620848716, -0.0337869513785018, -0.0315120319233677, 0.083551246966671, 0.0191640690194888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0118031792992787, 0.0174601641969977, 0.0083248747703638, 0.0118223838397411, -0.0614326220634956, 0.26203544501963, 0.518569562880659, -0.0924570392473859, -0.0571355455781427, 0.0611192621110207, -0.0176401553036295, -0.004512731169427, -0.0510812001582031, 0.0451053215830698, -0.00657817017555986, -0.00268073106307862, -0.0382036012222133, 0.0402707906090503, -0.0113654215697481, -0.0027739816800604, -0.0341553717751242, 0.0297193862963563, -0.00423826638234818, -0.00164784884783943, -0.00166708789366014, -0.00101096290126277, -0.00098856745849664, -0.00153258545360944, 0.180012228074644, -0.182326851992764, 0.0376689424123681, -0.220879630062072, 0.316927383528958, 0.0903099165359302, 0.118608021325498, -0.117471841982963, 0.0231551475671938, -0.142311111700304, 0.194815672108919, 0.0555136223703433, 0.00578913319241672, 0.00399603386838144, 0.00540089350611572, -0.00694605618732211, -0.00662703513197324, 0.00270956171685507, 0.00517568999039116, 0.00357259572485575, 0.00482858996842372, -0.00512611061131802, -0.00489067669414958, 0.00101041956648683, -0.0204579539644996, -0.0195183534360833, 0.0280057544625234, 0.0339275351802631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00727374512952923, 0.0112160500006485, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.0509893480914854, 0.0895677407263758, -0.0730358568886419, 0.0225740853843904, -0.0187767257796371, 0.00406456138455539, 0.0014326134061539, 0.00128784458422849, -0.0328603051059606, 0.0572391342198012, -0.0460842819145464, 0.0138763194503271, -0.012100741843233, 0.00259749741088042, 0.000903952700718652, 0.000791639729753269, -0.000590624525008215, -0.000373344867856958, -0.000368625559679985, -0.000563356708674795, 0.0915504212460303, -0.0225418936754921, -0.010957717239141, -0.182923176377682, 0.0621173832613309, 0.205715782381084, 0.0585061854534173, -0.0142235201623358, -0.00673572294369949, -0.115421158702178, 0.0381836357431634, 0.126453757203726, 0.00285562558404519, 0.00204438250187344, 0.00274678048751685, -0.00563358576833797, -0.0054882304718023, 0.00617207533649829, 0.0010515784281988, 0.000752839780526503, 0.00101149643840156, -0.000255650695047915, -0.000249054508513316, -0.000121066531530313, -0.00575829138966999, -0.00560971849366782, 0.00190495835770914, 0.0154583744682551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00304595863694763, 0.00485293934295212, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0270708836687133, 0.0625083209661633, -0.0770601206703545, 0.0567052050431299, -0.00320297211812957, -0.00102381350470684, -0.000765049394997423, -0.000971775672177949, -0.0169490283234975, 0.039006953075305, -0.0478485849051342, 0.0348567628001822, -0.00200537469754942, -0.000638888466666784, -0.00047503858824346, -0.000597351761171435, -9.78802368936556e-05, -6.39179461702391e-05, -6.3600134020219e-05, -9.60985345167288e-05, 0.0190991109554808, 0.00689773991227452, 0.00696279311635696, -0.0498281220951644, -0.0243095118088308, 0.0829801901267502, 0.0119183832377096, 0.0042829817936301, 0.00428003792419041, -0.030939545772748, -0.0149430883155105, 0.0510080300769955, 0.000581723792626429, 0.000428493256672904, 0.000573029207156413, -0.00151012679740979, -0.00149498944557315, 0.00248964847991304, 6.88283807440959e-05, 5.06984541302101e-05, 6.77996550038705e-05, 2.47341183558501e-05, 2.44861861606084e-05, 2.4717117579657e-05, -0.000461411837892146, -0.000456786694266412, -0.000222851295041539, 0.00160984056801368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011212845430362, -0.0125131983511539, 0.0208770933958504, 0.0195251039488212, -0.00350519620228989, -0.00213578148775581, -0.00215103292273891, -0.00360148326124414, 0.110772181805886, -0.208071106282044, 0.201984382314542, -0.0990472496003534, 0.12211446906808, -0.22588143914298, 0.217718994875169, -0.10626977667799, -0.00226985035225343, -0.00179692337955243, -0.00280290297783895, -0.020199909014669, -0.00250226696008438, -0.00195073523785101, -0.00302124952471526, -0.021672886713827, -0.0688168296738454, 0.183176207073004, -0.294334759695954, 0.684912572298823, 0.0682600995319011, -0.0455513793747798, 0.0192696123733747, -0.046256117619921, 0.0135475095344601, 0.0197074695465101, 0.000589501209135587, 0.000632108757277614, 0.00392988617312117, 0.000641888290245403, 0.00276290821881126, 0.00401918370631303, 0.0162123406290093, -0.0593557148961154, 0.382855534749968, 0.0176530793253001, -0.259440152714044, 0.110534761061572, 0.0178723695424865, -0.0654333199232001, 0.422057231279378, 0.0191641359271617, -0.281647539217126, 0.119145434915934, -0.00579129401155796, 0.0851123010939679, -0.0249277235077291, -0.0253133873528492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0164398153896086, -0.0273770165770783, 0.0192875795853981, 0.0197079603842468, -0.0163810014243473, -0.00390242657177235, -0.00279689872237217, -0.00375319132544443, 0.180416762354003, -0.246495727242802, 0.220428635877593, -0.103219493481903, 0.0349131389634355, -0.121655788733428, 0.151792179115675, -0.0871793205263413, -0.0164552242707864, -0.00492616592994071, -0.00514129646939612, -0.0210508054013364, -0.00318431349806126, -0.00243126567889118, -0.00354041384624233, -0.0177795380457136, -0.0875743328428924, 0.191612435862306, -0.223629290575917, 0.195819938431223, 0.18340167254765, -0.15995899772086, 0.079852709360443, -0.0627187368589134, 0.0218860330331137, 0.022439867358159, 0.00366524434684607, 0.00373089742608197, 0.0162853332138362, 0.00146285721496159, 0.00446348462723385, 0.00457643479011282, 0.100800793821525, -0.294038759305838, 1.02865870250385, 0.0402311973122855, -0.351775278729851, 0.125860165397375, 0.0195063478381803, -0.0569005669447602, 0.199059686904237, 0.0198557520467495, -0.173615581371305, 0.0866701764653483, -0.0299334554728398, 0.261733439364735, -0.0913332599904382, -0.0358110939767411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0241754756606099, 0.0076985118385556, 0.0163965439250798, -0.0116539403654934, -0.0318063021955915, 0.0112436886986539, 0.00289018334287376, 0.00239490987846143, -0.0489992445746999, 0.26707988439606, -0.160437252917034, 0.0658643173647256, -0.00331321111484862, -0.0316540782798455, 0.0739736637383712, -0.0591471639811746, -0.0533456433751076, 0.0225203407828076, 0.00770119898836356, 0.0134325104780701, -0.00360710415218119, -0.00266909142798158, -0.00355083307641792, -0.0120625997765332, -0.0992018341832286, 0.148164197799285, -0.0843456371815979, -0.0185830554278952, 0.106637314753757, -0.176833383630821, 0.123463292225494, 0.100887065451003, -0.049982351679369, -0.018106131365599, 0.008991724232053, 0.00848823481059494, 0.0251793692370994, -0.00484271172850366, -0.0101935082532449, -0.00369260335515135, 0.247288544676479, -0.471191240681805, 0.598104697243667, -0.133183258819302, 0.565852843131988, -0.101553215623277, 0.0167210568633936, -0.0318608188635708, 0.0404424016727428, 0.0157847653325303, -0.067064392482707, 0.046823685194556, -0.0531762439644619, 0.225928762376926, -0.11193160198611, 0.0638592703693537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0299005753431566, -0.000692705759853974, 0.0123418011338163, 0.0118223838397411, -0.0399845505836984, 0.042201300145902, -0.0119330872043853, -0.00292413044299199, 0.00436230428657852, -0.0132065134800388, 0.346278038065548, -0.0804188321427706, 0.000123346670198339, 0.000224276439037207, 0.0207966526318344, -0.03109314934069, -0.105804882736616, 0.125936349182971, -0.0430093491732364, -0.0164007895111114, -0.0029916940953505, -0.00213868376258185, -0.00258304136084903, -0.00634120372040331, -0.082276953770366, 0.0620609909795397, 0.000808339326836378, 0.00069182371110268, -0.00123018051608063, -0.082360499023947, 0.108110410393763, 0.137130787640277, -0.129964235452737, 0.0508991465589974, 0.0117309116645632, 0.0102295585373872, 0.0220482695108044, -0.0170322841176123, -0.0265051855745517, 0.0103804813719167, 0.32262111230204, -0.296844513069609, -0.00689980563393291, -0.468418363737865, 0.769135723398207, 0.285481857011572, 0.00912229806172777, -0.00839344984860779, -0.000195095984610598, 0.00795480220857998, -0.0130616624471412, 0.0171453755662003, -0.0436329501586937, 0.0716446307025768, -0.0679004315061574, 0.11305467747162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0274659679169435, -0.0063064816626328, 0.00763236993753089, -0.029594124780159, -0.0344990911194156, 0.0601371945948343, -0.0484704728084979, 0.0146274102792545, 0.0395383094710884, -0.109983778158356, 0.203317202134924, 0.402280019603825, 0.000460484759394886, 0.000476087623059398, 0.00109193877884002, -0.011050090579167, -0.130480475709523, 0.243240342500803, -0.217371432971372, 0.0820418520171364, -0.00151964692640008, -0.00105291633395826, -0.00116741866689607, -0.00225357922813278, -0.0417930162395377, 0.00441662708652159, 0.00213506992707128, 0.00258275537263015, -0.00355544628755458, -0.00598583280785781, 0.0534650123740614, 0.0161051023871781, -0.10559117951605, 0.115942502867309, 0.00786323208030515, 0.00639960141743347, 0.0109037695623234, -0.0172183619845823, -0.021534492149777, 0.0236455632872447, 0.216252986347211, -0.0268441585068069, -0.0199416979909375, -0.473535838844076, 0.0903298944614691, 0.650295403023376, 0.00251860045911436, -0.000312641740036514, -0.000232251912742863, 0.00204979821318793, -0.000391011706139562, 0.00349248740788516, -0.0153079960375442, 0.00292009506579962, -0.0191452543972817, 0.0515110081076789, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0152327680704992, 0.0287678230747217, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630085, -0.0503948504088266, 0.0367434731025107, -0.179978494886956, 0.485949924576904, -0.766229854663151, 1.01051141642987, -0.000673485269869078, -0.000520749400288628, -0.000669087236009751, -0.00183577670380733, -0.0864392103719313, 0.204225002221373, -0.260674168295515, 0.206085870657986, -0.000323458282952733, -0.000218849807464032, -0.000227625898028226, -0.000374392247516084, -0.0088956829625518, -0.00332750776727578, -0.00269364658708953, -0.00377742729515847, 0.00469595144355348, 0.00448735510346721, 0.010913540761404, -0.0156696993884497, -0.0283431930980595, 0.046768073991902, 0.00197351752822271, 0.0015266144386367, 0.00222573096474376, -0.00533088841509641, -0.00578037173244154, 0.00953798155162805, 0.0542752718892435, 0.0232114501770188, 0.0263385347137, -0.146608993334404, -0.0878878170391831, 0.262311600776787, 0.000203099798998027, 8.68579870972955e-05, 9.85596371984366e-05, 0.000157107844851124, 9.41815724235634e-05, 0.000229055736824614, -0.0014167482678104, -0.000849299280487711, -0.00153620391228646, 0.0053643745480042, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0170982512251827, -0.0251141783214144, 0.0160091858217584, 0.0195251039488212, -0.00316207558373212, -0.00241577235429526, -0.00353354291864157, -0.0181912548602127, 0.0293790293907046, -0.114578371119061, 0.148172383047726, -0.0869289168370505, 0.163589384055956, -0.204331219412854, 0.180652919655244, -0.0841378732334325, -0.00335839069175079, -0.00254526063085197, -0.00367028490867594, -0.0177284701790033, -0.0187003136617071, -0.00453904348042368, -0.00447483985261495, -0.0171592587463129, -0.089361510440975, 0.190336131394752, -0.212238483655012, 0.159427677701374, 0.189862433322843, -0.0548926656233986, 0.0191290770071509, -0.171395695833932, 0.0195319060365617, 0.0873642936180386, 0.00421763175802385, 0.00135971169586803, 0.0039012250884114, 0.0042455349835919, 0.00398337890666903, 0.0178172618556883, 0.0201544183268214, -0.0570169166961804, 0.185032341811612, 0.02028775696638, -0.167035397269227, 0.0851417500342235, 0.112224567947569, -0.317483677185368, 1.03030384104418, 0.0361797962355779, -0.297879486990314, 0.103805482586356, -0.033617888495698, 0.276786505750101, -0.0315420290818586, -0.0984861631531851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.021438292355929, -0.00383082689433894, 0.0205403356838656, 0.0197079603842468, -0.0201247738104084, -0.00584323645333999, -0.00577935460978632, -0.0189575391547738, 0.0135858929586521, -0.128120058977521, 0.160325430484325, -0.0905906908173126, 0.0132794918987443, -0.130660138804077, 0.16531129124443, -0.0939995744532918, -0.020902712375065, -0.00602728243276224, -0.00589038572642261, -0.0184752602365971, -0.0204312959399309, -0.00614677799527313, -0.00607356716536522, -0.0191704752937163, -0.097633200088908, 0.170518145142877, -0.133170339698605, 0.0129416622398116, 0.481495556956455, -0.240406207919515, 0.104937381919501, -0.230416174847411, 0.0396909506048683, 0.0994771630117897, 0.0226514859192028, 0.00883256817957534, 0.0214011552624065, 0.00846553253191301, 0.0080946577937207, 0.0202875864800226, 0.108242622668801, -0.245024815275157, 0.469246332285472, 0.0404534804829547, -0.224554398029832, 0.096946468591543, 0.105801439419834, -0.239498799183869, 0.458663474463193, 0.0412555021999971, -0.229006363638902, 0.099961346469127, -0.152030613093807, 0.843911139358477, -0.145370156280727, -0.139329327795019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0272195064369148, 0.0115162223864431, 0.0267098865309274, -0.0116539403654933, -0.0579732173172457, 0.0239119304978305, 0.00786274267358264, 0.0120967981262487, -0.0568368116107849, 0.109442245504126, -0.114072987754541, 0.05780588345289, -0.0194120182105406, -0.0352876028153137, 0.111856327157735, -0.0946171790250351, -0.0588573409883913, 0.0241488423712535, 0.00787093469350963, 0.0117890561421182, -0.0201021088746967, -0.00778634204845795, -0.0077179870839254, -0.0192964308978001, -0.0960601434065918, 0.112964564404558, -0.0353243681982647, -0.0189181773662323, 0.220716232256439, -0.3420507329146, 0.23044406538496, 0.36232170122116, -0.119340321283624, -0.0802654736153622, 0.0487018653261888, 0.023601196336078, 0.0469972581018544, -0.0249998751193361, -0.0243385216796766, -0.0163695132433428, 0.232727232578612, -0.342407108105343, 0.215101221529171, -0.119464659358852, 0.353104253921159, -0.0782235236836697, 0.0794855508053783, -0.116945564495709, 0.0734655711869929, 0.0385191424984336, -0.113851854988648, 0.0767034880809726, -0.240928805691317, 0.712118434341345, -0.234555210079492, 0.248455666275406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030261652038557, -0.00801784374588164, 0.0302516266319404, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163357, -0.0147699151361858, 0.0450891617645782, -0.110330824686385, 0.228755234415405, -0.0705796677815746, 0.00643968899227103, 0.00649089001066517, 0.0403972016220276, -0.0722518641953718, -0.105632026424746, 0.123383715498899, -0.0408731176137133, -0.0143941691791135, -0.0150864946514279, -0.00725880667245114, -0.00721801875870324, -0.0147352005106212, -0.0720924778963434, 0.0401671985659732, 0.00641766861494239, 0.00627586360252869, -0.0519109273670001, -0.188485078243954, 0.278998016488917, 0.457575033785654, -0.395146024404499, 0.225638708936902, 0.0580523449520109, 0.033677798854235, 0.0568994552709831, -0.0817577714486643, -0.080586929699566, 0.0460172433773117, 0.277409530310443, -0.186358845866078, -0.0505903157787712, -0.39068852421984, 0.44593434611638, 0.219898470630842, 0.0396199669450188, -0.0266159973122155, -0.007225370507819, 0.02298465769968, -0.0262348332920278, 0.0388331348008337, -0.183819922143654, 0.209813218721953, -0.181187462435566, 0.439859006441802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0258677865545686, -0.000295237250846821, 0.0261981528295216, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693797, 0.00176428765404594, -0.0045625870305456, 0.007244604484628, 0.353061458146974, 0.000103788161142729, 8.2183803989889e-05, 0.000147945230318328, -0.0347719661720229, -0.121961990153499, 0.2250337245264, -0.197896745384656, 0.072004112783863, -0.00717468642842212, -0.00405343007898595, -0.00404133581581977, -0.00709146953368324, -0.0342850300686168, 0.000145593936763986, 8.06363412488768e-05, 0.000101147795129573, -0.000745002803480253, -0.000887527786823468, 0.178424152469219, 0.00289858008214597, -0.385626002220497, 0.513979475619877, 0.0367446701898158, 0.0242440923895321, 0.0363882052297267, -0.0791788655558166, -0.0786453959092752, 0.104822079207859, 0.175588457403319, -0.000870816268069403, -0.000726049966660603, -0.378364938100431, 0.00282484033908918, 0.500903861562423, 0.010329383119558, -5.12277116192705e-05, -4.27115106567879e-05, 0.00681531545619436, -5.08825635931397e-05, 0.0102291763923664, -0.0617813836177235, 0.000461254537812612, -0.0613651299539457, 0.200412591091128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0137109026229981, 0.0299453386201052, 0.014002682081672, 0.192230415140458, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.184439512927778, 0.487299390017091, -0.741538613135988, 0.886876346755306, -0.00348612303332102, -0.00245735051523462, -0.00294386828509739, -0.00715988564968109, -0.0775772130015773, 0.182572154863325, -0.231653156327064, 0.180871468758637, -0.00146630027813769, -0.000920673795231455, -0.000919650531979276, -0.00146020247167451, -0.00700687753076346, -0.00287885247894113, -0.00240040868105144, -0.00339743622479534, 0.023785331250659, 0.0204361518344429, 0.0435460183840247, -0.0765978577452829, -0.117058944746748, 0.207325437623335, 0.00891143980381008, 0.00638415719932314, 0.00888086860420226, -0.0239288085613584, -0.0238732528442567, 0.0422823954558634, 0.0425842975405795, 0.0199626044256028, 0.0231802335251374, -0.114346449732259, -0.0746492117914777, 0.202051088091407, 0.000804893149832258, 0.000377316628029637, 0.000438133590394714, 0.000576625608242609, 0.000376440608823958, 0.000802131918236959, -0.00558130841108468, -0.00364366602223518, -0.00556835024016874, 0.0208710379051665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0254129579368256, 0.0107425993815029, -0.0100835618309506, 0.0195251039488213, 0.00276855422334109, 0.00354739278284642, 0.0184970121822559, -0.0413981115341341, -0.00527925397357761, -0.0289195606742802, 0.0792937759693207, -0.0676531927685028, -0.0668972246841806, 0.26996967643304, -0.141961339914384, 0.057331901500994, -0.00476624355041205, -0.00338273614995218, -0.00435470127501941, -0.0137973375736296, -0.0603965005827015, 0.0315784943674161, 0.00779631465864195, 0.0116923912438847, -0.0987005432142834, 0.135372028365772, -0.0635582267339032, -0.0222957897716068, 0.109055095339958, 0.15377203670886, -0.0218610650020317, -0.208732280105511, -0.0795719254745866, 0.154730479224276, 0.012756231586569, -0.00844494131011607, -0.00445839259329864, 0.0114632796231683, -0.016228069544527, 0.0315560665716392, 0.0208463565738802, -0.0362021324157862, 0.0363463430762807, 0.0187334020168054, -0.0695671764823022, 0.051569228055887, 0.264159179791141, -0.458743261526414, 0.460570658542209, -0.174879920823443, 0.649423009457742, -0.0923254899097836, -0.0706432910926393, 0.26233645625731, 0.10000665415058, -0.135750409459011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0277849136316369, 0.0106226666604083, -0.0118196797021563, 0.0197079603842469, 0.0153251463175157, 0.00682473684164888, 0.0170656692030985, -0.0431419561966856, -0.0217181624512596, -0.0244158730639444, 0.0837575252759867, -0.0705030005191933, -0.0483096864799014, 0.0735262174169141, -0.100868692067401, 0.0557087659591239, -0.0260190574047764, -0.00708763218492721, -0.00629024608249962, -0.0143785334928047, -0.0578765587810756, 0.0213437702446784, 0.00757530613557626, 0.0113613654920689, -0.0945824300406853, 0.104754249861408, -0.0271010761760102, -0.0161008564820601, 0.208816727025424, 0.370860928123472, -0.0953864536822708, -0.273937984971186, -0.0912135817420512, 0.176183523808719, 0.0606169663210656, -0.0278519033674181, -0.0194533184251788, 0.020572925610385, -0.0186022939508753, 0.035931246603815, 0.0990608304482569, -0.13669587008386, 0.0695953213086702, 0.0336204732668515, -0.0912992093798989, 0.0587191894223526, 0.220350026027013, -0.304065071880222, 0.154807210805021, -0.101245047457608, 0.27493940115423, -0.0707151723594293, -0.28753905994854, 0.780836385935845, 0.259996376636918, -0.19204741754843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0300547935497051, -0.00262086915298644, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690784, -0.00648860340814756, 0.027528864934527, 0.00953046266998923, -0.00904585198043033, -0.055682659374989, 0.0449879363356469, 0.00740752011267512, -0.00240693191785884, -0.0250468724285162, 0.0248177503627264, -0.0629779646757729, 0.0247338267998053, 0.00750215134912612, 0.0091749364510831, -0.0489494116020336, 0.00658120841508747, 0.00337457711054299, 0.00506138536202266, -0.0799936001014609, 0.0564773593641097, 0.00278290510283725, 0.00246880960967894, -0.0415161074774566, 0.137785921551927, -0.082270730541784, 0.402484695490358, 0.0766458066681739, -0.14215779334252, 0.113516362413503, -0.0185639631595192, -0.0167784696518064, -0.0542269556656967, 0.0156313105845955, -0.0289919659842308, 0.185509533264767, -0.159308678962164, -0.0138366637603084, -0.0886182134630824, 0.134141800340848, -0.0473789501690622, 0.144186661900358, -0.123822135860404, -0.0107545004524867, -0.0235796481027299, 0.0356926225918725, -0.0213117429016785, -0.406714954274355, 0.615646310841458, 0.117238515266376, 0.342463929443952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0291131058185439, -0.0112132650061805, 0.00962857943557119, 0.0118223838397412, -0.0386200930353358, 0.054930104531135, -0.0255353246076024, -0.0336121174078453, 0.0538868521712186, -0.101042221662701, 0.0849937731483471, -0.054929246143886, 0.017514325572848, 0.00367186688349747, 0.00664416170108387, -0.0205131183769429, -0.099479430940483, 0.112846675863041, -0.0356794946677948, -0.0112023885451423, -0.0323328431907144, -0.00410083987857572, -0.0027891494071217, -0.00418348946077063, -0.0528386438915604, 0.0136495564365597, 0.00513055372915027, 0.00583724844800687, -0.108188894132857, -0.0432583250009817, 0.0961165087027932, 0.386897800957664, -0.189958312030145, 0.399627629543894, 0.120828272253816, 0.0181593912005347, 0.0196022074155314, -0.162415639580524, -0.0387405065266477, 0.0815009178862217, 0.197458726781111, -0.0604431390604203, -0.0360576518771371, -0.265421203189447, 0.128946934255838, 0.133189585327345, 0.0641781118900006, -0.0196452524780154, -0.0117194719847802, 0.00964538694945479, -0.0046859220811979, 0.0104117408727183, -0.284194329656931, 0.138067294932718, -0.067788005584599, 0.606288622857957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0224445447174007, 0.0122972972658715, 0.0280757815135755, -0.0295941247801589, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.0683914171489396, 0.159071760349638, -0.206289585296184, 0.274773179699455, -0.00915583372768258, -0.00430258606699983, -0.00537660975155976, -0.0312130576026595, -0.104568501634171, 0.189850631265637, -0.162829463999104, 0.0560378329736126, -0.0139990053434681, -0.00513509550091901, -0.00424389085237516, -0.0063656580691273, -0.0228773094223896, -0.00349760168066449, -0.00231316749585587, -0.00305149496021576, 0.0591095569907135, 0.0379494934220754, 0.177224025148592, -0.187830363035946, -0.45066283116216, 0.910306571261337, 0.070546693415936, 0.0299544723214318, 0.0361434486839316, -0.148259144018291, -0.091909146619416, 0.185649879114551, 0.115288086146479, 0.0204025052145787, 0.0197002829695776, -0.242286521734026, -0.0626008972232345, 0.303390821313913, 0.01543407918045, 0.00273136532565339, 0.00263735601303504, 0.00655338578226152, 0.00169323422072104, 0.00790739894148344, -0.0900313728410428, -0.0232618994971414, -0.055812453940607, 0.276242777973244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0111030516956889, 0.0299283676160424, 0.0249036082205117, 0.192230415140459, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.179896704701628, 0.459596310372119, -0.662594871472996, 0.69021930367927, -0.0077380195685299, -0.00465882113210355, -0.00499260080123185, -0.0101883216251351, -0.0625327818570341, 0.146258539859399, -0.18384166808212, 0.140764808621599, -0.00268976516544214, -0.00148258887390985, -0.00138523266460827, -0.00207782821502181, -0.00439564015111296, -0.00206072672104523, -0.00179668352082431, -0.00257895986512159, 0.0510514100330865, 0.0367063907025691, 0.0643230528044014, -0.155757438084702, -0.183128903994627, 0.367193083012778, 0.0162462241769458, 0.0101844496336549, 0.0131181816702357, -0.0432160109691648, -0.0373477023700645, 0.0748861467390755, 0.026549736093565, 0.0141558916760697, 0.0170146296952578, -0.0706240215419468, -0.0519114972451429, 0.122379662580786, 0.00114200189365339, 0.00060889701665881, 0.00073186186345949, 0.000715899315482776, 0.000526214799611699, 0.000922121235404187, -0.00784483208536721, -0.00576626720338063, -0.00677958116209455, 0.0287680203061015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302500012368685, -0.00674620730936921, 0.0100401662714875, 0.0195251039488213, -0.00508376488671081, -0.0317222402070976, 0.0822967853898158, -0.068632037336036, 0.00197276041282772, 0.00282759490804166, 0.0246420043988713, -0.0450325661822802, 0.0414434833137067, -0.117441550053526, 0.394513248650746, -0.0700756553903237, -0.00538804273701284, -0.00355870072593596, -0.00406902438226463, -0.00918403835795031, -0.113191271384467, 0.147807356790048, -0.0651442148090804, -0.0142913798085191, -0.0742698835373354, 0.0442577376376679, 0.00580669741102566, 0.00554578525152302, -0.0176773769273056, 0.212615825443168, 0.130126061606394, -0.107540712446678, -0.235656571469202, 0.170749967708241, 0.0222480575010767, -0.0351083038449267, 0.0265381887482211, 0.0177577186477451, -0.0480603077984885, 0.0348231154916577, 0.014597951055117, -0.0105124273528511, -0.00236550908394889, 0.0116516377961438, -0.0143906266881723, 0.022849012122038, 0.306671776781994, -0.220843648702357, -0.049694294153309, -0.483940043727634, 0.597701424519648, 0.365807823698724, -0.0728429636639771, 0.0899663991696789, 0.197145552539168, -0.0997158754837052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0300983577029972, -0.0108682780791434, 0.0110939404354584, 0.019707960384247, -0.0231802053744834, -0.0276298646655859, 0.0870824133797186, -0.0715230777133199, 0.0148432501155473, 0.0072131036535009, 0.0237118389394892, -0.0469295077882569, 0.054737695342548, -0.110840703140009, 0.115608731683716, -0.0560885983076512, -0.0269350059128873, -0.00688995031957114, -0.00551966637194145, -0.00957090470710668, -0.0993286602484076, 0.105874942979701, -0.026911520030389, -0.0114388293177888, -0.0651740009484616, 0.028828893208499, 0.00702557127231335, 0.0073247584242674, -0.102273132930751, 0.535746834338048, 0.257050201911992, -0.128570110450796, -0.309816855637989, 0.194424079547109, 0.0976912073872443, -0.12471170173331, 0.052423370782887, 0.0299286831739652, -0.0631847155811974, 0.0396512647545377, 0.0640995944875302, -0.0339579907193823, -0.0136857422900743, 0.0196375549684062, -0.0172046885375794, 0.0260169779825592, 0.236381119183878, -0.125227435768644, -0.0504691348713494, -0.301761974485488, 0.264377148370073, 0.126847598555409, -0.278436906801433, 0.243941787386094, 0.587829296106843, -0.141069013725581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0286160770881659, -0.0100304424671004, -0.00170955493305569, -0.0116539403654932, 0.00630079692715651, -0.00613847546289083, -0.0581932607657202, 0.0456388471838218, 0.0278670398224956, -0.0165823879066061, -0.0112119814106074, 0.0299457000850141, 0.035908399951192, -0.0395715317875214, -0.00282231830132856, 0.00532721841410365, -0.0578628584901559, 0.0216383431733444, 0.00606898946781382, 0.00610719045242126, -0.0745598627704423, 0.0516368564971356, 0.00152770678244087, 0.00108644437579392, -0.0489220790330341, 0.0099487718600078, 0.00412692477588729, 0.00480510466139435, -0.126171301109485, 0.248821960746169, -0.0306460030495002, 0.134356329875995, 0.457560220603032, -0.15687561199579, 0.164640818162663, -0.134686083023702, -0.0062500117445058, -0.0727264094623, 0.0933158150499539, -0.0319935495606554, 0.108028244942132, -0.0259497034408982, -0.016883690387748, -0.0477190678644039, 0.0179789750546525, -0.0209924066648647, 0.139201057956504, -0.0334377937414927, -0.0217556766329358, -0.113874830422633, 0.0429042901956703, -0.00528428039161087, -0.36308262200192, 0.136797588383316, 0.465874103411457, 0.251557919288668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0243807773710823, 0.0053786384813686, -0.0114222456646251, 0.0118223838397411, 0.0552995939385818, -0.104936601954282, 0.0910163993406656, -0.0557239934719332, -0.0220790357715199, 0.0324894082074788, -0.0161003738189842, -0.036563018108865, -0.0118969892080666, 0.00420827497900543, 0.00240439388633085, 0.0195514382990291, -0.0812967864767637, 0.0892023530796899, -0.0267723918023988, -0.00745674051607505, -0.0438056716503963, 0.0115541664574628, 0.0039981292295367, 0.00398736235826661, -0.0287428711768687, -0.00204387781190556, -0.00123786029074254, -0.00159200294020161, 0.0576723909467993, -0.0292076635307711, -0.122223005070746, -0.121504250912766, 0.450686934679817, 0.441001702974337, 0.15834431170101, -0.048567755039104, -0.0249264224083985, -0.202042477253413, 0.0919140623426248, 0.0899388353673564, 0.103896823889261, 0.00859140789289637, 0.00771746652451489, -0.132569155480525, -0.0162591661904653, 0.0590129145694339, 0.0559833955320348, 0.00462936371142379, 0.00415845224881605, -0.0171713641699439, -0.00210601072884699, -0.00881285693118489, -0.235325313207766, -0.0288618673204912, 0.107055238101477, 0.445351148958011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0168888172596303, 0.0265225731168815, 0.0116134748343782, -0.0295941247801589, -0.0648165501864931, 0.151531129548398, -0.19835664154622, 0.278748753109168, -0.136406455745617, 0.28376541171853, -0.302860847075892, 0.182899592666262, -0.0302745418665178, -0.00502674905678505, -0.00409850995120597, -0.00943905186116196, -0.0776057232015649, 0.138298675897828, -0.115271030719205, 0.0373009361247863, -0.0172240947344063, -0.00244988539799092, -0.00155992255535724, -0.00192502052858162, -0.011301503148731, -0.0037406076302286, -0.00292119558198603, -0.00405120647096807, 0.174811675791853, 0.0364890940310539, 0.0612509238451516, -0.457170278774761, -0.196463287614661, 1.00455203413528, 0.0851979215757076, 0.0138880133222231, 0.0124916450858426, -0.174002317425164, -0.040067145231711, 0.204870501421384, 0.0559021878246978, 0.0212049137663456, 0.0233925320915249, -0.114170745608983, -0.0611765225010689, 0.134424749317637, 0.012407133639517, 0.00470629521224732, 0.0051918231310798, 0.00202247231023239, 0.00108370863424536, 0.00181912313224371, -0.0703340806951784, -0.0376873641955271, -0.0161956798487158, 0.202914971390713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00773818110957645, 0.0260124381207849, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435897, -0.667777779660335, 0.700205786033841, -0.152061844875105, 0.373986514224841, -0.50782563534139, 0.459436505525797, -0.0108435935745078, -0.00531054391871699, -0.00498843785959971, -0.00844635187532107, -0.0433476663950504, 0.100657728235379, -0.125149498779012, 0.0936984686307276, -0.00309114016851025, -0.00142932235848221, -0.00122935995028929, -0.00172256715936882, -0.00202823607778979, -0.00108695820213274, -0.000995259096535743, -0.00145104215453635, 0.0688705436214522, 0.0394086713457847, 0.0558182505772274, -0.197907251068728, -0.170757133079534, 0.405209157119218, 0.0185363701620084, 0.0097119466274219, 0.0113836940204539, -0.0487726328729606, -0.0348245768128825, 0.0826392266190666, 0.0121625460717833, 0.00738565375592528, 0.00921595422346878, -0.0320019178067208, -0.0264830807255855, 0.054223312995279, 0.000867316232694188, 0.000526674049477645, 0.000657193539132755, 0.000454421706483315, 0.000376055172972232, 0.000532642719457486, -0.00589323248953554, -0.00487692496111111, -0.00420787879224338, 0.0211316366719473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02488002151319, 0.00349338776214516, -0.0283386095943202, 0.0195251039488213, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.000737780502525345, -0.000621569734380246, -0.0010901898447988, -0.02354706714562, -0.0213408121217801, 0.0567285276972922, -0.0929049606346427, 0.521879511054613, -0.00422947460640359, -0.00262076359232679, -0.00270891496297749, -0.00480223949501907, -0.122340482894466, 0.239188061792397, -0.230851203759359, 0.106433229417867, -0.0304844426488357, -0.00144195494716542, -0.000849780857684029, -0.00108449112971467, 0.00535047517400638, -0.0206694422318363, 0.362180965134431, 0.00655089853965141, -0.270767634055307, 0.122934171541447, 0.0225595452321249, -0.0513596430982683, 0.0738639646439447, 0.0162777402116466, -0.0552209333838469, 0.0250714592272948, 0.00562132130380532, 0.000309623694825012, 0.000271898877739928, 0.00405603955611858, 0.000332901640170793, 0.00624723266456587, 0.162600612797479, 0.00895607985992322, 0.0078648633924414, -0.37018075297663, -0.0303827855030737, 0.532383334467842, -0.0349144074259301, -0.00286561887202139, 0.118444338190402, -0.0375393217377866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02330143749075, 0.00932686977392249, -0.0195929661997853, 0.0197079603842469, 0.0976637162240659, -0.196492083346238, 0.196789453010075, -0.0984800038037925, -0.00968427887924579, -0.00305739080499712, -0.0035142006522027, -0.0245389584623718, -0.0491729940243788, 0.106169413017208, -0.121847957868655, 0.123566481166194, -0.0200092686815674, -0.00483826550316691, -0.0035480317529966, -0.00500452794251936, -0.101599268420436, 0.16801117071883, -0.123020984383692, 0.0252004138115013, -0.025316207669363, -0.00300028765102184, -0.00191419023133728, -0.00249885878459769, 0.0596887115499926, -0.1794288585119, 0.955860192068402, 0.0262363368356127, -0.366088874082172, 0.139978727185895, 0.094456303573869, -0.18115621457333, 0.194940182472839, 0.0264889132374164, -0.0746609519959459, 0.0285475625477053, 0.0235363446423737, 0.00323502747564213, 0.00303324343285014, 0.00660042969678809, 0.00133327046843737, 0.00711339789299568, 0.119508385589292, 0.0164262087773374, 0.0154016280466346, -0.229203196864413, -0.0462984786883526, 0.246643004355891, -0.128858614879586, -0.02602912139285, 0.363197492232308, -0.0531072416281617, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0202336576842804, 0.0190977808372876, 0.0107306055922188, -0.0116539403654934, -0.0616020791184593, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0433432647799653, 0.0190435548721712, 0.00697704744749566, 0.0156582995463821, -0.0769004177114557, 0.111019355037725, -0.0569446628060186, -0.0272339425429254, -0.0395959199906361, 0.0141639916635124, 0.00370744537983271, 0.00319338727160606, -0.0702518096504056, 0.0825726724762279, -0.0302591072534664, -0.00555414878956784, -0.0175051398490237, -0.00405247587043015, -0.00289524874373822, -0.00390790286721689, 0.19950941508979, -0.378262163481966, 0.519567159982301, -0.115119607905565, 0.584484870331949, -0.112945107132979, 0.148388770431382, -0.200999967524954, 0.105961643569101, -0.061171958721712, 0.119201100977507, -0.0230342679574023, 0.0369750785261229, 0.00986461372661264, 0.0101386109265573, -0.0152426492298347, -0.00585011446225236, -0.0057396113199179, 0.0656018645113007, 0.0175019791423129, 0.017988110014882, -0.0888609872432723, -0.0341047634675222, 0.0468450635759484, -0.159689304474723, -0.0612886051163678, 0.31117429138268, 0.0947022088715303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0156059973161051, 0.0283483789400613, -0.00366448453027264, 0.011822383839741, 0.0220838867907565, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.102213293977142, 0.124878367918978, -0.0445130476343746, -0.0191184272948392, -0.0758343923526161, 0.0532647951908287, 0.00388900865659855, 0.00408265242310401, -0.0508705214556544, 0.0541344006325357, -0.0155002588937238, -0.0038990531631878, -0.0377420092156793, 0.0230901301043674, 0.00135422408082176, 0.000832624912028898, -0.00940444314233829, -0.00342928295650861, -0.0027546652140804, -0.00385372990326808, 0.305221577224944, -0.265912605385222, -0.0373890997493766, -0.462535110161497, 0.776025214555274, 0.317506232833687, 0.13231264484422, -0.0925956420784959, -0.00762521338174617, -0.161063201374778, 0.158264250550675, 0.0647529036970642, 0.0329692767107085, 0.0137520514519178, 0.0155106605694833, -0.0401332560488802, -0.0235049735356556, 0.0161349385942962, 0.0244606642480472, 0.0102029630870852, 0.0115077156161064, -0.0171181742635491, -0.0100256563422972, -0.00140967467297025, -0.0980917344976773, -0.0574497025764963, 0.0963870996787592, 0.167658158602434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00987675823579537, 0.0290142634016863, -0.00428139506100089, -0.0295941247801589, 0.0263560489909357, -0.0712908034861191, 0.124137438646549, 0.383808683073226, -0.139268112846256, 0.263309019711057, -0.240581629561091, 0.0956363217673716, -0.0425594697223882, 0.00291910365758022, 0.00153171149747929, 0.00200693308424856, -0.0448012227061958, 0.0784639261814975, -0.0636937172730273, 0.0195042770596191, -0.0136909752155194, 0.000869868924945262, 0.000405518905339503, 0.000409298247693979, -0.0034114770425107, -0.00168582891470664, -0.0014977638098847, -0.00216277464680899, 0.223346204549639, -0.0181400485021903, -0.0150679586141472, -0.500033591404991, 0.0642906130875653, 0.723243311516806, 0.0665553353467775, -0.00480255754658115, -0.00307299187277439, -0.132383333906543, 0.0131115658446462, 0.147499795774797, 0.0165840632254413, 0.00930748316716322, 0.011349941900401, -0.0329868908038961, -0.0254105603546715, 0.0367535664289514, 0.00506798665030002, 0.00284430900906867, 0.00346847170388685, -0.000365700171241691, -0.000281707249352727, -0.000233998998075246, -0.0279804196188499, -0.0215539605020873, 0.00277124849002818, 0.0763899465305748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00422403562884665, 0.0171539738450264, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.0977269276576106, 0.232125215917279, -0.298701660335599, 0.240234638216595, -0.0095955325792422, -0.00374749699368048, -0.00309987463794571, -0.00445871865745573, -0.0235420783828846, 0.054296528623331, -0.0668187951761428, 0.0489939685728515, -0.00231153056297284, -0.000876578948905824, -0.000693434004590907, -0.000909320668327838, -0.000575980404939055, -0.000344874274678806, -0.000329816258202486, -0.000487622959599417, 0.0588574919775218, 0.0263542534751365, 0.0308349249253134, -0.160282676136513, -0.101513754490212, 0.291736816703684, 0.0137673862153513, 0.00589537889744926, 0.00628854087800163, -0.0358548234884833, -0.0207029333243835, 0.0594974335725771, 0.00343051691130147, 0.00231943115192538, 0.00299100276046881, -0.00893419973878685, -0.00814519801425941, 0.014825395965297, 0.000336832821567229, 0.000227738431127686, 0.000293678161388757, 0.000144236318875347, 0.000131498445572652, 0.000153855418475581, -0.00226534884361098, -0.0020652901705885, -0.00130803505644983, 0.00795527596810677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0106036055567763, 0.0296266593660007, 0.259211232824318, 0.0195251039488213, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.00517932982837462, -0.00333411005738314, -0.00365885144162158, -0.00745436569613299, -0.18053159698292, 0.469230738890094, -0.692276345467663, 0.744232604758411, -0.00174302461810584, -0.00103224751682528, -0.000995395188471927, -0.00152025936541933, -0.0607551610563963, 0.145274827975367, -0.188334660306985, 0.151780397361144, -0.00397712490619136, -0.0019061204268898, -0.00167493200389358, -0.00241016220156645, 0.0345842460403174, -0.106971053214143, 0.25456426498465, 0.0264935041720338, -0.132179922471373, 0.0468967101986917, 0.010707355630727, -0.0291016110858971, 0.051916383461673, 0.00720759150771042, -0.0269570575484026, 0.00956421589618274, 0.000700919724644604, 0.000381836111040625, 0.000461712209768727, 0.000471819861893912, 0.000353697875660922, 0.000626088065400451, 0.0244313765371237, 0.0133093441036106, 0.016093518918104, -0.0664022418603691, -0.0497781754902043, 0.118459567099648, -0.00489411984295713, -0.00366885739980179, 0.0183044599731069, -0.00453346276486149, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00958841840105442, 0.0287142087112329, 0.00525730855264603, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0252758904406234, -0.00632110314145195, -0.00488566882918307, -0.00776837170631515, -0.154654198992136, 0.341911353913745, -0.398704725867905, 0.277425364104441, -0.00799167084001756, -0.001856310970787, -0.00128014616296236, -0.00158429842618409, -0.0488981962979721, 0.100408707642264, -0.104468874747729, 0.0565787251628152, -0.0032009500260229, -0.00160037367631408, -0.00142790422348552, -0.00206468956655627, 0.148706520787247, -0.388563452590705, 0.71220317547873, 0.0439538129017002, -0.180523018821064, 0.0533988371215841, 0.0436704701359281, -0.101811651647421, 0.145248246697174, 0.0115168069922353, -0.036816252545652, 0.0108902736390701, 0.00285873514978317, 0.00162273463193134, 0.00198528590849269, 0.000753907637346287, 0.000586799320677924, 0.000712893814650208, 0.0174915853413358, 0.00992893703459021, 0.0121472595661699, -0.0407792081924058, -0.0317402430744735, 0.0581771181962355, -0.017735983614867, -0.0138046925395086, 0.0566973513015152, -0.00641353363141411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00787931986789135, 0.026266017636219, -0.0132573892568218, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0524224823609091, 0.019258610236164, 0.00525321344488666, 0.00495699486804389, -0.112078045039237, 0.179511848166741, -0.123767382336513, 0.0182909049745176, -0.0150561962143104, 0.00521607980877912, 0.00130030386482798, 0.00101094018990614, -0.0321897964657496, 0.048619714256478, -0.030635573307692, 0.00373028648217898, -0.00210719285445275, -0.00112365340857579, -0.00102691121281125, -0.00149628249178218, 0.24312868685045, -0.455369321869514, 0.474805099586671, -0.10444762263269, 0.295845278163647, -0.0430860995861488, 0.0658499558828106, -0.112715482697028, 0.0968327727428123, -0.0258534416707464, 0.0603353220350696, -0.00878707177583357, 0.00431063789576671, 0.00260497492156458, 0.00324585602164089, -0.00169240546797412, -0.0013944135891988, -0.000575215033661109, 0.00921604331712921, 0.00556937564641009, 0.00693956449600757, -0.015775117190597, -0.0129974986479508, 0.0135522494457503, -0.021365628879823, -0.0176036557524691, 0.0498619145320433, 0.0114367792968678, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005699287450078, 0.0214698480958179, 0.00832487477036378, 0.0118223838397411, -0.0614326220634956, 0.26203544501963, 0.518569562880659, -0.0924570392473858, -0.0709478783134301, 0.076903345269954, -0.0226501029881942, -0.00605237789102634, -0.0634299145349295, 0.0567537957659614, -0.0084464240470514, -0.00359533878904298, -0.0182709161061168, 0.0190137982809252, -0.00526293094004145, -0.00123433495846102, -0.0163348457295084, 0.0140319672776629, -0.00196259356847501, -0.000733241121875035, -0.001069303753953, -0.000612888851788037, -0.000575990819905128, -0.000846812331002241, 0.226500485285503, -0.234109161969773, 0.0505207745986584, -0.283611242802992, 0.425056183742284, 0.121121715799415, 0.0560006137916715, -0.0543971191883832, 0.0103033153809034, -0.0658993199929187, 0.0866868718955926, 0.0247018231068582, 0.00366588503758718, 0.00237595963988629, 0.00302386350863129, -0.0043138693452171, -0.00378631280488643, 0.001617018771713, 0.00327743098393695, 0.00212419201925493, 0.00270344101158933, -0.00318358660367839, -0.00279425586598723, 0.000603000624105221, -0.0127054746021768, -0.0111516824754391, 0.0167133416449521, 0.0202473562137974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00339108928439731, 0.0143344773818663, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414865, 0.462498877065499, -0.0655314248951062, 0.115979237022268, -0.0956568846043593, 0.0302758773259639, -0.0241318165707196, 0.0052631083958121, 0.00187632953336971, 0.0017272294306981, -0.015235372634663, 0.026343125984304, -0.0209745648569957, 0.00617452750875351, -0.0056103955986722, 0.00119544438383642, 0.000411420418442218, 0.000352254883283672, -0.000367264997427229, -0.000225042499060368, -0.000217247209950826, -0.000322168490867422, 0.118546565081049, -0.0295236807499634, -0.0146962544553073, -0.239579049519496, 0.0833104971211984, 0.275901578528231, 0.0269262600713356, -0.00647362037001869, -0.0029971857275332, -0.0525321970635785, 0.016990521883296, 0.0562679610565785, 0.00176263378613842, 0.00121865954262175, 0.00158263957699846, -0.00343883722280963, -0.00319846707772573, 0.00368338599466484, 0.000649086377665672, 0.000448768946986919, 0.000582803868995866, -0.00015605356203308, -0.000145145625740818, -7.2250376469691e-05, -0.00351495966953588, -0.00326926866673902, 0.00113684563986326, 0.00922528597146994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00138044771170169, 0.00638882353038111, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0357169332052307, 0.082715527617015, -0.102424732574839, 0.0760518002123166, -0.00422595518496749, -0.0013547840177805, -0.00101686811553745, -0.0013033246104207, -0.00766460049150903, 0.0175880306956037, -0.0214801029408928, 0.0155101676309956, -0.000906860003955772, -0.000288071461032006, -0.000213253491123779, -0.000265802822928669, -5.9364430041068e-05, -3.83065599433049e-05, -3.77810915961584e-05, -5.64180322033814e-05, 0.0252733238596133, 0.0091681554575778, 0.00933834822750593, -0.066229225128466, -0.0326033938848818, 0.111291244539186, 0.00537393653439483, 0.00192270868623531, 0.00190448281304146, -0.0138893267054969, -0.00664920623945957, 0.0226969756645593, 0.000351786028768911, 0.000255673905629774, 0.000337408026586029, -0.00090921637290052, -0.000884184141232383, 0.0014857784201566, 4.16226103098303e-05, 3.02508185953789e-05, 3.99214342172122e-05, 1.48919053797034e-05, 1.44819065756759e-05, 1.47507410000144e-05, -0.00027780660430704, -0.000270158128669245, -0.000132993732949987, 0.0009607245340639, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0224419087355455, 0.310703073843137, 0.0208770933958504, 0.0195251039488213, -0.00350519620228986, -0.00213578148775586, -0.00215103292273889, -0.00360148326124412, 0.354215091736513, -0.393270742690669, 0.286443388274844, -0.115220749339439, 0.390484209646641, -0.426933671469901, 0.308757369600584, -0.123622648285321, -0.0037844525075111, -0.00231961445844546, -0.00235756395016134, -0.00402640927558312, -0.00417195365419277, -0.00251816728181541, -0.00254121852244856, -0.00432001510649606, -0.13347157028838, 0.33533302108994, -0.467925628811811, 0.436556032512804, 0.129016952515557, -0.0645985164753277, 0.0224161618429519, -0.0655979383537513, 0.0157596925360571, 0.0229255170425749, 0.000760975979021739, 0.000531676205177792, 0.000783336703543932, 0.000539901917789506, 0.000550725217214338, 0.000801136210248134, 0.0243455865742153, -0.0708009310625635, 0.144239197195842, 0.0172728564941386, -0.0733376023953637, 0.025630416073592, 0.0268384022973471, -0.0780504452045672, 0.159008269921432, 0.0187513670337179, -0.079615105952797, 0.0276270291882517, -0.00566655757523464, 0.024059236904103, -0.00578015385508159, -0.00586958024656284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0208311675729531, 0.0168212127674997, 0.019287579585398, 0.0197079603842469, -0.0163810014243472, -0.00390242657177244, -0.00279689872237219, -0.00375319132544437, 0.762426252400217, -0.486472830393036, 0.315036567668793, -0.120074282056387, 0.147540025395148, -0.240094368128955, 0.21694135572351, -0.101414897218028, -0.0177608566866902, -0.00425338581439355, -0.00307308040887649, -0.00419601682685217, -0.00343697142949098, -0.00209922099594037, -0.00211619316158206, -0.00354396135402686, -0.109957591036383, 0.236451671291947, -0.263802651514286, 0.164947740605517, 0.361953254691465, -0.228613371439198, 0.0928919182149797, -0.0896376076996027, 0.0254598197962892, 0.0261040901440182, 0.00316467178184311, 0.00223004992142923, 0.00324612435929931, 0.000874386037654317, 0.000889697864058712, 0.000912212004253402, 0.101246022171265, -0.251187955916101, 0.404658813134064, 0.0279738671992904, -0.10021362558217, 0.0291840175456562, 0.0195925056820642, -0.0486083437947557, 0.0783070774100662, 0.0138062550459613, -0.0494595496579402, 0.0200967791728537, -0.0208135617171245, 0.0745625360302079, -0.0211780387674474, -0.00830375195874445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017839608305958, -0.0155588635177619, 0.0163965439250798, -0.0116539403654934, -0.0318063021955914, 0.0112436886986538, 0.00289018334287377, 0.00239490987846142, 0.161426388204999, 0.609621358264413, -0.233929227326291, 0.076619351189609, 0.0109152642713775, -0.0722517992667376, 0.107859002109445, -0.0688053487876893, -0.0347130258988219, 0.0123225323775475, 0.00318776431988758, 0.00267747665318691, -0.0023472113547107, -0.0014604559432355, -0.00146979957328503, -0.00240441497001847, -0.0750933522468875, 0.118208186061103, -0.0796910370126105, 0.0122031169159269, 0.243404271380665, -0.257835982891349, 0.143623705893241, 0.147100706594461, -0.0581440074053681, -0.0210626951480255, 0.00492003269613198, 0.00351354277547276, 0.00501895556935238, -0.00200454808179236, -0.00203185252724577, -0.000736039572724698, 0.157404550542626, -0.284383462616917, 0.272122663056646, -0.0641306693151908, 0.164456588164784, -0.023547806545544, 0.0106433172778929, -0.0192293260314469, 0.0184002802424233, 0.00760071179165149, -0.0194912534396818, 0.0108573133203488, -0.0256055314109388, 0.0656627847324156, -0.0259543106904594, 0.0148074655791841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0135427001430303, 0.00894872042728923, 0.0123418011338163, 0.0118223838397411, -0.0399845505836983, 0.0422013001459019, -0.0119330872043851, -0.00292413044299211, -0.0670830605102295, 0.297174981210494, 0.535772970512815, -0.0935504836114051, -0.00189681223432852, -0.00504670264847026, 0.032177277021455, -0.0361703730372399, -0.0439702312640466, 0.0465429183672365, -0.0132189650130179, -0.00326913804247676, -0.00124328365422671, -0.000790403917701118, -0.000793900257330035, -0.00126398002385333, -0.0397758545272403, 0.0354876359854277, -0.00559052193272502, -0.00212061026536665, 0.0276817096582155, -0.127430920717603, 0.125763840462251, 0.212173344440879, -0.151186193020126, 0.059210506409102, 0.00433545094422054, 0.00314406469764711, 0.0043948394423159, -0.00523488897578156, -0.00528322800716246, 0.00206912152181282, 0.13870227078189, -0.141162538552778, 0.0309477746936239, -0.167477615955912, 0.237206911741455, 0.0661965404040852, 0.00392188671994374, -0.00399145221042687, 0.000875066182395582, 0.0028441483349687, -0.00402830933090306, 0.00397561007306054, -0.015600461116402, 0.0220957122063315, -0.0157445159727613, 0.0262147255291867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00844321113047151, -0.0109738205691143, 0.00763236993753087, -0.029594124780159, -0.0344990911194155, 0.0601371945948342, -0.0484704728084979, 0.0146274102792544, 0.0736287355315529, -0.227812559637076, 0.539364215954557, 0.46796862598466, 0.000857520491375143, 0.000986133972089327, 0.00289671851242861, -0.0128544681648157, -0.0382116443014458, 0.0667196416010179, -0.0539112807906318, 0.0163532456363013, -0.000445033691819308, -0.000288809823713089, -0.000289536829614038, -0.000449201642484057, -0.0142377769749929, 0.00321378511702105, 0.00109682745775005, 0.000958696239860519, -0.007364498046737, -0.0158793451087473, 0.0621953543792271, 0.0427239595603112, -0.122833242483405, 0.134874841195124, 0.00215684627323624, 0.00158719434401893, 0.0021734275571577, -0.00427040450999794, -0.00429242918242228, 0.00471322495943037, 0.0690030817265088, -0.0176618007484959, -0.00823340859708788, -0.136621267387051, 0.0477648053829506, 0.150788237023003, 0.000803647599287571, -0.000205698983515808, -9.58907759979505e-05, 0.000591393526743218, -0.000206759878969865, 0.000809825837014503, -0.00441655656921467, 0.00154409316372154, -0.00443933502297762, 0.0119441934599614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00356846422868555, 0.0261188035535262, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630085, -0.0503948504088265, 0.0367434731025107, -0.166915283235762, 0.464278848231276, -0.769187724303446, 1.17551858417977, -0.000624602315103913, -0.000497526431336783, -0.000671670106945992, -0.00213554205983534, -0.0198704873172244, 0.0457735732543994, -0.0562285998280994, 0.0410787029080855, -7.4355997485169e-05, -4.90514755036109e-05, -4.90999381118689e-05, -7.46268914880465e-05, -0.00237884036290431, -0.00074868349663016, -0.000555120501094694, -0.000698296888437269, 0.00448653414127223, 0.00450467759663949, 0.0126956210248063, -0.0157301889762824, -0.0329713743754392, 0.0544048679014512, 0.000442330508822652, 0.00032929765508909, 0.000443650701341412, -0.00114989679790922, -0.00115219045506158, 0.001901187642079, 0.0141512951707223, 0.00502614278802633, 0.00501588411531288, -0.0367881678484816, -0.0175861372125044, 0.0608239019496669, 5.29545980090087e-05, 1.88079866667813e-05, 1.87695983851926e-05, 3.9422614092417e-05, 1.88455022700749e-05, 5.31126478445338e-05, -0.000355500518010057, -0.000169942708606756, -0.000356209621911054, 0.00124387251864966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0206121464512044, 0.00186778322923232, 0.0160091858217584, 0.0195251039488212, -0.00316207558373207, -0.00241577235429528, -0.00353354291864161, -0.0181912548602126, 0.132011178619608, -0.227738706732715, 0.212018681376458, -0.101123604922342, 0.735069464402223, -0.406133611428701, 0.258494822208368, -0.0978768097135354, -0.00345830596482646, -0.00210523271754555, -0.00211720616941654, -0.00353378209371144, -0.0192566655330659, -0.0037543278379912, -0.00258131419735604, -0.00342032226620991, -0.107046130267054, 0.22526615807223, -0.243344599888121, 0.142792530306416, 0.377375106660751, -0.0785454775264239, 0.0222526783512815, -0.245248734459552, 0.0227212856352967, 0.101630074704722, 0.00348848218525236, 0.000784350551183495, 0.000777623744280587, 0.00244903953872512, 0.000793999307934268, 0.00355148076900435, 0.0193921693138193, -0.0470623884943941, 0.0733078286670003, 0.0136139979708023, -0.0476413305733009, 0.0197423729662323, 0.107980185164328, -0.262054509821076, 0.408195327988219, 0.0242782715384184, -0.0849602859197405, 0.0240700543779735, -0.022559116146823, 0.0789442096360898, -0.00731385603414916, -0.0228366290826987, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0190287287217083, -0.029511852567589, 0.0205403356838656, 0.0197079603842468, -0.0201247738104083, -0.00584323645334003, -0.00577935460978643, -0.0189575391547736, 0.228014045330251, -0.271715104548499, 0.231653750460452, -0.105383312724627, 0.222871671150234, -0.27710206784794, 0.238857806241638, -0.109348835528473, -0.016151178736553, -0.0038444737534587, -0.00275184717215812, -0.00368263832928268, -0.0157869230855836, -0.00392069343601961, -0.00283742515434069, -0.00382121421853466, -0.0877581335269883, 0.157153073341714, -0.131942507994804, 0.0432944250827255, 1.02114857456486, -0.347362233990544, 0.122072685786528, -0.332927664119839, 0.0461721157239616, 0.115720863634552, 0.0144481437637406, 0.00412636436673912, 0.00426585139537855, 0.00395489410044148, 0.00161349267462809, 0.00404388585725967, 0.0803159756186611, -0.16539697697435, 0.198365455024693, 0.0219849126185116, -0.0646735932737133, 0.0224796100611511, 0.0785046187846286, -0.161666798236395, 0.193891742045087, 0.0224207806119903, -0.0659557975662854, 0.0231786894608936, -0.0826227979472465, 0.243053648758977, -0.0337079263968619, -0.0323072000911189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0161577642134769, 0.00567780449458311, 0.0267098865309274, -0.0116539403654934, -0.0579732173172456, 0.0239119304978305, 0.00786274267358258, 0.0120967981262489, -0.0380248596464323, 0.301987998765445, -0.169129303002115, 0.0672450495550815, -0.0129869928834947, -0.0973703756382157, 0.165842790839071, -0.110067289214354, -0.0313276643913112, 0.0110671468330954, 0.00284192495165227, 0.00234989003992698, -0.0106996359300071, -0.00356839426992876, -0.00278670080802753, -0.00384632070848103, -0.0594783463215327, 0.076756935940108, -0.0351937372957312, -0.00252281677407682, 0.609030388285102, -0.507138483772254, 0.268073449809222, 0.537193055045898, -0.138827491931281, -0.0933720830549347, 0.0223195251484257, 0.00852158369598157, 0.0093678736775922, -0.00902659870223843, -0.00485135103201975, -0.00326290380377054, 0.124072300702037, -0.183301116519789, 0.118308533258758, -0.0501780777616424, 0.104353614600789, -0.0181381986942386, 0.0423755958927613, -0.0626045781079556, 0.0404070414401214, 0.0161789816165831, -0.0336468690624244, 0.0177857381237389, -0.10119598893832, 0.210453801737449, -0.0543878465817414, 0.0576110360335698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0121457494920628, 0.000689573107347394, 0.0302516266319403, 0.0118223838397412, -0.105865563934372, 0.12409022809239, -0.0413394531163356, -0.0147699151361859, -0.0044336067745949, 0.0139910499734398, 0.368517130449206, -0.0821046747156994, -0.000633213118741905, -0.000823109650176448, 0.0650785581277397, -0.084049925337174, -0.0393358416198604, 0.0414974536399692, -0.0117258358154833, -0.00286916224498864, -0.00561799280287571, -0.00244134318822852, -0.00207073274119965, -0.00293713936881893, -0.0312299337797293, 0.0217631516226339, -0.000233473059959214, -0.000123006202579583, 0.00658282380308211, -0.30364323834803, 0.324555812036961, 0.737138272909101, -0.459669715353957, 0.262483423099521, 0.0195246551264624, 0.00966161533660865, 0.0113416597229392, -0.0234549811860999, -0.0160632387501085, 0.00917252921469248, 0.108535861128071, -0.0861276695976379, 0.00127876086944744, -0.13038420214274, 0.143194411238385, 0.0509892927988104, 0.0155012238600135, -0.0123008586572026, 0.000182634184634218, 0.00767065339756531, -0.00842429281329393, 0.00900449227761789, -0.0613460913255663, 0.0673733265593311, -0.0420131188138639, 0.101992977055791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00750148626092455, -0.00713114387718277, 0.0261981528295216, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693796, 0.0450881185414647, -0.127068618871476, 0.241702073048266, 0.410713128680599, 0.00265240926107746, 0.0022888292095453, 0.00493590353226538, -0.0404499066305403, -0.0339007738939036, 0.0590785907491447, -0.0475981981984885, 0.0143524422502374, -0.00199428872932818, -0.00106415577163248, -0.000972023581156298, -0.00141352907516585, -0.0110860777398483, 0.00127523875639668, 0.000540144332047328, 0.000515249575909766, -0.0207484211610254, -0.0296106304241303, 0.207559166263658, 0.0967054607656752, -0.448595161601129, 0.597907570023055, 0.00964665779284885, 0.00583119804449805, 0.00725319143528776, -0.0190441299503534, -0.0156762365286428, 0.0208939848046817, 0.053624932362346, -0.00698785830119775, -0.004030530039573, -0.105864663432387, 0.0187857312892309, 0.116147845812617, 0.00315460639795224, -0.000411076369401528, -0.000237104930297444, 0.0019068920090158, -0.000338378829323386, 0.00237190585575581, -0.0172861296713006, 0.00306743134590183, -0.0142291329716047, 0.0464709748021351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0031468891813879, 0.02849036321081, 0.014002682081672, 0.192230415140458, -0.0792712548026677, 0.186695351837455, -0.237148368754727, 0.185592944676424, -0.178725093630067, 0.48438729810939, -0.768528380851087, 1.03169505116885, -0.00337811380894402, -0.00244266543518651, -0.00305101620671756, -0.00832902875213214, -0.0175130233754289, 0.0403122421171731, -0.0494632043101812, 0.0360527643450898, -0.000331016674263275, -0.000203286338884036, -0.000196366252368118, -0.000291059369223448, -0.0018400929264185, -0.000658791463301656, -0.000509478771102228, -0.000656222903823666, 0.0236431905624578, 0.0211799660893331, 0.0506566804146617, -0.079385788611454, -0.136173587707136, 0.241179763965931, 0.00196766105572164, 0.00136316239720354, 0.00177020657356523, -0.00510934349238298, -0.00475860988386843, 0.00842806911326764, 0.0109380568162508, 0.00441760993533459, 0.0045928598158754, -0.0284023964650358, -0.015421260404848, 0.0468509037896223, 0.000206742097729245, 8.34980070348783e-05, 8.68104352410148e-05, 0.000143227438854058, 7.77662418170637e-05, 0.000185995560245967, -0.00138633542761056, -0.000752719569419944, -0.00129116969293944, 0.00483950370236205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0172198053622792, -0.00652877742132636, -0.0100835618309506, 0.0195251039488213, 0.00276855422334113, 0.00354739278284644, 0.0184970121822559, -0.041398111534134, 0.00480559727387798, -0.069622949057168, 0.116257872529598, -0.0787003334009248, 0.0608951799214981, 0.649943657200637, -0.208138951111156, 0.066693670734456, -0.00286607158261692, -0.0017259633548569, -0.00170726307853483, -0.00275019694120757, -0.0363180547067533, 0.0161122007935748, 0.00305654953686391, 0.00233062201042269, -0.0690428357230216, 0.10126879776982, -0.0599894079180593, 0.00404544389461584, 0.262546773541793, 0.225455398280341, -0.0254307747166693, -0.306036262199291, -0.0925652849176253, 0.179996535328407, 0.00650857391428473, -0.00331084397955423, -0.000888682878661194, 0.00449418520894249, -0.00323471010148803, 0.00629001046750746, 0.012373195733733, -0.0208093974068783, 0.017441745692269, 0.00854372002011954, -0.0203308788978238, 0.0119576932991248, 0.156789663691808, -0.26369084359981, 0.221016906233311, -0.0797572741627937, 0.189792675603336, -0.0214081135912333, -0.0322182004023546, 0.0766673450374752, 0.0231891952485372, -0.0314773329510056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0157648753004525, 0.0085857473144991, -0.0118196797021563, 0.0197079603842469, 0.0153251463175157, 0.00682473684164889, 0.0170656692030985, -0.0431419561966855, -0.0231797827124803, -0.0726756131892203, 0.124780298683106, -0.0820154883984919, -0.0515609015277078, 0.218856107347193, -0.150272175335546, 0.064805492171514, -0.0132859312546027, -0.00313228338759667, -0.00220943154814883, -0.00286604561350583, -0.0295531067577093, 0.00943259119854738, 0.00266080533945964, 0.00226463927967864, -0.0561822573222246, 0.0689689653012084, -0.0283345225038206, -0.00342534063541732, 0.621558100379749, 0.552501249632886, -0.110962179307842, -0.408107372713323, -0.106107915976052, 0.204952663667211, 0.0267888501632135, -0.00978290406589532, -0.00387759279960783, 0.00722618325024846, -0.00370795971687447, 0.00716210674532254, 0.0509272370439879, -0.0715303734534462, 0.0412919121935718, 0.013737414822459, -0.0271117596075607, 0.0136156014808826, 0.113282090987397, -0.159111523503951, 0.0918493604928062, -0.0413689957486712, 0.0816446385611455, -0.0163971882951674, -0.117489224878566, 0.231873293669398, 0.0602870558259817, -0.0445312874461568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0132117409898729, 0.00728244989005011, -0.00729939888432, -0.0116539403654932, 0.0195387056426205, -0.0109690858690785, -0.00648860340814749, 0.0275288649345271, -0.0311859124881199, 0.0417262619381519, -0.0868398367617213, 0.0523340502310096, -0.0242391457778127, 0.0111025773900739, -0.0390618253060839, 0.0288702594494081, -0.0254704298617909, 0.00892944871598939, 0.0022664447988171, 0.00182882255572065, -0.0197968060956585, 0.00237595918769113, 0.0010194799310855, 0.00100887627534099, -0.0376349350795189, 0.0317985080969105, -0.0038780885802943, -0.00161027694513688, 0.191503462471457, 0.214883898684752, -0.0957047798901591, 0.627694611711972, 0.0891613579747631, -0.165370846131076, 0.0409818725101211, -0.00560828431610147, -0.00334442030343146, -0.0163822876805229, 0.00311575927800657, -0.00577891319567485, 0.0779090376449023, -0.0750581386916099, 0.0127221319331291, -0.031143727444279, 0.0416995784872788, -0.0109860662320212, 0.0605545379377077, -0.0583386862978682, 0.00988823433174026, -0.00828676301457332, 0.0110954774231797, -0.00494169284465326, -0.142934721751187, 0.19138099827276, 0.0271848592901335, 0.0794093452371638, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0097804054637408, -0.0111121414793537, 0.0096285794355712, 0.0118223838397412, -0.0386200930353357, 0.0549301045311349, -0.0255353246076023, -0.0336121174078454, 0.058257246828833, -0.126131012729571, 0.160899807538945, -0.0638986839804835, 0.0189347929379129, 0.00458359170060369, 0.0125779136442869, -0.0238627208753059, -0.031549598271448, 0.0331063769654701, -0.00927948168620265, -0.00223295070854474, -0.0102542626550712, -0.00120308329737549, -0.000725398750302834, -0.000833886962407655, -0.0194939783441422, 0.00758070923223656, 0.00166566730191932, 0.00125789336011899, -0.135052204499447, -0.0818913657941359, 0.111811445560696, 0.732427557989168, -0.220976747397641, 0.464883125160773, 0.0354479766349183, 0.00472287345005669, 0.00390727055762867, -0.0422408716007064, -0.00772207115915239, 0.0162454222693437, 0.0673887642738485, -0.0297591450597261, -0.00897191069721797, -0.0803024716569528, 0.0486572926877854, 0.0308835379551545, 0.0219027222761859, -0.00967232885842977, -0.00291605389125938, 0.00291818589781626, -0.00176820242786567, 0.00241423827269638, -0.0859822306134807, 0.0520988018747556, -0.0157184470409667, 0.140584097846636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00595231255869356, 0.00476412582200827, 0.0280757815135755, -0.0295941247801589, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.0275920932079782, 0.0681032668396043, -0.0986835027874703, 0.319641098476688, -0.00369386434939339, -0.0018420627670003, -0.00257202845525812, -0.0363098612093179, -0.0268382683375486, 0.0466279404547275, -0.0373939339722437, 0.01116991419638, -0.00359294678603257, -0.00126119637132629, -0.000974613380290534, -0.00126885446246881, -0.00683041084421045, -0.000410933730046629, -0.000227431231249795, -0.000245394151048609, 0.0253065278441703, 0.0181540378518073, 0.206163069251945, -0.0898530971770402, -0.524251903161903, 1.05895121462285, 0.017326500301564, 0.00687907171497722, 0.00720440458057795, -0.0340478467842405, -0.0183200746196731, 0.0370052357530367, 0.0329387331902804, 0.00224139766285627, 0.00168118623991436, -0.0647270320843951, -0.00596920255192204, 0.0703492087783396, 0.00440964052015386, 0.000300064908350677, 0.000225067154909153, 0.00175074209144607, 0.000161455481944332, 0.00183354017309713, -0.0240519510403536, -0.00221809903691534, -0.0129415977638842, 0.0640542148802875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00246776876963712, 0.030253888096142, 0.0249036082205117, 0.192230415140458, -0.14494000231401, 0.354346112869683, -0.476703569824698, 0.422356647889497, -0.184397876468037, 0.480186648330888, -0.713797405978018, 0.802925731904299, -0.00793163153750709, -0.00486754060925035, -0.00537840791474991, -0.0118519803113755, -0.0137211579663084, 0.0315457931627568, -0.0386364416503132, 0.0280583803965702, -0.000590197519305335, -0.000319772383935716, -0.000291122581602542, -0.000414169528781443, -0.001122001459015, -0.000478814744853872, -0.00039451025885753, -0.000526921349425555, 0.0533385602171292, 0.0395429056190292, 0.0748264123822475, -0.167793715365594, -0.213032160197368, 0.427152317178935, 0.00350406908242321, 0.00214037926285364, 0.00261482209238943, -0.00908234190642572, -0.0074444461673235, 0.014926912572919, 0.00666144891220966, 0.00320492075650949, 0.00354343567185691, -0.0172660855678768, -0.011147024481341, 0.028376970654001, 0.00028653344219327, 0.000137855440825009, 0.000152416213593758, 0.00017502230217481, 0.000112994800092419, 0.000213818265916509, -0.00191789619302762, -0.00123819818524068, -0.00157202570775334, 0.00667062852425429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0124299526187294, 0.00254449201900172, 0.0100401662714875, 0.0195251039488213, -0.0050837648867108, -0.0317222402070975, 0.0822967853898158, -0.068632037336036, -0.000856872010173917, -0.00161605386869035, 0.0393067632837014, -0.0523859677188018, -0.0180010510271379, 0.0671213089149905, 0.62929291895221, -0.0815183617627339, -0.00204964204175484, -0.00121893362021505, -0.00118292063155331, -0.00183063682142871, -0.0430586021516735, 0.0506272851755823, -0.0189383076837496, -0.00284867343610887, -0.0328660874700562, 0.0241807101537083, -0.000964790796582367, -0.000480145834420369, 0.010103142175862, 0.339146109455535, 0.151374443887893, -0.171539508681194, -0.274137109924834, 0.198631858112276, 0.00762045121549467, -0.0102064605800896, 0.00528980646672292, 0.00516240990083366, -0.0095797693428562, 0.00694122508762253, 0.0058165942156578, -0.00487483111382472, 0.000269483244227626, 0.00394040230937945, -0.00457550953039686, 0.00529814948649643, 0.122194222750899, -0.102409791178522, 0.00566126746200244, -0.163660980479208, 0.190039573917172, 0.0848222462719284, -0.0246343550379297, 0.028604877726046, 0.0457134252619623, -0.0231217705022785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0112741294025222, -0.00481040329364083, 0.0110939404354584, 0.019707960384247, -0.0231802053744834, -0.0276298646655859, 0.0870824133797188, -0.0715230777133199, 0.007364576704243, 0.0043888235942606, 0.0397000546457262, -0.0545926623435965, 0.0271584695282764, -0.0674411898835213, 0.19356039727999, -0.0652473476293614, -0.00942285779415167, -0.00219692843858372, -0.0015236304910655, -0.0019077501517671, -0.0347488262460898, 0.0337592671031059, -0.00742856718436067, -0.00228007999607865, -0.0265233404201763, 0.0153905329075906, 0.00117997939276469, 0.000724403591411634, -0.0622282391086321, 0.896985621982871, 0.299024122342194, -0.215261263528709, -0.360407082565477, 0.22617173344477, 0.0311498025027813, -0.0344250066126225, 0.010449450352685, 0.00826141494223203, -0.0125944886537094, 0.00790361085687739, 0.0237762510293562, -0.015694037299372, -0.00165982695934198, 0.00630583373704132, -0.00574170912796163, 0.00603272639544615, 0.087680068388099, -0.0578751571051009, -0.00612097092715944, -0.0968990713114823, 0.0882304078161746, 0.0294129801131071, -0.0894091368997127, 0.0814105285467181, 0.136303813341331, -0.0327105924159356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00930958844834874, -0.0117698440494142, -0.00170955493305566, -0.0116539403654932, 0.00630079692715651, -0.00613847546289085, -0.0581932607657199, 0.0456388471838218, 0.0354164151936633, -0.0239832387341906, -0.0228191073912388, 0.0348355559312484, 0.0456362358439276, -0.0572326192875782, -0.00574410374506549, 0.00619710390792805, -0.0178289300066309, 0.00619513050775164, 0.0015513550519504, 0.00121733460618696, -0.0229736761944513, 0.0147838058786252, 0.000390512398713147, 0.000216558881969428, -0.0175355170299286, 0.00579711893708324, 0.00152574562586507, 0.00121726495336669, -0.182482550339249, 0.506413169593175, -0.0356502118925022, 0.273447788383993, 0.532275572502242, -0.182491948440469, 0.0471372205926181, -0.0344284557477545, -0.00124580290150385, -0.0185903243576053, 0.0186004631507443, -0.00637721311597537, 0.0359792454393944, -0.0135003025897689, -0.00486739559083189, -0.0141897599063138, 0.00729373058973944, -0.00486764626836995, 0.0463614773369987, -0.0173959727313477, -0.00627193949230227, -0.033861862257262, 0.0174054601488661, -0.00122530056414625, -0.107966384569833, 0.0554961977510378, 0.108025267288504, 0.0583303756759754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006772694213495, -0.00224468746929322, -0.0114222456646251, 0.0118223838397411, 0.0552995939385818, -0.104936601954282, 0.0910163993406657, -0.0557239934719332, 0.00967279417619893, -0.0153043533659056, 0.00875331817503963, -0.0425334207826391, 0.00521205405512015, -0.00198233611792214, -0.00130720099680887, 0.0227440073355647, -0.0217460457985155, 0.0226775867458485, -0.00629687867371559, -0.00148633784230091, -0.0117175620738281, 0.00293737332109395, 0.000940361805028747, 0.000794793321730999, -0.00894386721375002, 0.000282495939903944, 0.000137145944197865, 0.000139022218178862, -0.0271669660730643, 0.0158793811192677, -0.142180891317948, 0.0660584269543619, 0.524279942561052, 0.513013202099966, 0.0402552930537987, -0.0114231579753206, -0.00496853616119729, -0.0475204821291959, 0.0183210544613899, 0.017927336241727, 0.0307263570233538, -0.00109859912110464, -0.000724630221544298, -0.0362717841321435, 0.00176199036837921, 0.0136837094467268, 0.0165564810752095, -0.000591965248075695, -0.000390457174614275, -0.00469819704416938, 0.000228226378675035, -0.0020434946235373, -0.0643865379587119, 0.00312773309752849, 0.0248235963876548, 0.103266475966666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00405256796561421, 0.0225257270787523, 0.0116134748343782, -0.0295941247801589, -0.0648165501864931, 0.151531129548399, -0.19835664154622, 0.278748753109168, -0.118755279768057, 0.25582760745598, -0.289712660115728, 0.212765404450057, -0.0263569760650686, -0.00453184613547794, -0.0039205801342064, -0.0109803617251884, -0.0182236775617254, 0.0315481269099228, -0.0251644118483797, 0.00743512434099136, -0.00404462887250146, -0.000558857812259257, -0.000340541187058181, -0.000383710664555113, -0.00308721416081536, -0.000816247856154048, -0.000574930295742555, -0.000703025187056354, 0.157600788983965, 0.0349049822683107, 0.0712526331790855, -0.437323011107129, -0.228543925328445, 1.16858608987676, 0.0194350005513994, 0.00303184316836373, 0.00248993575190873, -0.0379858317474897, -0.00798650751792686, 0.0408364456798987, 0.0148344905822273, 0.00442820236576468, 0.00420371911717649, -0.0289941058569008, -0.0116648090026958, 0.031169943486648, 0.00329242046313123, 0.000982811240003574, 0.000932988616355237, 0.00051361472628345, 0.000206635711155589, 0.000421811946945045, -0.0178616139374967, -0.0071860231210133, -0.00375539793211317, 0.0470512180454072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00165731029056246, 0.0278235382849625, 0.0299947250976382, 0.192230415140459, -0.180516285730209, 0.461954122435897, -0.667777779660335, 0.700205786033841, -0.164115051478879, 0.408587395180543, -0.565496681950334, 0.534458237398517, -0.0117031127641392, -0.00580187045310395, -0.00555494811880194, -0.00982556301346905, -0.00920510912404767, 0.0211331468589323, -0.0258282524615989, 0.0186767367580081, -0.00065642017056997, -0.000300087035939776, -0.000253714313456994, -0.000343356021220818, -0.000501037229845096, -0.000254123794305433, -0.000224404254493925, -0.000312159597513698, 0.0752423816171071, 0.0438841037852113, 0.0649328546150947, -0.220382521134524, -0.198640193522426, 0.471376064563759, 0.00389172137830508, 0.00200434369960718, 0.00226908998258668, -0.0100656565735362, -0.00694151636999005, 0.0164723191745256, 0.00297050180073002, 0.00169734565320813, 0.00200695593001058, -0.00768298859828428, -0.00587830951327832, 0.0125731132868092, 0.000211827722239367, 0.000121038426398707, 0.000143116864357511, 0.000109097111329814, 8.34709799703366e-05, 0.000123507341827434, -0.00141484139474409, -0.00108250526785421, -0.000975708303855263, 0.00489993043831974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00700570982272351, -0.0039671958602816, -0.0283386095943202, 0.0195251039488213, 0.072406642464624, -0.168855440911289, 0.180838102102827, -0.0944993352356275, 0.000881675779233383, 0.000801959357219758, 0.00164117293051684, -0.0273920854159159, 0.0255030826818177, -0.073192066942304, 0.139859224732048, 0.607097608174252, -0.0011451130277536, -0.000673043912202327, -0.000641631662810817, -0.000957221224723153, -0.0331231875874071, 0.0614263985245276, -0.0546792511962833, 0.0212151322982277, -0.00960126525101329, 0.000557467377202795, 0.00025969276977946, 0.00025833083352456, -0.00690326988915853, 0.0311157999146772, 0.421321766809783, -0.00986172950072104, -0.314981484277462, 0.143008184695501, 0.00579356513688952, -0.0121650083715782, 0.0147231629685927, 0.00385553391728549, -0.0110070831616921, 0.00499744607324104, 0.00167935394144967, -0.000110401968427981, -6.99259570600312e-05, 0.00111758579171945, -9.98933671546159e-05, 0.00144858658908356, 0.0485764761033608, -0.00319345341606724, -0.00202265674810738, -0.101998203955027, 0.00911692338278997, 0.123447196538075, -0.00962018371015547, 0.000859882570604262, 0.0274644613171979, -0.00870448740305298, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00630096536900633, 0.00163104362451025, -0.0195929661997853, 0.019707960384247, 0.0976637162240658, -0.196492083346238, 0.196789453010076, -0.0984800038037925, -0.00176946150425536, -0.000595996850337843, -0.000775277112656268, -0.0285459434103637, -0.00898463593005298, 0.0206962864077091, -0.0268812006793822, 0.143743744633529, -0.00522532202805555, -0.00120559810201228, -0.00082298737020545, -0.000997542994527523, -0.0265321488636241, 0.0418649924033499, -0.0285354595072396, 0.00502315034416635, -0.00769075132780626, -0.000164932469374772, -8.65533292724698e-05, -9.10089387103999e-05, 0.0116355043739909, -0.0395842756636926, 1.11194332036726, 0.00578806775186339, -0.425867801143153, 0.162835958625975, 0.0235366042308363, -0.0420202768766602, 0.0388570541739812, 0.00614426323170619, -0.0148820249349653, 0.00569033110762516, 0.00682244665408593, 0.000165544232333922, 0.000117860635943874, 0.00178100917684923, 5.86296325622068e-05, 0.00164942997065817, 0.0346417252885989, 0.000840569096452961, 0.000598450377074105, -0.0618464275405142, -0.00203594308727178, 0.0571907222901656, -0.0347702174190692, -0.00114461233433264, 0.0842169716874305, -0.0123143225387024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00513339611045794, 0.0126104679035144, 0.0107306055922188, -0.0116539403654933, -0.0616020791184593, 0.199029865952139, -0.142163327346853, 0.062840050903269, -0.0295896009607119, 0.0136392839755111, 0.00544335694053324, 0.0182151550335337, -0.0524984143521608, 0.0795137525688743, -0.0444271201886016, -0.0316809934644759, -0.00976967983719939, 0.00336641557499323, 0.000832405683526462, 0.000636531784454445, -0.0173335456893191, 0.0196253949660861, -0.00679385676002965, -0.00110709786801738, -0.00502439475260485, -0.000751445762371075, -0.000465575059279341, -0.000531777248558145, 0.14289168101562, -0.295112794978876, 0.604407671559529, -0.0898140827333985, 0.679925843563978, -0.131387998461278, 0.0352681842662437, -0.045129057400687, 0.021121131991873, -0.0137344939427515, 0.0237601277454778, -0.00459137662910303, 0.0102230255215698, 0.00172796720790297, 0.00144740647712993, -0.00398115426194417, -0.000909762444963774, -0.0013308811166492, 0.0181378799422366, 0.00306579120779307, 0.00256801519808433, -0.0232091739926471, -0.0053036967391553, 0.0108622704650946, -0.0417084816104069, -0.00953110774137474, 0.0721540127553236, 0.0219592189204032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00367511242526296, 0.0253972624653879, -0.00366448453027264, 0.011822383839741, 0.0220838867907565, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.0936105122386031, 0.117950744221066, -0.0442674609131471, -0.0222402896394521, -0.0694517908308399, 0.0503099322824041, 0.0038675522761538, 0.00474931180199928, -0.0117484678910901, 0.0121800061564542, -0.00335222048188686, -0.000777190818574885, -0.00871645838744058, 0.00519517947069472, 0.000292876250127735, 0.000165965533133658, -0.00252659949488249, -0.000767316927102116, -0.000562698709719944, -0.000703504718975342, 0.288289419424248, -0.264445516332457, -0.0434943939143449, -0.459983218363609, 0.902742954379208, 0.369352063935649, 0.0297697731931803, -0.0200255369950426, -0.00151991921677797, -0.0348329254516799, 0.0315465107267412, 0.0129070725951022, 0.0086292265240464, 0.00295772910200286, 0.00292019780295714, -0.0100968590612786, -0.00465935234926424, 0.00374131346123163, 0.00640222151602364, 0.00219440720934272, 0.00216656187585748, -0.00430664765188605, -0.00198736941186287, -0.000326870461831474, -0.024678247314225, -0.0113881603082131, 0.0223499055425404, 0.0388759908814471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00216464827329596, 0.0300055156673333, -0.00428139506100089, -0.0295941247801589, 0.0263560489909357, -0.071290803486119, 0.124137438646549, 0.383808683073226, -0.145766077772663, 0.28016483684933, -0.262749987106195, 0.111252848540127, -0.0445452074184813, 0.00310597107865767, 0.0016728508196878, 0.00233464669412093, -0.00970937438415867, 0.0167516558155948, -0.0132940824930266, 0.00388775028686353, -0.00296712446719266, 0.000185712664972212, 8.46394591319322e-05, 8.15846378216349e-05, -0.000860066651710862, -0.000393080450660222, -0.000332623551692573, -0.000451216062994951, 0.237643788379266, -0.0198115605034006, -0.0175284168873226, -0.546109110383939, 0.0747886755596979, 0.841342254771773, 0.0142092312312003, -0.0010023845197802, -0.000612533599598935, -0.0276309035962141, 0.00261350337251372, 0.0294008525198299, 0.0041187641649441, 0.00212165260149822, 0.0024071881309329, -0.00800924228238475, -0.00553175564855245, 0.00852228919405466, 0.00125866873032927, 0.00064836384876305, 0.000735621731929458, -8.87922808970427e-05, -6.13263008017249e-05, -5.42588740761651e-05, -0.006793667254741, -0.00469219258024676, 0.000642587464437421, 0.0177130351991937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000873918129073805, 0.0191690324088708, 0.0293017672320873, 0.192230415140459, -0.182241449919052, 0.488039973885573, -0.759220407776989, 0.964112153400919, -0.109706187629544, 0.262185091653748, -0.340572586312385, 0.279462732628028, -0.0107717424744169, -0.00423279236974585, -0.0035344039316795, -0.00518678617406002, -0.00484906798185399, 0.0111175665009613, -0.0135601345036639, 0.00976587416141794, -0.000476116367454153, -0.000179485226862747, -0.000140724751873378, -0.000181253151723531, -0.00013800965025538, -8.05138366821649e-05, -7.56002252730922e-05, -0.000109111249280735, 0.0664794510482462, 0.0300484980775638, 0.035869982963235, -0.182750526031733, -0.118090011664295, 0.339374740501439, 0.00281896164772152, 0.00119640185951848, 0.00125348284008001, -0.00727633935672296, -0.00412667615030023, 0.0118595097748227, 0.000817119380216336, 0.000536684303255302, 0.000673396711126685, -0.00210915884939906, -0.00185115251774683, 0.00343766126960385, 8.02306572190289e-05, 5.2695524561666e-05, 6.61189319589345e-05, 3.40508738617515e-05, 2.98855446085947e-05, 3.56754594918345e-05, -0.000534796702578139, -0.000469376814716125, -0.000303302620946435, 0.00184464173156587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00234316248688237, 0.0302387678330058, 0.259211232824318, 0.0195251039488213, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.00535611326543865, -0.0035105538935546, -0.00396473437419393, -0.00867159466642665, -0.186693590381844, 0.494062814074891, -0.750151206494618, 0.865758905462841, -0.000380508993874052, -0.000221704125818051, -0.000208599314241205, -0.000303030395125681, -0.0132630858830491, 0.0312018466643447, -0.0394682247241075, 0.0302540966567137, -0.00100999427280207, -0.00044361843320117, -0.000369581508087718, -0.000496810721561389, 0.0364144726787384, -0.115913919569765, 0.296132254907867, 0.0287083824964372, -0.153763681235287, 0.0545545092110108, 0.00229970513974541, -0.00609865929245069, 0.0103483935384563, 0.00151045400183989, -0.00537329878448915, 0.00190641688386346, 0.000175124329341774, 8.67088960805661e-05, 9.69026328638935e-05, 0.000115022243288004, 7.63959394310051e-05, 0.000145175123742068, 0.00610416325940238, 0.00302233995531893, 0.00337765456969371, -0.016187819621396, -0.0107516916029517, 0.0274679925437241, -0.00119310925359794, -0.000792444136600511, 0.004244374535282, -0.00105120358339441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00209472514255065, 0.0298426277029343, 0.00525730855264604, 0.0197079603842469, 0.692635678336204, -0.462466964864018, 0.306530718648313, -0.118670820076184, -0.0265751876169885, -0.00675219580951233, -0.00535145363896163, -0.00903687495372651, -0.16260413707782, 0.365229353082628, -0.43671602204642, 0.32272636006408, -0.00172706393075801, -0.00039538981258839, -0.000266770877594406, -0.000315795178772782, -0.0105672909703007, 0.0213868154213817, -0.0217703682626923, 0.0112777292031761, -0.000804707400159164, -0.000373373839063418, -0.000317855761650176, -0.000432706224703623, 0.158848151032726, -0.425607910612667, 0.828499366632535, 0.0481442357685089, -0.210000758077653, 0.062118373320097, 0.00930170605810053, -0.0212166270111518, 0.0289520555433691, 0.00239999837307264, -0.00733851328906334, 0.00217073744055704, 0.000708332127892701, 0.000370402667393226, 0.000422711162026801, 0.000182761736816977, 0.000128116731068988, 0.000165303339060868, 0.00433403278578935, 0.00226636240431691, 0.00258641951000199, -0.00988566575807107, -0.00692989245680929, 0.0134899078897133, -0.0042995441471036, -0.00301399817492418, 0.0131467846872082, -0.00148714787906018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00169002122151263, 0.0280378223106106, -0.0132573892568218, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.05647387282709, 0.0210073440323396, 0.00584313287859412, 0.00576642628111639, -0.120739823396356, 0.195812008554932, -0.137666072131894, 0.0212776405782487, -0.00320141581284049, 0.0010962878257613, 0.000268548259483518, 0.000201508776833618, -0.00684455236573007, 0.010218632150079, -0.00632708254784994, 0.00074355087844799, -0.000521217969199499, -0.000262683898321933, -0.000231343120081778, -0.000321301008031602, 0.265205427918547, -0.506505871964672, 0.552336380720341, -0.116176763860625, 0.3441540757173, -0.0501216611310332, 0.0138399924095757, -0.0232788254452485, 0.0193014916091428, -0.00533944176444656, 0.0120265244814169, -0.00175151023094928, 0.00105392615206969, 0.000598414007520774, 0.000705738744092654, -0.000406602630006657, -0.000309158240323988, -0.000133378862024119, 0.00225326954047065, 0.00127939519584918, 0.00150885298032613, -0.00378999256368277, -0.00288170155665652, 0.00314244848128981, -0.00513312031819325, -0.00390294190896024, 0.0115618073754221, 0.00265192061850321, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00119584539165634, 0.0235888506057286, 0.00832487477036377, 0.0118223838397411, -0.0614326220634956, 0.26203544501963, 0.518569562880659, -0.0924570392473858, -0.078445661197035, 0.0857621692652034, -0.0255955981627664, -0.0070406752201933, -0.0701331978298506, 0.0632915073048822, -0.00954482528990439, -0.00418242435882037, -0.00381032346110927, 0.00393303420879113, -0.00107536568428409, -0.000246037629294052, -0.00340656404721273, 0.00290253459641708, -0.000401013389644834, -0.000146155552097579, -0.000259412493288322, -0.000143263535890606, -0.000131248572870752, -0.000186631606087691, 0.252592041211182, -0.264553500667241, 0.0587703498073264, -0.320492997714485, 0.494463927062683, 0.140899771694796, 0.0115838154219248, -0.0111148703955154, 0.00205374017223538, -0.0134650954278909, 0.0172791285751951, 0.0049237672114778, 0.00088211652525673, 0.000548608666298195, 0.000672173233147094, -0.00102537745625886, -0.000852864616959836, 0.000374948690527836, 0.000788643397617717, 0.000490475566622549, 0.000600946663166372, -0.000756716922147503, -0.000629404405193142, 0.000139821688128042, -0.00302000505476168, -0.00251190957878682, 0.00387543154955237, 0.00469488656026243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000696217557866203, 0.0161601125382385, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414865, 0.462498877065499, -0.0741443373095673, 0.131860036949593, -0.10956139003762, 0.0352196480617273, -0.0273035043961886, 0.00598377507353535, 0.00214906927708218, 0.00200927002101695, -0.00311691852162273, 0.00536405680022568, -0.00424076416664728, 0.00123075677299012, -0.00114779903153406, 0.00024341953875275, 8.31834643464844e-05, 7.02142929648289e-05, -8.74057861345234e-05, -5.24846012755424e-05, -4.99388244904002e-05, -7.26574152463981e-05, 0.134778903993248, -0.0338151876404042, -0.0170960168773585, -0.274403811056705, 0.0969143307348479, 0.320953754397271, 0.00548279610120567, -0.00130887565395628, -0.000597423305481997, -0.010621276790312, 0.00338668826964646, 0.0112157851875391, 0.000417519173892673, 0.000282211597182818, 0.000358660436103929, -0.000808818462208281, -0.000730216581573406, 0.000854090737576606, 0.000153750603397554, 0.000103923858031027, 0.000132075990550846, -3.67039769223235e-05, -3.31370434911392e-05, -1.67531660864196e-05, -0.000826722549057605, -0.000746380729286207, 0.000263607814241574, 0.0021391272354126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000278404956314926, 0.00734348804657583, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0411121542477164, 0.0953904978590447, -0.118457806464409, 0.0884703557588255, -0.0048643068096025, -0.00156238526998135, -0.00117604374843888, -0.00151614546442355, -0.00154360799326981, 0.00353550741513455, -0.00430576776528785, 0.00309161208448677, -0.000182636570872934, -5.79074942612368e-05, -4.27474677581422e-05, -5.29819689258156e-05, -1.39079164693419e-05, -8.90566876029673e-06, -8.73387187568311e-06, -1.29444174865358e-05, 0.0291460988640961, 0.0106032943169837, 0.0108632141195975, -0.076596428766101, -0.0379272265467486, 0.12946407540304, 0.00108025695398446, 0.000385414218266406, 0.000379616920949837, -0.002784167998387, -0.00132537357759276, 0.00452414480070609, 8.2262404564229e-05, 5.92733532529775e-05, 7.75607474139753e-05, -0.000212016551629821, -0.000203830924063689, 0.000344517134121619, 9.73312106864951e-06, 7.01310308720126e-06, 9.17683051875713e-06, 3.47258421632421e-06, 3.33851316913075e-06, 3.42035053575588e-06, -6.47806177059701e-05, -6.22795393426141e-05, -3.08381243869608e-05, 0.00022276946458917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2[216][168] = \
    {{},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00894872042728933, 0.01354270014303, 0.0123418011338162, 0.0118223838397412, -0.0399845505836982, 0.0422013001459019, -0.0119330872043856, -0.00292413044299188, -0.0439702312640461, 0.0465429183672366, -0.0132189650130187, -0.00326913804247665, -0.00124328365422713, -0.000790403917700874, -0.000793900257330357, -0.00126398002385327, -0.0670830605102295, 0.297174981210494, 0.535772970512815, -0.0935504836114046, -0.00189681223432843, -0.00504670264847086, 0.0321772770214555, -0.03617037303724, -0.00212061026536665, -0.00559052193272536, 0.0354876359854279, -0.0397758545272403, 0.004335450944221, 0.00314406469764675, 0.00439483944231602, -0.00523488897578085, -0.00528322800716237, 0.00206912152181182, 0.0276817096582158, -0.127430920717603, 0.125763840462251, 0.212173344440878, -0.151186193020126, 0.0592105064091009, 0.0309477746936238, -0.141162538552777, 0.13870227078189, 0.237206911741454, -0.167477615955912, 0.0661965404040854, 0.000875066182395795, -0.00399145221042712, 0.00392188671994388, -0.00402830933090311, 0.00284414833496864, 0.00397561007306053, 0.0220957122063312, -0.0156004611164017, -0.0157445159727609, 0.0262147255291864},
    {e-05, -0.000205698983515831, 0.000803647599287717, -0.000206759878970077, 0.000591393526743239, 0.000809825837014608, 0.0015440931637216, -0.00441655656921452, -0.00443933502297745, 0.0119441934599609},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0261188035535263, 0.00356846422868538, 0.00320507108782463, 0.192230415140459, -0.0178382131382482, 0.0410650708630082, -0.0503948504088263, 0.036743473102511, -0.0198704873172243, 0.0457735732543992, -0.0562285998280994, 0.0410787029080848, -7.43559974853976e-05, -4.90514755034197e-05, -4.90999381122796e-05, -7.46268914881268e-05, -0.166915283235763, 0.464278848231275, -0.769187724303445, 1.17551858417977, -0.000624602315103688, -0.000497526431337217, -0.000671670106945687, -0.00213554205983538, -0.000698296888437391, -0.000555120501094781, -0.000748683496630181, -0.00237884036290424, 0.000442330508823117, 0.000329297655089024, 0.000443650701341738, -0.00114989679790907, -0.00115219045506205, 0.00190118764207892, 0.00448653414127205, 0.00450467759663963, 0.0126956210248063, -0.0157301889762828, -0.0329713743754391, 0.0544048679014506, 0.0050158841153128, 0.00502614278802704, 0.0141512951707227, -0.0175861372125048, -0.0367881678484813, 0.0608239019496676, 1.87695983853405e-05, 1.88079866665939e-05, 5.29545980091036e-05, 1.88455022700523e-05, 3.94226140919703e-05, 5.31126478445719e-05, -0.000169942708606156, -0.000355500518009963, -0.00035620962191079, 0.00124387251864917},
    {},
    {},
    {},
    {},
    {},
    {e-05, 8.34980070347009e-05, 0.000206742097729327, 7.77662418170243e-05, 0.000143227438853593, 0.000185995560246059, -0.000752719569419361, -0.0013863354276103, -0.00129116969293913, 0.00483950370236143},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0117698440494141, 0.00930958844834857, -0.00170955493305552, -0.0116539403654931, 0.0063007969271564, -0.00613847546289123, -0.0581932607657197, 0.0456388471838217, -0.0178289300066306, 0.00619513050775209, 0.00155135505195025, 0.00121733460618684, -0.0229736761944516, 0.014783805878625, 0.000390512398712615, 0.000216558881969607, 0.0354164151936628, -0.0239832387341913, -0.0228191073912385, 0.0348355559312483, 0.0456362358439278, -0.0572326192875786, -0.00574410374506496, 0.00619710390792813, 0.00121726495336642, 0.00152574562586508, 0.00579711893708326, -0.0175355170299285, 0.0471372205926179, -0.0344284557477548, -0.00124580290150344, -0.0185903243576042, 0.0186004631507436, -0.00637721311597531, -0.182482550339248, 0.506413169593175, -0.0356502118925021, 0.273447788383992, 0.532275572502243, -0.18249194844047, -0.00486739559083215, -0.0135003025897684, 0.0359792454393944, 0.007293730589739, -0.0141897599063135, -0.00486764626837011, -0.00627193949230212, -0.0173959727313477, 0.0463614773369989, 0.0174054601488659, -0.0338618622572621, -0.00122530056414597, 0.0554961977510381, -0.107966384569833, 0.108025267288504, 0.0583303756759752},
    {},
    {},
    {e-05, 0.000109097111329462, 0.000123507341827496, -0.00108250526785368, -0.00141484139474421, -0.0009757083038552, 0.0048999304383195},
    {e-05, -0.000110401968427902, 0.00167935394144966, -9.98933671548623e-05, 0.00111758579171963, 0.00144858658908353, -0.00202265674810734, -0.0031934534160672, 0.0485764761033609, 0.00911692338278994, -0.101998203955028, 0.123447196538075, 0.000859882570604534, -0.00962018371015529, 0.0274644613171976, -0.0087044874030531},
    {e-05, -8.65533292724592e-05, -0.000164932469374611, -0.00769075132780622, 0.0235366042308362, -0.0420202768766607, 0.0388570541739818, 0.00614426323170689, -0.0148820249349665, 0.00569033110762529, 0.0116355043739908, -0.0395842756636926, 1.11194332036726, 0.00578806775186331, -0.425867801143152, 0.162835958625975, 0.000117860635943563, 0.000165544232334143, 0.00682244665408587, 5.86296325617575e-05, 0.00178100917684939, 0.00164942997065799, 0.000598450377074356, 0.00084056909645292, 0.0346417252885991, -0.00203594308727194, -0.0618464275405144, 0.0571907222901659, -0.00114461233433236, -0.0347702174190687, 0.0842169716874292, -0.0123143225387023},
    {},
    {},
    {e-05, 8.15846378215415e-05, -0.145766077772663, 0.280164836849329, -0.262749987106195, 0.111252848540127, -0.044545207418481, 0.00310597107865735, 0.00167285081968815, 0.00233464669412085, -0.000451216062995052, -0.000332623551692749, -0.000393080450660113, -0.000860066651710805, 0.0142092312312, -0.00100238451978055, -0.000612533599599077, -0.027630903596213, 0.00261350337251305, 0.0294008525198293, 0.237643788379266, -0.0198115605033999, -0.0175284168873222, -0.54610911038394, 0.0747886755596979, 0.841342254771774, 0.00240718813093282, 0.00212165260149867, 0.00411876416494408, -0.00553175564855325, -0.00800924228238432, 0.00852228919405508, 0.000735621731929481, 0.000648363848762942, 0.00125866873032939, -6.13263008015822e-05, -8.8792280897515e-05, -5.42588740760524e-05, -0.004692192580246, -0.00679366725474102, 0.000642587464437393, 0.0177130351991931},
    {e-05, -8.0513836682063e-05, -0.000138009650255301, 0.00281896164772188, 0.00119640185951797, 0.00125348284008024, -0.00727633935672327, -0.00412667615030109, 0.0118595097748234, 0.0664794510482459, 0.0300484980775645, 0.035869982963235, -0.182750526031733, -0.118090011664295, 0.339374740501439, 0.000673396711126706, 0.000536684303255552, 0.000817119380216468, -0.00185115251774766, -0.00210915884939895, 0.00343766126960435, 6.61189319590008e-05, 5.26955245615983e-05, 8.02306572190406e-05, 2.98855446086229e-05, 3.40508738614952e-05, 3.56754594919057e-05, -0.000469376814715587, -0.000534796702578482, -0.000303302620946379, 0.00184464173156589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0302387678330058, 0.00234316248688222, 0.259211232824318, 0.0195251039488212, 0.326169225832269, -0.374897896525802, 0.278859093198178, -0.113874016814714, -0.000380508993873417, -0.00022170412581743, -0.000208599314241447, -0.000303030395125595, -0.013263085883049, 0.0312018466643444, -0.0394682247241067, 0.0302540966567125, -0.00535611326543933, -0.00351055389355507, -0.00396473437419381, -0.00867159466642664, -0.186693590381844, 0.494062814074891, -0.750151206494617, 0.865758905462842, -0.0004968107215617, -0.000369581508087825, -0.000443618433201049, -0.00100999427280182, 0.00229970513974527, -0.00609865929245053, 0.0103483935384558, 0.00151045400183994, -0.00537329878448927, 0.00190641688386355, 0.0364144726787388, -0.115913919569765, 0.296132254907867, 0.028708382496437, -0.153763681235287, 0.054554509211011, 9.69026328636493e-05, 8.67088960805262e-05, 0.000175124329341963, 7.63959394305888e-05, 0.000115022243288406, 0.000145175123742096, 0.00337765456969342, 0.00302233995531936, 0.00610416325940206, -0.010751691602952, -0.0161878196213959, 0.0274679925437241, -0.000792444136599933, -0.00119310925359817, 0.00424437453528164, -0.0010512035833943},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0161601125382386, 0.000696217557866054, -0.0107414954878784, -0.0295941247801587, 0.0716512169321643, -0.219640225699807, 0.508137289414866, 0.462498877065499, -0.00311691852162233, 0.0053640568002266, -0.00424076416664745, 0.00123075677298999, -0.0011477990315343, 0.000243419538752938, 8.31834643459835e-05, 7.02142929647871e-05, -0.0741443373095676, 0.131860036949592, -0.109561390037619, 0.0352196480617273, -0.0273035043961884, 0.00598377507353513, 0.00214906927708259, 0.00200927002101692, -7.26574152465553e-05, -4.99388244906008e-05, -5.24846012753695e-05, -8.74057861344252e-05, 0.00548279610120566, -0.00130887565395687, -0.00059742330548216, -0.0106212767903118, 0.00338668826964587, 0.0112157851875389, 0.134778903993248, -0.0338151876404035, -0.0170960168773581, -0.274403811056705, 0.0969143307348483, 0.320953754397271, 0.000358660436103903, 0.000282211597182957, 0.000417519173892726, -0.000730216581574204, -0.000808818462207817, 0.000854090737576828, 0.00013207599055083, 0.000103923858030993, 0.000153750603397619, -3.31370434910434e-05, -3.67039769225859e-05, -1.67531660863988e-05, -0.000746380729285704, -0.000826722549057942, 0.00026360781424163, 0.0021391272354126},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00734348804657594, 0.000278404956314804, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.00154360799326991, 0.00353550741513591, -0.00430576776528913, 0.00309161208448705, -0.000182636570873247, -5.79074942608703e-05, -4.27474677586908e-05, -5.2981968925783e-05, -0.0411121542477164, 0.0953904978590433, -0.118457806464408, 0.088470355758825, -0.00486430680960219, -0.00156238526998174, -0.00117604374843836, -0.00151614546442362, -1.29444174866676e-05, -8.73387187585268e-06, -8.9056687601341e-06, -1.39079164692274e-05, 0.00108025695398478, 0.000385414218265771, 0.000379616920950065, -0.00278416799838713, -0.00132537357759348, 0.00452414480070645, 0.0291460988640958, 0.0106032943169844, 0.0108632141195973, -0.0765964287661009, -0.0379272265467478, 0.129464075403039, 7.75607474139545e-05, 5.92733532530608e-05, 8.22624045642498e-05, -0.000203830924064327, -0.000212016551629515, 0.000344517134121841, 9.17683051880787e-06, 7.01310308717697e-06, 9.73312106864735e-06, 3.33851316914159e-06, 3.47258421623531e-06, 3.42035053576975e-06, -6.22795393422915e-05, -6.47806177063136e-05, -3.08381243869886e-05, 0.000222769464589115},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0273770165770782, 0.0164398153896086, 0.0192875795853982, 0.0197079603842468, -0.0163810014243475, -0.00390242657177209, -0.00279689872237266, -0.00375319132544456, -0.016455224270786, -0.0049261659299401, -0.00514129646939605, -0.0210508054013365, -0.00318431349806172, -0.00243126567889085, -0.00354041384624249, -0.0177795380457136, 0.180416762354003, -0.246495727242803, 0.220428635877593, -0.103219493481903, 0.0349131389634356, -0.121655788733429, 0.151792179115676, -0.0871793205263414, 0.195819938431223, -0.223629290575918, 0.191612435862306, -0.0875743328428927, 0.00366524434684612, 0.00373089742608173, 0.0162853332138365, 0.00146285721496208, 0.00446348462723339, 0.00457643479011305, 0.18340167254765, -0.159958997720859, 0.0798527093604434, -0.0627187368589137, 0.0218860330331136, 0.0224398673581591, 1.02865870250385, -0.294038759305839, 0.100800793821525, -0.351775278729851, 0.0402311973122856, 0.125860165397376, 0.199059686904237, -0.0569005669447605, 0.0195063478381803, -0.173615581371305, 0.0198557520467498, 0.0866701764653483, 0.261733439364735, -0.0299334554728394, -0.0913332599904381, -0.0358110939767408},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0287678230747218, 0.0152327680704991, 0.00320507108782464, 0.192230415140459, -0.0178382131382483, 0.0410650708630083, -0.0503948504088264, 0.0367434731025109, -0.0864392103719315, 0.204225002221374, -0.260674168295516, 0.206085870657986, -0.000323458282952951, -0.000218849807463798, -0.000227625898028604, -0.000374392247516164, -0.179978494886957, 0.485949924576903, -0.76622985466315, 1.01051141642987, -0.000673485269868858, -0.000520749400289016, -0.000669087236009444, -0.00183577670380734, -0.00377742729515856, -0.00269364658708965, -0.00332750776727577, -0.00889568296255176, 0.0019735175282232, 0.00152661443863664, 0.00222573096474404, -0.00533088841509628, -0.00578037173244191, 0.00953798155162816, 0.00469595144355317, 0.00448735510346736, 0.0109135407614039, -0.01566969938845, -0.0283431930980594, 0.0467680739919016, 0.0263385347136999, 0.0232114501770194, 0.0542752718892441, -0.0878878170391836, -0.146608993334405, 0.262311600776789, 9.85596371985307e-05, 8.68579870971871e-05, 0.000203099798998061, 9.41815724236597e-05, 0.00015710784485068, 0.000229055736824683, -0.000849299280487156, -0.00141674826781034, -0.00153620391228609, 0.00536437454800381},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0251141783214144, 0.0170982512251827, 0.0160091858217586, 0.0195251039488212, -0.00316207558373234, -0.00241577235429517, -0.00353354291864182, -0.0181912548602127, -0.00335839069175039, -0.00254526063085152, -0.00367028490867606, -0.0177284701790032, -0.0187003136617075, -0.00453904348042354, -0.00447483985261502, -0.0171592587463127, 0.0293790293907044, -0.114578371119061, 0.148172383047726, -0.0869289168370505, 0.163589384055957, -0.204331219412855, 0.180652919655244, -0.0841378732334323, 0.159427677701374, -0.212238483655012, 0.190336131394753, -0.0893615104409751, 0.00421763175802401, 0.00135971169586784, 0.00390122508841162, 0.00424553498359221, 0.00398337890666877, 0.0178172618556884, 0.189862433322843, -0.0548926656233985, 0.0191290770071514, -0.171395695833932, 0.019531906036562, 0.0873642936180387, 0.185032341811612, -0.0570169166961805, 0.0201544183268209, -0.167035397269227, 0.02028775696638, 0.0851417500342237, 1.03030384104418, -0.317483677185369, 0.112224567947569, -0.297879486990314, 0.0361797962355783, 0.103805482586356, 0.276786505750101, -0.0336178884956979, -0.0315420290818589, -0.0984861631531847},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000295237250846717, 0.0258677865545683, 0.0261981528295215, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693799, -0.121961990153498, 0.2250337245264, -0.197896745384657, 0.0720041127838627, -0.00717468642842238, -0.00405343007898562, -0.00404133581582018, -0.00709146953368325, 0.00176428765404602, -0.00456258703054669, 0.00724460448462892, 0.353061458146974, 0.000103788161143004, 8.21838039893621e-05, 0.000147945230318779, -0.034771966172023, 0.000101147795129592, 8.06363412486129e-05, 0.000145593936764071, -0.0342850300686168, 0.0367446701898163, 0.0242440923895317, 0.036388205229727, -0.0791788655558158, -0.0786453959092754, 0.104822079207859, -0.000745002803480525, -0.00088752778682321, 0.178424152469219, 0.00289858008214561, -0.385626002220497, 0.513979475619877, -0.000726049966661006, -0.000870816268068807, 0.175588457403319, 0.00282484033908921, -0.378364938100431, 0.500903861562423, -4.27115106568033e-05, -5.12277116192757e-05, 0.0103293831195581, -5.08825635930827e-05, 0.0068153154561942, 0.0102291763923664, 0.000461254537812717, -0.0617813836177234, -0.0613651299539456, 0.200412591091127},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0107425993815028, 0.0254129579368256, -0.0100835618309505, 0.0195251039488213, 0.00276855422334102, 0.00354739278284631, 0.018497012182256, -0.0413981115341341, -0.00476624355041156, -0.00338273614995181, -0.00435470127501957, -0.0137973375736296, -0.0603965005827018, 0.0315784943674164, 0.00779631465864186, 0.0116923912438849, -0.00527925397357789, -0.028919560674281, 0.0792937759693211, -0.0676531927685028, -0.0668972246841803, 0.26996967643304, -0.141961339914384, 0.057331901500994, -0.0222957897716069, -0.0635582267339032, 0.135372028365772, -0.0987005432142832, 0.0127562315865692, -0.0084449413101165, -0.00445839259329846, 0.0114632796231688, -0.0162280695445271, 0.0315560665716392, 0.109055095339958, 0.15377203670886, -0.0218610650020315, -0.208732280105511, -0.0795719254745861, 0.154730479224275, 0.0363463430762803, -0.036202132415786, 0.02084635657388, -0.0695671764823022, 0.0187334020168056, 0.0515692280558871, 0.460570658542209, -0.458743261526413, 0.26415917979114, 0.649423009457742, -0.174879920823444, -0.0923254899097835, 0.262336456257311, -0.0706432910926393, 0.10000665415058, -0.135750409459011},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {e-05, -0.00326926866673852, -0.00351495966953611, 0.00113684563986334, 0.00922528597146977},
    {e-05, -3.77810915963453e-05, -3.83065599431423e-05, -5.93644300409327e-05, 0.0053739365343952, 0.0019227086862346, 0.00190448281304161, -0.0138893267054971, -0.0066492062394604, 0.0226969756645599, 0.025273323859613, 0.00916815545757849, 0.00933834822750578, -0.0662292251284659, -0.0326033938848811, 0.111291244539186, 0.000337408026586009, 0.000255673905629857, 0.000351786028768959, -0.000884184141232966, -0.000909216372900104, 0.0014857784201566, 3.99214342172282e-05, 3.02508185953477e-05, 4.16226103098802e-05, 1.44819065756884e-05, 1.48919053796354e-05, 1.47507410000213e-05, -0.000270158128668922, -0.000277806604307328, -0.000132993732949987, 0.000960724534063873},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0115772632577273, -0.0106853276693849, 0.0192875795853982, 0.0197079603842468, -0.0163810014243474, -0.00390242657177229, -0.00279689872237234, -0.00375319132544454, 0.0146717000428919, 0.00719541733809642, 0.0244226254420096, -0.0473085106547024, 0.00283917689101551, 0.00355123466570278, 0.0168179761255123, -0.0399568305836849, -0.0274010505067604, -0.0481217403864266, 0.105826965373029, -0.0769617882285367, -0.0053024822727362, -0.0237500598790077, 0.07287485865535, -0.0650020279883701, -0.0668371306827621, 0.207386421256723, -0.134368965523375, 0.058219289048321, -0.00535364888165083, -0.0177228274895517, 0.0365988305517867, -0.00694898923818481, 0.010031008601275, 0.010284847059337, 0.0358043028635583, -0.0767957177864585, 0.059539212022493, -0.0301110314791141, 0.0163185090590719, 0.0167314550889352, 0.451308792072928, 0.670583112662057, -0.109780279168362, -0.379545813158115, -0.142493838383863, 0.210897913990534, 0.0873344935774069, 0.129767107520561, -0.0212440024532162, -0.187321483324288, -0.0703265751992809, 0.145229106953919, 0.282395714198688, 0.106020532605796, -0.153042815009205, -0.0600069529033935},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.011801561675532, 0.00496641091476391, 0.0123418011338162, 0.0118223838397412, -0.0399845505836983, 0.0422013001459018, -0.0119330872043853, -0.0029241304429919, -0.0204347654762903, 0.0301742710270643, -0.0150525237472738, -0.0368583011689747, -0.000577804782105061, -0.000512427300870451, -0.000904019525330695, -0.0142508991010521, 0.0594964820405093, -0.120624902691672, 0.125434652322349, -0.0599613204849068, 0.00168229735160592, 0.0020484833999342, 0.00753331313448511, -0.0231834539600412, 0.02120514924013, 0.00258397885603963, 0.00538637983819945, -0.011848287343186, 0.00281071914707341, 0.00358016746981991, 0.049550160822038, -0.00596100303954837, -0.0595664075674239, 0.0233285664952788, -0.0112361529233053, -0.0298340045411955, 0.0806085190825287, 0.0496738192420155, -0.0969030134598642, 0.0379510614356346, -0.141630312498688, -0.0376329322111704, 0.0576357432941006, 0.626132323960991, -0.12223449693311, 0.478368417328807, -0.00400467878859447, -0.00106409286769033, 0.0016296838901411, -0.0106331416082054, 0.00207581794703548, 0.0287296932280313, 0.0583239313380664, -0.0113860858694689, -0.113777534921342, 0.189440364791817},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.16214011086512e-06, -0.00888246788236123, -0.0100835618309505, 0.0195251039488213, 0.00276855422334103, 0.00354739278284632, 0.018497012182256, -0.0413981115341341, 0.00207617681188816, 0.00204132940906999, 0.00495444159751798, -0.031007435542924, 0.0263087298629871, -0.0190562037323707, -0.00887004256151609, 0.0262768860950638, 1.34764571110791e-06, 2.34589687822702e-06, 0.0351417498325349, -0.0504430947992084, 1.70769882252997e-05, -2.1899399798087e-05, -0.0629150249458778, 0.0427474066498151, 1.27907673086741e-05, -5.86577422600001e-06, -0.0362041359827394, 0.0320568669764367, -0.00769781311112095, 0.00960799969344603, -0.0100195650228905, -0.0130420310882865, -0.0364701390904392, 0.0709175009299217, -8.84633105629031e-06, 0.068149339329645, -0.0162998925724395, -0.0925068516383988, -0.0593298559286742, 0.115369044865993, -6.62595538413911e-06, 0.0182538627477391, -0.00937969153956921, -0.069288190527517, -0.0158915560681605, 0.0864121113201357, -8.39622469954253e-05, 0.231307825632447, -0.11885681869661, 0.646818621763509, 0.148350740803414, -0.154705447658132, 0.261284405700932, 0.0599267458324434, 0.167576410526232, -0.227470527214668},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00681295111639288, -0.00438186087957981, -0.0118196797021562, 0.019707960384247, 0.0153251463175156, 0.0068247368416486, 0.0170656692030986, -0.0431419561966857, 0.00496290698942569, 0.00178381589036753, 0.00264840080550217, -0.0323135857262809, 0.0110394459580145, -0.00537180196847258, -0.00318945341855541, 0.0255329556369081, 0.0101073362006732, 0.00568346715796629, 0.0351451051021589, -0.052567948285717, 0.0224826683241416, -0.0171152528866812, -0.0423250421086929, 0.0415371758142848, 0.0168396543479753, -0.00265609563809114, -0.0110627097316331, 0.0134514304724192, -0.0152560834038924, 0.0117265687773733, -0.0437183995785949, -0.00866187936743291, -0.0418058504080336, 0.0807500582702355, -0.0486078465011177, 0.155615226861536, -0.0711213725288543, -0.114945842078815, -0.0680100252848929, 0.131364712142299, -0.0364075705728993, 0.0241497410540252, -0.0185893518541936, -0.0860951298768102, -0.0105543945334427, 0.0983929627081788, -0.0809846746389744, 0.0537184681949511, -0.0413499881472977, 0.259267781302797, 0.0317836149105708, -0.118494062764006, 0.736328501815995, 0.0902664474228089, 0.435663605754062, -0.321804755462983},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000396180986240135, 0.0218166735098089, 0.00962857943557113, 0.0118223838397411, -0.0386200930353357, 0.0549301045311348, -0.0255353246076024, -0.0336121174078452, -0.0821315304265295, 0.106627813860814, -0.0421122676094755, -0.0251756789225905, -0.026694421843679, -0.00387484689204712, -0.00329201428801497, -0.00940176168823127, 0.00168506853674352, -0.00261416436528543, 0.00143665582940386, -0.0409559557664376, 0.000547681628745762, 9.49985402428899e-05, 0.000112306740668442, -0.0152948461494824, 0.000410216847388376, 0.000156669398596337, 0.000218004723301986, -0.0325268279583357, 0.114169552842125, 0.0214334073109032, 0.0440530051317887, -0.191698087141148, -0.0870634463072912, 0.183161022520475, -0.00279906307588785, -0.000731198562915532, 0.0716657109865357, 0.00653976121473003, -0.141635372249502, 0.29796752490964, -0.00209651514742707, -0.00120587578307144, 0.139114209894574, 0.00489832064355598, -0.233581784872353, 0.223179475587968, -0.000681410165577654, -0.000391934214267949, 0.0452149544041173, -0.000178004610942367, 0.00848834483592489, 0.0174464607140271, 0.00524477673604107, -0.250102923105532, -0.113589148133034, 1.01592911016151},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0222798637815404, 0.0157384636757173, -0.0132573892568217, -0.0116539403654933, 0.130691148487769, 0.574537076169525, -0.227302951843895, 0.075723802663307, -0.0304886776317668, 0.0107584088389607, 0.00275781261113255, 0.00227193562591235, -0.0651840819226078, 0.100280437182775, -0.0649749437055039, 0.00838325633735857, -0.0438437190827521, 0.0158018985425534, 0.00418435023440399, 0.00369599943203772, -0.0937368491673824, 0.147291418079094, -0.0985846245778222, 0.0136379351193378, -0.00281237972201518, -0.00178705171664094, -0.00184603177137807, -0.00318156671073522, 0.135818617311492, -0.239058106385728, 0.217617054249946, -0.0548325275417145, 0.135594537640337, -0.0197476187160159, 0.199489724091347, -0.362716030615442, 0.354020818079538, -0.0831958264843426, 0.22058606255838, -0.0321255526459663, 0.00598527537215419, 0.00440074726428653, 0.00662916434183088, -0.00249611820153089, -0.002676318192213, -0.000963860569483065, 0.0127963791968913, 0.00940869504609353, 0.014172998801565, -0.0232666213244206, -0.0249462873527775, 0.0227088620848716, -0.0315120319233671, -0.033786951378502, 0.083551246966671, 0.0191640690194888},
    {},
    {},
    {e-05, -6.3600134020399e-05, -6.39179461700591e-05, -9.78802368935341e-05, 0.0119183832377098, 0.00428298179362938, 0.00428003792419057, -0.0309395457727483, -0.0149430883155113, 0.0510080300769956, 0.0190991109554805, 0.00689773991227524, 0.00696279311635679, -0.0498281220951642, -0.0243095118088301, 0.0829801901267499, 0.000573029207156392, 0.000428493256672904, 0.000581723792626533, -0.00149498944557373, -0.00151012679740921, 0.00248964847991304, 6.77996550038935e-05, 5.06984541302049e-05, 6.88283807440972e-05, 2.44861861606401e-05, 2.47341183557855e-05, 2.4717117579657e-05, -0.000456786694266104, -0.000461411837892337, -0.000222851295041539, 0.00160984056801367},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0116958193796846, 0.00868942826669691, 0.0205403356838657, 0.0197079603842469, -0.0201247738104085, -0.00584323645334008, -0.00577935460978619, -0.0189575391547739, -0.0167229445882327, -0.0161405937908927, 0.0744586814191187, -0.0675455897618918, -0.016345793968674, -0.0164605936176498, 0.0767742256020672, -0.0700872974533169, 0.0148427436855893, 0.00638151686995211, 0.0144742293073119, -0.041520361292018, 0.0145079970177747, 0.00650803540571861, 0.014924354354337, -0.0430827522936911, 0.0516918998203713, -0.0838466866383685, 0.0412250887240754, -0.0358001777363246, 0.0606589183534292, -0.111649968396047, 0.0782426680475979, -0.107010375739815, 0.0295940856905749, 0.0741714582685035, -0.0239827552691317, -0.0217039465904844, 0.0480958691343095, -0.0208020433238828, 0.0181915227080135, 0.0455932912233093, -0.0854504023725405, 0.279624171526345, 0.132853752011542, -0.0741175462222497, -0.23437163581397, 0.162448602623015, -0.0835232494105545, 0.273317840187488, 0.129857516831937, -0.0755869842279408, -0.239018235798383, 0.167500490591787, 0.278545525839862, 0.880805880216168, -0.243589881034135, -0.233467551046818},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00888246788236103, -4.1621401110696e-06, -0.0100835618309506, 0.0195251039488213, 0.00276855422334106, 0.00354739278284635, 0.018497012182256, -0.0413981115341341, 1.34764571146093e-06, 2.3458968789053e-06, 0.0351417498325345, -0.0504430947992083, 1.70769882250376e-05, -2.18993997976694e-05, -0.062915024945878, 0.0427474066498151, 0.00207617681188772, 0.0020413294090695, 0.00495444159751826, -0.031007435542924, 0.0263087298629873, -0.0190562037323712, -0.00887004256151601, 0.0262768860950637, 0.0320568669764364, -0.0362041359827393, -5.86577422601205e-06, 1.27907673088466e-05, -8.84633105614372e-06, 0.0681493393296444, -0.0162998925724395, -0.0925068516383987, -0.0593298559286745, 0.115369044865993, -0.00769781311112114, 0.00960799969344683, -0.0100195650228908, -0.0130420310882868, -0.036470139090439, 0.0709175009299217, -0.00937969153956918, 0.018253862747739, -6.62595538389148e-06, -0.0158915560681608, -0.0692881905275169, 0.0864121113201356, -0.11885681869661, 0.231307825632447, -8.39622469952826e-05, 0.148350740803414, 0.646818621763509, -0.154705447658132, 0.059926745832443, 0.261284405700932, 0.167576410526233, -0.227470527214668},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218166735098091, -0.000396180986240272, 0.00962857943557116, 0.0118223838397412, -0.0386200930353358, 0.0549301045311349, -0.0255353246076024, -0.0336121174078453, 0.00168506853674374, -0.00261416436528498, 0.0014366558294036, -0.0409559557664379, 0.000547681628745547, 9.49985402433978e-05, 0.000112306740668029, -0.0152948461494823, -0.0821315304265298, 0.106627813860814, -0.0421122676094751, -0.0251756789225904, -0.0266944218436788, -0.00387484689204746, -0.00329201428801461, -0.0094017616882313, -0.0325268279583358, 0.000218004723301912, 0.00015666939859652, 0.000410216847388452, -0.00279906307588769, -0.000731198562915999, 0.071665710986536, 0.00653976121473101, -0.141635372249502, 0.297967524909641, 0.114169552842125, 0.0214334073109036, 0.0440530051317885, -0.191698087141148, -0.0870634463072908, 0.183161022520475, 0.139114209894574, -0.00120587578307177, -0.0020965151474268, -0.233581784872354, 0.00489832064355625, 0.223179475587968, 0.0452149544041173, -0.000391934214267958, -0.000681410165577516, 0.00848834483592521, -0.000178004610942688, 0.0174464607140272, -0.250102923105532, 0.00524477673604125, -0.113589148133034, 1.01592911016151},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029466788535953, 0.0174985944065183, -0.0283386095943203, 0.0195251039488213, 0.0724066424646241, -0.168855440911289, 0.180838102102827, -0.0944993352356275, -0.00342995289485286, -0.00259182591384755, -0.00371794677692989, -0.0175569975586256, -0.0992137635313647, 0.2365470195983, -0.316839952784665, 0.389120107604863, -0.00534222456152059, -0.0036159069645112, -0.00430211705354452, -0.0107923090820134, -0.154527546186846, 0.330011368059035, -0.366622398302525, 0.239192632867617, -0.0287096173150647, -0.00678487933658831, -0.0056274256096779, -0.0113307209892052, 0.0223104495607474, -0.0704903705473226, 0.270046808008898, 0.0223409640327253, -0.201887847036957, 0.0916613069592547, 0.0311257440235669, -0.0815659404066918, 0.165998121769477, 0.025851215233689, -0.124100720402198, 0.0563443238094873, 0.00578284080485381, 0.00167695757540006, 0.00254796784356087, 0.00480288799507106, 0.00255145275287009, 0.0104681916872639, 0.167272676255486, 0.0485071595553236, 0.073701734940998, -0.438343036323648, -0.232862300323702, 0.892089521161031, -0.0413432822734827, -0.0219629172026517, 0.198471563814312, -0.062902862252903},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0298409049274021, 0.0274003458448222, 0.0107306055922188, -0.0116539403654934, -0.0616020791184594, 0.199029865952139, -0.142163327346853, 0.0628400509032691, -0.0591659989897212, 0.0242282398847587, 0.00787120988341571, 0.0116750304913959, -0.104973403820015, 0.141244824496285, -0.0642425604898813, -0.0203059794997371, -0.0610854342286926, 0.0232306873822271, 0.00669126628283981, 0.00717665632659228, -0.108378901130757, 0.135429332788424, -0.0546121987974085, -0.0124821118327562, -0.0201356771221164, -0.00749836629912192, -0.00664803468950688, -0.0119885014703201, 0.253826662117954, -0.426739376810484, 0.387395988763217, -0.129873073436885, 0.435799472520741, -0.0842133314492746, 0.243375823624968, -0.362768474720544, 0.238132814788185, -0.110404287296158, 0.267886498788715, -0.0517660436411064, 0.0452167068747917, 0.020085537226104, 0.0289883075262094, -0.0205119728904679, -0.0148321715329211, -0.00961759465884515, 0.0802243131397706, 0.0356361296383094, 0.0514315884793258, -0.119579879709269, -0.0864680007722815, 0.0784960528037531, -0.214893266576778, -0.155388943236063, 0.521420011906788, 0.158688002977296},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {e-05, -6.39179461702391e-05, -6.3600134020219e-05, -9.60985345167288e-05, 0.0190991109554808, 0.00689773991227452, 0.00696279311635696, -0.0498281220951644, -0.0243095118088308, 0.0829801901267502, 0.0119183832377096, 0.0042829817936301, 0.00428003792419041, -0.030939545772748, -0.0149430883155105, 0.0510080300769955, 0.000581723792626429, 0.000428493256672904, 0.000573029207156413, -0.00151012679740979, -0.00149498944557315, 0.00248964847991304, 6.88283807440959e-05, 5.06984541302101e-05, 6.77996550038705e-05, 2.47341183558501e-05, 2.44861861606084e-05, 2.4717117579657e-05, -0.000461411837892146, -0.000456786694266412, -0.000222851295041539, 0.00160984056801368},
    {},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0152327680704992, 0.0287678230747217, 0.00320507108782465, 0.192230415140458, -0.0178382131382483, 0.0410650708630085, -0.0503948504088266, 0.0367434731025107, -0.179978494886956, 0.485949924576904, -0.766229854663151, 1.01051141642987, -0.000673485269869078, -0.000520749400288628, -0.000669087236009751, -0.00183577670380733, -0.0864392103719313, 0.204225002221373, -0.260674168295515, 0.206085870657986, -0.000323458282952733, -0.000218849807464032, -0.000227625898028226, -0.000374392247516084, -0.0088956829625518, -0.00332750776727578, -0.00269364658708953, -0.00377742729515847, 0.00469595144355348, 0.00448735510346721, 0.010913540761404, -0.0156696993884497, -0.0283431930980595, 0.046768073991902, 0.00197351752822271, 0.0015266144386367, 0.00222573096474376, -0.00533088841509641, -0.00578037173244154, 0.00953798155162805, 0.0542752718892435, 0.0232114501770188, 0.0263385347137, -0.146608993334404, -0.0878878170391831, 0.262311600776787, 0.000203099798998027, 8.68579870972955e-05, 9.85596371984366e-05, 0.000157107844851124, 9.41815724235634e-05, 0.000229055736824614, -0.0014167482678104, -0.000849299280487711, -0.00153620391228646, 0.0053643745480042},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0170982512251827, -0.0251141783214144, 0.0160091858217584, 0.0195251039488212, -0.00316207558373212, -0.00241577235429526, -0.00353354291864157, -0.0181912548602127, 0.0293790293907046, -0.114578371119061, 0.148172383047726, -0.0869289168370505, 0.163589384055956, -0.204331219412854, 0.180652919655244, -0.0841378732334325, -0.00335839069175079, -0.00254526063085197, -0.00367028490867594, -0.0177284701790033, -0.0187003136617071, -0.00453904348042368, -0.00447483985261495, -0.0171592587463129, -0.089361510440975, 0.190336131394752, -0.212238483655012, 0.159427677701374, 0.189862433322843, -0.0548926656233986, 0.0191290770071509, -0.171395695833932, 0.0195319060365617, 0.0873642936180386, 0.00421763175802385, 0.00135971169586803, 0.0039012250884114, 0.0042455349835919, 0.00398337890666903, 0.0178172618556883, 0.0201544183268214, -0.0570169166961804, 0.185032341811612, 0.02028775696638, -0.167035397269227, 0.0851417500342235, 0.112224567947569, -0.317483677185368, 1.03030384104418, 0.0361797962355779, -0.297879486990314, 0.103805482586356, -0.033617888495698, 0.276786505750101, -0.0315420290818586, -0.0984861631531851},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0258677865545686, -0.000295237250846821, 0.0261981528295216, -0.0295941247801589, -0.123694165861968, 0.228667944176925, -0.201694509957147, 0.0738837109693797, 0.00176428765404594, -0.0045625870305456, 0.007244604484628, 0.353061458146974, 0.000103788161142729, 8.2183803989889e-05, 0.000147945230318328, -0.0347719661720229, -0.121961990153499, 0.2250337245264, -0.197896745384656, 0.072004112783863, -0.00717468642842212, -0.00405343007898595, -0.00404133581581977, -0.00709146953368324, -0.0342850300686168, 0.000145593936763986, 8.06363412488768e-05, 0.000101147795129573, -0.000745002803480253, -0.000887527786823468, 0.178424152469219, 0.00289858008214597, -0.385626002220497, 0.513979475619877, 0.0367446701898158, 0.0242440923895321, 0.0363882052297267, -0.0791788655558166, -0.0786453959092752, 0.104822079207859, 0.175588457403319, -0.000870816268069403, -0.000726049966660603, -0.378364938100431, 0.00282484033908918, 0.500903861562423, 0.010329383119558, -5.12277116192705e-05, -4.27115106567879e-05, 0.00681531545619436, -5.08825635931397e-05, 0.0102291763923664, -0.0617813836177235, 0.000461254537812612, -0.0613651299539457, 0.200412591091128},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {e-05, -0.00351495966953588, -0.00326926866673902, 0.00113684563986326, 0.00922528597146994},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00138044771170169, 0.00638882353038111, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0357169332052307, 0.082715527617015, -0.102424732574839, 0.0760518002123166, -0.00422595518496749, -0.0013547840177805, -0.00101686811553745, -0.0013033246104207, -0.00766460049150903, 0.0175880306956037, -0.0214801029408928, 0.0155101676309956, -0.000906860003955772, -0.000288071461032006, -0.000213253491123779, -0.000265802822928669, -5.9364430041068e-05, -3.83065599433049e-05, -3.77810915961584e-05, -5.64180322033814e-05, 0.0252733238596133, 0.0091681554575778, 0.00933834822750593, -0.066229225128466, -0.0326033938848818, 0.111291244539186, 0.00537393653439483, 0.00192270868623531, 0.00190448281304146, -0.0138893267054969, -0.00664920623945957, 0.0226969756645593, 0.000351786028768911, 0.000255673905629774, 0.000337408026586029, -0.00090921637290052, -0.000884184141232383, 0.0014857784201566, 4.16226103098303e-05, 3.02508185953789e-05, 3.99214342172122e-05, 1.48919053797034e-05, 1.44819065756759e-05, 1.47507410000144e-05, -0.00027780660430704, -0.000270158128669245, -0.000132993732949987, 0.0009607245340639},
    {},
    {},
    {},
    {},
    {e-05, 0.000591393526743218, -0.000206759878969865, 0.000809825837014503, -0.00441655656921467, 0.00154409316372154, -0.00443933502297762, 0.0119441934599614},
    {e-05, -4.90514755036109e-05, -4.90999381118689e-05, -7.46268914880465e-05, -0.00237884036290431, -0.00074868349663016, -0.000555120501094694, -0.000698296888437269, 0.00448653414127223, 0.00450467759663949, 0.0126956210248063, -0.0157301889762824, -0.0329713743754392, 0.0544048679014512, 0.000442330508822652, 0.00032929765508909, 0.000443650701341412, -0.00114989679790922, -0.00115219045506158, 0.001901187642079, 0.0141512951707223, 0.00502614278802633, 0.00501588411531288, -0.0367881678484816, -0.0175861372125044, 0.0608239019496669, 5.29545980090087e-05, 1.88079866667813e-05, 1.87695983851926e-05, 3.9422614092417e-05, 1.88455022700749e-05, 5.31126478445338e-05, -0.000355500518010057, -0.000169942708606756, -0.000356209621911054, 0.00124387251864966},
    {},
    {},
    {},
    {},
    {},
    {e-05, 8.68104352410148e-05, 0.000143227438854058, 7.77662418170637e-05, 0.000185995560245967, -0.00138633542761056, -0.000752719569419944, -0.00129116969293944, 0.00483950370236205},
    {},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00595231255869356, 0.00476412582200827, 0.0280757815135755, -0.0295941247801589, -0.142669865790111, 0.291843625603676, -0.302869456861529, 0.168138269227149, -0.0275920932079782, 0.0681032668396043, -0.0986835027874703, 0.319641098476688, -0.00369386434939339, -0.0018420627670003, -0.00257202845525812, -0.0363098612093179, -0.0268382683375486, 0.0466279404547275, -0.0373939339722437, 0.01116991419638, -0.00359294678603257, -0.00126119637132629, -0.000974613380290534, -0.00126885446246881, -0.00683041084421045, -0.000410933730046629, -0.000227431231249795, -0.000245394151048609, 0.0253065278441703, 0.0181540378518073, 0.206163069251945, -0.0898530971770402, -0.524251903161903, 1.05895121462285, 0.017326500301564, 0.00687907171497722, 0.00720440458057795, -0.0340478467842405, -0.0183200746196731, 0.0370052357530367, 0.0329387331902804, 0.00224139766285627, 0.00168118623991436, -0.0647270320843951, -0.00596920255192204, 0.0703492087783396, 0.00440964052015386, 0.000300064908350677, 0.000225067154909153, 0.00175074209144607, 0.000161455481944332, 0.00183354017309713, -0.0240519510403536, -0.00221809903691534, -0.0129415977638842, 0.0640542148802875},
    {},
    {},
    {},
    {},
    {},
    {},
    {e-05, 0.000123507341827434, -0.00141484139474409, -0.00108250526785421, -0.000975708303855263, 0.00489993043831974},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00700570982272351, -0.0039671958602816, -0.0283386095943202, 0.0195251039488213, 0.072406642464624, -0.168855440911289, 0.180838102102827, -0.0944993352356275, 0.000881675779233383, 0.000801959357219758, 0.00164117293051684, -0.0273920854159159, 0.0255030826818177, -0.073192066942304, 0.139859224732048, 0.607097608174252, -0.0011451130277536, -0.000673043912202327, -0.000641631662810817, -0.000957221224723153, -0.0331231875874071, 0.0614263985245276, -0.0546792511962833, 0.0212151322982277, -0.00960126525101329, 0.000557467377202795, 0.00025969276977946, 0.00025833083352456, -0.00690326988915853, 0.0311157999146772, 0.421321766809783, -0.00986172950072104, -0.314981484277462, 0.143008184695501, 0.00579356513688952, -0.0121650083715782, 0.0147231629685927, 0.00385553391728549, -0.0110070831616921, 0.00499744607324104, 0.00167935394144967, -0.000110401968427981, -6.99259570600312e-05, 0.00111758579171945, -9.98933671546159e-05, 0.00144858658908356, 0.0485764761033608, -0.00319345341606724, -0.00202265674810738, -0.101998203955027, 0.00911692338278997, 0.123447196538075, -0.00962018371015547, 0.000859882570604262, 0.0274644613171979, -0.00870448740305298},
    {e-05, -9.10089387103999e-05, 0.0116355043739909, -0.0395842756636926, 1.11194332036726, 0.00578806775186339, -0.425867801143153, 0.162835958625975, 0.0235366042308363, -0.0420202768766602, 0.0388570541739812, 0.00614426323170619, -0.0148820249349653, 0.00569033110762516, 0.00682244665408593, 0.000165544232333922, 0.000117860635943874, 0.00178100917684923, 5.86296325622068e-05, 0.00164942997065817, 0.0346417252885989, 0.000840569096452961, 0.000598450377074105, -0.0618464275405142, -0.00203594308727178, 0.0571907222901656, -0.0347702174190692, -0.00114461233433264, 0.0842169716874305, -0.0123143225387024},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00513339611045794, 0.0126104679035144, 0.0107306055922188, -0.0116539403654933, -0.0616020791184593, 0.199029865952139, -0.142163327346853, 0.062840050903269, -0.0295896009607119, 0.0136392839755111, 0.00544335694053324, 0.0182151550335337, -0.0524984143521608, 0.0795137525688743, -0.0444271201886016, -0.0316809934644759, -0.00976967983719939, 0.00336641557499323, 0.000832405683526462, 0.000636531784454445, -0.0173335456893191, 0.0196253949660861, -0.00679385676002965, -0.00110709786801738, -0.00502439475260485, -0.000751445762371075, -0.000465575059279341, -0.000531777248558145, 0.14289168101562, -0.295112794978876, 0.604407671559529, -0.0898140827333985, 0.679925843563978, -0.131387998461278, 0.0352681842662437, -0.045129057400687, 0.021121131991873, -0.0137344939427515, 0.0237601277454778, -0.00459137662910303, 0.0102230255215698, 0.00172796720790297, 0.00144740647712993, -0.00398115426194417, -0.000909762444963774, -0.0013308811166492, 0.0181378799422366, 0.00306579120779307, 0.00256801519808433, -0.0232091739926471, -0.0053036967391553, 0.0108622704650946, -0.0417084816104069, -0.00953110774137474, 0.0721540127553236, 0.0219592189204032},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00367511242526296, 0.0253972624653879, -0.00366448453027264, 0.011822383839741, 0.0220838867907565, -0.0613915956629151, 0.29971631803346, -0.076726271638846, -0.0936105122386031, 0.117950744221066, -0.0442674609131471, -0.0222402896394521, -0.0694517908308399, 0.0503099322824041, 0.0038675522761538, 0.00474931180199928, -0.0117484678910901, 0.0121800061564542, -0.00335222048188686, -0.000777190818574885, -0.00871645838744058, 0.00519517947069472, 0.000292876250127735, 0.000165965533133658, -0.00252659949488249, -0.000767316927102116, -0.000562698709719944, -0.000703504718975342, 0.288289419424248, -0.264445516332457, -0.0434943939143449, -0.459983218363609, 0.902742954379208, 0.369352063935649, 0.0297697731931803, -0.0200255369950426, -0.00151991921677797, -0.0348329254516799, 0.0315465107267412, 0.0129070725951022, 0.0086292265240464, 0.00295772910200286, 0.00292019780295714, -0.0100968590612786, -0.00465935234926424, 0.00374131346123163, 0.00640222151602364, 0.00219440720934272, 0.00216656187585748, -0.00430664765188605, -0.00198736941186287, -0.000326870461831474, -0.024678247314225, -0.0113881603082131, 0.0223499055425404, 0.0388759908814471},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00216464827329596, 0.0300055156673333, -0.00428139506100089, -0.0295941247801589, 0.0263560489909357, -0.071290803486119, 0.124137438646549, 0.383808683073226, -0.145766077772663, 0.28016483684933, -0.262749987106195, 0.111252848540127, -0.0445452074184813, 0.00310597107865767, 0.0016728508196878, 0.00233464669412093, -0.00970937438415867, 0.0167516558155948, -0.0132940824930266, 0.00388775028686353, -0.00296712446719266, 0.000185712664972212, 8.46394591319322e-05, 8.15846378216349e-05, -0.000860066651710862, -0.000393080450660222, -0.000332623551692573, -0.000451216062994951, 0.237643788379266, -0.0198115605034006, -0.0175284168873226, -0.546109110383939, 0.0747886755596979, 0.841342254771773, 0.0142092312312003, -0.0010023845197802, -0.000612533599598935, -0.0276309035962141, 0.00261350337251372, 0.0294008525198299, 0.0041187641649441, 0.00212165260149822, 0.0024071881309329, -0.00800924228238475, -0.00553175564855245, 0.00852228919405466, 0.00125866873032927, 0.00064836384876305, 0.000735621731929458, -8.87922808970427e-05, -6.13263008017249e-05, -5.42588740761651e-05, -0.006793667254741, -0.00469219258024676, 0.000642587464437421, 0.0177130351991937},
    {e-05, -7.56002252730922e-05, -0.000109111249280735, 0.0664794510482462, 0.0300484980775638, 0.035869982963235, -0.182750526031733, -0.118090011664295, 0.339374740501439, 0.00281896164772152, 0.00119640185951848, 0.00125348284008001, -0.00727633935672296, -0.00412667615030023, 0.0118595097748227, 0.000817119380216336, 0.000536684303255302, 0.000673396711126685, -0.00210915884939906, -0.00185115251774683, 0.00343766126960385, 8.02306572190289e-05, 5.2695524561666e-05, 6.61189319589345e-05, 3.40508738617515e-05, 2.98855446085947e-05, 3.56754594918345e-05, -0.000534796702578139, -0.000469376814716125, -0.000303302620946435, 0.00184464173156587},
    {e-05, 9.69026328638935e-05, 0.000115022243288004, 7.63959394310051e-05, 0.000145175123742068, 0.00610416325940238, 0.00302233995531893, 0.00337765456969371, -0.016187819621396, -0.0107516916029517, 0.0274679925437241, -0.00119310925359794, -0.000792444136600511, 0.004244374535282, -0.00105120358339441},
    {},
    {},
    {},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000696217557866203, 0.0161601125382385, -0.0107414954878785, -0.0295941247801588, 0.0716512169321643, -0.219640225699807, 0.508137289414865, 0.462498877065499, -0.0741443373095673, 0.131860036949593, -0.10956139003762, 0.0352196480617273, -0.0273035043961886, 0.00598377507353535, 0.00214906927708218, 0.00200927002101695, -0.00311691852162273, 0.00536405680022568, -0.00424076416664728, 0.00123075677299012, -0.00114779903153406, 0.00024341953875275, 8.31834643464844e-05, 7.02142929648289e-05, -8.74057861345234e-05, -5.24846012755424e-05, -4.99388244904002e-05, -7.26574152463981e-05, 0.134778903993248, -0.0338151876404042, -0.0170960168773585, -0.274403811056705, 0.0969143307348479, 0.320953754397271, 0.00548279610120567, -0.00130887565395628, -0.000597423305481997, -0.010621276790312, 0.00338668826964646, 0.0112157851875391, 0.000417519173892673, 0.000282211597182818, 0.000358660436103929, -0.000808818462208281, -0.000730216581573406, 0.000854090737576606, 0.000153750603397554, 0.000103923858031027, 0.000132075990550846, -3.67039769223235e-05, -3.31370434911392e-05, -1.67531660864196e-05, -0.000826722549057605, -0.000746380729286207, 0.000263607814241574, 0.0021391272354126},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000278404956314926, 0.00734348804657583, 0.0263784345157957, 0.192230415140459, -0.168273534214414, 0.466883678827404, -0.770250380155342, 1.16177879234705, -0.0411121542477164, 0.0953904978590447, -0.118457806464409, 0.0884703557588255, -0.0048643068096025, -0.00156238526998135, -0.00117604374843888, -0.00151614546442355, -0.00154360799326981, 0.00353550741513455, -0.00430576776528785, 0.00309161208448677, -0.000182636570872934, -5.79074942612368e-05, -4.27474677581422e-05, -5.29819689258156e-05, -1.39079164693419e-05, -8.90566876029673e-06, -8.73387187568311e-06, -1.29444174865358e-05, 0.0291460988640961, 0.0106032943169837, 0.0108632141195975, -0.076596428766101, -0.0379272265467486, 0.12946407540304, 0.00108025695398446, 0.000385414218266406, 0.000379616920949837, -0.002784167998387, -0.00132537357759276, 0.00452414480070609, 8.2262404564229e-05, 5.92733532529775e-05, 7.75607474139753e-05, -0.000212016551629821, -0.000203830924063689, 0.000344517134121619, 9.73312106864951e-06, 7.01310308720126e-06, 9.17683051875713e-06, 3.47258421632421e-06, 3.33851316913075e-06, 3.42035053575588e-06, -6.47806177059701e-05, -6.22795393426141e-05, -3.08381243869608e-05, 0.00022276946458917}};
    
    // Reset values in the element tensor.
    A[0] = 0.0;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 219456
    for (unsigned int ip = 0; ip < 216; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      
      // Total number of operations to compute function values = 1008
      for (unsigned int r = 0; r < 168; r++)
      {
        F0 += FE0_C0[ip][r]*w[0][r];
        F1 += FE0_C1[ip][r]*w[0][r];
        F2 += FE0_C2[ip][r]*w[0][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 8
      // Number of operations to compute entry: 8
      A[0] += (F0*F0 + F1*F1 + F2*F2)*W216[ip]*det;
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "fef1c60007a7aad1a89fac814c009d259788c3ca8a9323b122bb9c99a764e0ba017d86cf360bd81946c3624d8377ce25d93aa97cd3690cff9c1b86c9aecae6c9";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 0;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 1;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_dofmap_1();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_ba9c1005a79cf3b53704b7c7d18578c691a658df_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
